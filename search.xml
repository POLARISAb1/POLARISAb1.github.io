<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>1-关于本地Typora和Hexo博客图片路径写法不同的图片显示</title>
    <url>/2022/02/23/1-%E5%85%B3%E4%BA%8E%E6%9C%AC%E5%9C%B0Typora%E5%92%8CHexo%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E8%B7%AF%E5%BE%84%E5%86%99%E6%B3%95%E4%B8%8D%E5%90%8C%E7%9A%84%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA/</url>
    <content><![CDATA[<h1 id="1-Typora设置"><a href="#1-Typora设置" class="headerlink" title="1. Typora设置"></a>1. Typora设置</h1><p><img src="/2022/02/23/1-%E5%85%B3%E4%BA%8E%E6%9C%AC%E5%9C%B0Typora%E5%92%8CHexo%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E8%B7%AF%E5%BE%84%E5%86%99%E6%B3%95%E4%B8%8D%E5%90%8C%E7%9A%84%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA/image-20220223154639175.png" alt="image-20220223154639175"></p>
<p>图片文件保存路径: <code>./$&#123;filename&#125;</code> 即保存到与 当前正在编辑的文件名 相同的同级文件夹下。</p>
<h1 id="2-配置-Hexo-图片文件夹"><a href="#2-配置-Hexo-图片文件夹" class="headerlink" title="2. 配置 Hexo 图片文件夹"></a>2. 配置 Hexo 图片文件夹</h1><p>在 Hexo 根目录打开配置文件 <code>_config.yml</code></p>
<p>搜索 <code>post_asset_folder</code>，<code>false</code> 改为 <code>true</code>，并新增：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">marked:</span></span><br><span class="line">  <span class="attr">prependRoot:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">postAsset:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h1 id="3-安装插件"><a href="#3-安装插件" class="headerlink" title="3. 安装插件"></a>3. 安装插件</h1><p>在Hexo 根目录下选择 <code>Git Bash Here</code>，输入 <code>npm install https://github.com/CodeFalling/hexo-asset-image</code></p>
<h1 id="4-图片路径写法"><a href="#4-图片路径写法" class="headerlink" title="4. 图片路径写法"></a>4. 图片路径写法</h1><p>在<code>a.md</code>的所在路径下有一同名文件夹<code>a</code>，里面存放一张图片<code>b</code></p>
<h2 id="1-直接粘贴图片——本地显示，博客显示"><a href="#1-直接粘贴图片——本地显示，博客显示" class="headerlink" title="1. 直接粘贴图片——本地显示，博客显示"></a>1. 直接粘贴图片——本地显示，博客显示</h2><p><code>![image-20220223160130442](1-关于本地Typora和Hexo博客图片路径写法不同的图片显示/image-20220223160130442.png)</code></p>
<p><img src="/2022/02/23/1-%E5%85%B3%E4%BA%8E%E6%9C%AC%E5%9C%B0Typora%E5%92%8CHexo%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E8%B7%AF%E5%BE%84%E5%86%99%E6%B3%95%E4%B8%8D%E5%90%8C%E7%9A%84%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA/image-20220223160130442.png" alt="image-20220223160130442"></p>
<h2 id="2-常规-markdown-语法——本地不显示，博客不显示"><a href="#2-常规-markdown-语法——本地不显示，博客不显示" class="headerlink" title="2.常规 markdown 语法——本地不显示，博客不显示"></a>2.常规 markdown 语法——本地不显示，博客不显示</h2><p><code>![a](a.jpg)</code></p>
<p><img src="/2022/02/23/1-%E5%85%B3%E4%BA%8E%E6%9C%AC%E5%9C%B0Typora%E5%92%8CHexo%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E8%B7%AF%E5%BE%84%E5%86%99%E6%B3%95%E4%B8%8D%E5%90%8C%E7%9A%84%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA/02/23/1-%E5%85%B3%E4%BA%8E%E6%9C%AC%E5%9C%B0Typora%E5%92%8CHexo%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E8%B7%AF%E5%BE%84%E5%86%99%E6%B3%95%E4%B8%8D%E5%90%8C%E7%9A%84%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA/a.jpg" alt="a"></p>
<h2 id="3-相对路径markdown-语法——本地显示，博客显示"><a href="#3-相对路径markdown-语法——本地显示，博客显示" class="headerlink" title="3. 相对路径markdown 语法——本地显示，博客显示"></a>3. 相对路径markdown 语法——本地显示，博客显示</h2><p><code>![a](1-关于本地Typora和Hexo博客图片路径写法不同的图片显示/a.jpg)</code></p>
<p><img src="/2022/02/23/1-%E5%85%B3%E4%BA%8E%E6%9C%AC%E5%9C%B0Typora%E5%92%8CHexo%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E8%B7%AF%E5%BE%84%E5%86%99%E6%B3%95%E4%B8%8D%E5%90%8C%E7%9A%84%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA/a.jpg" alt="a"></p>
<h2 id="4-相对路径——本地显示，博客显示"><a href="#4-相对路径——本地显示，博客显示" class="headerlink" title="4.相对路径——本地显示，博客显示"></a>4.相对路径——本地显示，博客显示</h2><p><code>![a](./1-关于本地Typora和Hexo博客图片路径写法不同的图片显示/a.jpg)</code></p>
<p><img src="/2022/02/23/1-%E5%85%B3%E4%BA%8E%E6%9C%AC%E5%9C%B0Typora%E5%92%8CHexo%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E8%B7%AF%E5%BE%84%E5%86%99%E6%B3%95%E4%B8%8D%E5%90%8C%E7%9A%84%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA/a.jpg" alt="a"></p>
<h2 id="5-src相对路径——本地显示，博客显示"><a href="#5-src相对路径——本地显示，博客显示" class="headerlink" title="5. src相对路径——本地显示，博客显示"></a>5. src相对路径——本地显示，博客显示</h2><p><code>&lt;img src=&quot;1-关于本地Typora和Hexo博客图片路径写法不同的图片显示/a.jpg&quot;/&gt;</code></p>
<img src="/2022/02/23/1-%E5%85%B3%E4%BA%8E%E6%9C%AC%E5%9C%B0Typora%E5%92%8CHexo%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E8%B7%AF%E5%BE%84%E5%86%99%E6%B3%95%E4%B8%8D%E5%90%8C%E7%9A%84%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA/a.jpg">

<h2 id="6-src图片——本地不显示，博客显示"><a href="#6-src图片——本地不显示，博客显示" class="headerlink" title="6. src图片——本地不显示，博客显示"></a>6. src图片——本地不显示，博客显示</h2><img src="/2022/02/23/1-%E5%85%B3%E4%BA%8E%E6%9C%AC%E5%9C%B0Typora%E5%92%8CHexo%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E8%B7%AF%E5%BE%84%E5%86%99%E6%B3%95%E4%B8%8D%E5%90%8C%E7%9A%84%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA/a.jpg">

<h2 id="7-插件——本地不显示，博客不显示"><a href="#7-插件——本地不显示，博客不显示" class="headerlink" title="7.插件——本地不显示，博客不显示"></a>7.插件——本地不显示，博客不显示</h2><img src="/2022/02/23/1-%E5%85%B3%E4%BA%8E%E6%9C%AC%E5%9C%B0Typora%E5%92%8CHexo%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E8%B7%AF%E5%BE%84%E5%86%99%E6%B3%95%E4%B8%8D%E5%90%8C%E7%9A%84%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA/02/23/1-%E5%85%B3%E4%BA%8E%E6%9C%AC%E5%9C%B0Typora%E5%92%8CHexo%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E8%B7%AF%E5%BE%84%E5%86%99%E6%B3%95%E4%B8%8D%E5%90%8C%E7%9A%84%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA/a.jpg" class title="a">
]]></content>
  </entry>
  <entry>
    <title>12.6 Github实战</title>
    <url>/2022/02/24/12-6-Github%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<blockquote>
<p>默认已经安装成功<code>Git</code>，并将<code>Git</code>与<code>GitHub</code>帐号绑定。设置好<code>user.name</code>和<code>user.email</code>配置信息以及ssh密钥绑定。</p>
</blockquote>
<h1 id="1-本地项目上传到Github仓库"><a href="#1-本地项目上传到Github仓库" class="headerlink" title="1. 本地项目上传到Github仓库"></a>1. 本地项目上传到Github仓库</h1><h2 id="1-1-建立本地与github仓库的连接"><a href="#1-1-建立本地与github仓库的连接" class="headerlink" title="1.1. 建立本地与github仓库的连接"></a>1.1. 建立本地与github仓库的连接</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin git@github.com:yourName/yourRepo.git</span><br></pre></td></tr></table></figure>

<blockquote>
<p>把 <code>your name</code>换成你注册github时填写的名字，把<code>yourRepo</code> 换成在github建立的仓库的名字</p>
</blockquote>
<h2 id="1-2-进入需要上传代码的文件夹，例如："><a href="#1-2-进入需要上传代码的文件夹，例如：" class="headerlink" title="1.2. 进入需要上传代码的文件夹，例如："></a>1.2. 进入需要上传代码的文件夹，例如：</h2><p>在git终端输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> c:/zsybim</span><br></pre></td></tr></table></figure>

<h2 id="1-3-上传文件"><a href="#1-3-上传文件" class="headerlink" title="1.3. 上传文件"></a>1.3. 上传文件</h2><p>在git终端输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 上传该文件夹下面的所有的文件</span></span><br><span class="line">git add ./ </span><br></pre></td></tr></table></figure>

<p>上传单个文件要指定路径，如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add ./read.txt</span><br></pre></td></tr></table></figure>

<h2 id="1-4-提交文件"><a href="#1-4-提交文件" class="headerlink" title="1.4 提交文件"></a>1.4 提交文件</h2><p>在git终端输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m<span class="string">&quot;commit&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="1-5-本地仓库推送到服务器"><a href="#1-5-本地仓库推送到服务器" class="headerlink" title="1.5. 本地仓库推送到服务器"></a>1.5. 本地仓库推送到服务器</h2><p>在git终端输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure>

<h2 id="1-6-最后查看文件是否上传成功"><a href="#1-6-最后查看文件是否上传成功" class="headerlink" title="1.6.最后查看文件是否上传成功"></a>1.6.最后查看文件是否上传成功</h2><p>进入<code>github</code>界面找到对应的仓库，查看刚刚上传的文件是否存在</p>
<h1 id="2-从Github拉取代码到本地仓库"><a href="#2-从Github拉取代码到本地仓库" class="headerlink" title="2. 从Github拉取代码到本地仓库"></a>2. 从Github拉取代码到本地仓库</h1><p>打开<code>Github</code>仓库，选择<code>code</code>，再选择<code>SSH</code>，复制链接。</p>
<p><img src="/2022/02/24/12-6-Github%E5%AE%9E%E6%88%98/image-20220224142113052.png" alt="image-20220224142113052"></p>
<p>在本地根目录，使用终端，建立与仓库的连接以拉取代码。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone git@github.com:POLARISAb1/python.git</span><br></pre></td></tr></table></figure>

<h1 id="3-在pycharm打开项目"><a href="#3-在pycharm打开项目" class="headerlink" title="3. 在pycharm打开项目"></a>3. 在pycharm打开项目</h1><p>打开后选择本地仓库文件夹，在pycharm中打开项目。</p>
<p><img src="/2022/02/24/12-6-Github%E5%AE%9E%E6%88%98/image-20220224142728221.png" alt="image-20220224142728221"></p>
<h1 id="4-pycharm中配置Github"><a href="#4-pycharm中配置Github" class="headerlink" title="4. pycharm中配置Github"></a>4. pycharm中配置Github</h1><h2 id="4-1-设置Git"><a href="#4-1-设置Git" class="headerlink" title="4.1 设置Git"></a>4.1 设置<code>Git</code></h2><p>本地有<code>Git</code>会自动识别到，点击“测试”，出现<code>Git</code>版本即为成功。</p>
<p><img src="/2022/02/24/12-6-Github%E5%AE%9E%E6%88%98/image-20220224143054944.png" alt="image-20220224143054944"></p>
<h2 id="4-2-设置Github"><a href="#4-2-设置Github" class="headerlink" title="4.2 设置Github"></a>4.2 设置Github</h2><h3 id="step1-选择新增Github，并通过令牌登录"><a href="#step1-选择新增Github，并通过令牌登录" class="headerlink" title="step1 选择新增Github，并通过令牌登录"></a>step1 选择新增<code>Github</code>，并通过<strong>令牌登录</strong></h3><p><img src="/2022/02/24/12-6-Github%E5%AE%9E%E6%88%98/image-20220224143256898.png" alt="image-20220224143256898"></p>
<h3 id="step2-获取令牌"><a href="#step2-获取令牌" class="headerlink" title="step2 获取令牌"></a>step2 获取令牌</h3><p>先点击Github的设置：</p>
<p><img src="/2022/02/24/12-6-Github%E5%AE%9E%E6%88%98/image-20220224143417743.png" alt="image-20220224143417743"></p>
<p>在设置中选择<code>Developer settings</code>，再选择<code>Personal sccess tokens</code></p>
<p><img src="/2022/02/24/12-6-Github%E5%AE%9E%E6%88%98/image-20220224144726683.png" alt="image-20220224144726683"></p>
<p>先起一个名字：</p>
<p><img src="/2022/02/24/12-6-Github%E5%AE%9E%E6%88%98/image-20220224145134402.png" alt="image-20220224145134402"></p>
<p>勾选所有的权限：</p>
<p><img src="/2022/02/24/12-6-Github%E5%AE%9E%E6%88%98/image-20220224145036083.png" alt="image-20220224145036083"></p>
<p><img src="/2022/02/24/12-6-Github%E5%AE%9E%E6%88%98/image-20220224145118379.png" alt="image-20220224145118379"></p>
<p><img src="/2022/02/24/12-6-Github%E5%AE%9E%E6%88%98/image-20220224145234616.png" alt="image-20220224145234616"></p>
<h3 id="step3-粘贴令牌到pycharm"><a href="#step3-粘贴令牌到pycharm" class="headerlink" title="step3 粘贴令牌到pycharm"></a>step3 粘贴令牌到pycharm</h3><p>并勾选“使用ssh克隆Git仓库”</p>
<p><img src="/2022/02/24/12-6-Github%E5%AE%9E%E6%88%98/image-20220224145636094.png" alt="image-20220224145636094"></p>
<h1 id="5-推送代码"><a href="#5-推送代码" class="headerlink" title="5. 推送代码"></a>5. 推送代码</h1><p>此时<code>pycharm</code>已经出现<code>Git</code>，点击<strong>绿色对钩</strong></p>
<p><img src="/2022/02/24/12-6-Github%E5%AE%9E%E6%88%98/image-20220224150229713.png" alt="image-20220224150229713"></p>
<p>选择要推送的文件，并填写提交信息，选择“提交并推送”</p>
<p><img src="/2022/02/24/12-6-Github%E5%AE%9E%E6%88%98/image-20220224150629559.png" alt="image-20220224150629559"></p>
<p>在Github可以看到提交的代码：</p>
<p><img src="/2022/02/24/12-6-Github%E5%AE%9E%E6%88%98/image-20220224150755091.png" alt="image-20220224150755091"></p>
<h1 id="6-拉取代码"><a href="#6-拉取代码" class="headerlink" title="6. 拉取代码"></a>6. 拉取代码</h1><h2 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h2><p><img src="/2022/02/24/12-6-Github%E5%AE%9E%E6%88%98/image-20220224151004121.png" alt="image-20220224151004121"></p>
<p>直接选择默认分支就可以</p>
<p><img src="/2022/02/24/12-6-Github%E5%AE%9E%E6%88%98/image-20220224151018912.png" alt="image-20220224151018912"></p>
<h2 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h2><p>在终端直接输入Git命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure>

<p><img src="/2022/02/24/12-6-Github%E5%AE%9E%E6%88%98/image-20220224151203527.png" alt="image-20220224151203527"></p>
<h1 id="7-代码版本对比"><a href="#7-代码版本对比" class="headerlink" title="7.代码版本对比"></a>7.代码版本对比</h1><p>选择“当前文件”，有多种对比方式。</p>
<p><img src="/2022/02/24/12-6-Github%E5%AE%9E%E6%88%98/image-20220224151451501.png" alt="image-20220224151451501"></p>
<p>如：选择“显示差异”，可以看到本地和<code>Github</code>仓库的不同。</p>
<p><img src="/2022/02/24/12-6-Github%E5%AE%9E%E6%88%98/image-20220224151602661.png" alt="image-20220224151602661"></p>
]]></content>
      <categories>
        <category>测试学习</category>
      </categories>
      <tags>
        <tag>Git代码管理</tag>
      </tags>
  </entry>
  <entry>
    <title>13.1 Python环境安装</title>
    <url>/2022/02/21/13-1-Python%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h2 id="Python环境安装"><a href="#Python环境安装" class="headerlink" title="Python环境安装"></a>Python环境安装</h2><ul>
<li><p>官网<a href="https://www.python.org/downloads/macos/">https://www.python.org/downloads/macos/</a></p>
</li>
<li><p>推荐版本：3.10.0</p>
</li>
</ul>
<h2 id="Windows安装步骤"><a href="#Windows安装步骤" class="headerlink" title="Windows安装步骤"></a>Windows安装步骤</h2><ul>
<li><p><a href="https://blog.csdn.net/nmjuzi/article/details/79075736">https://blog.csdn.net/nmjuzi/article/details/79075736</a></p>
</li>
<li><p>查看安装是否完成</p>
</li>
<li><p>命令：python</p>
  <img src="/2022/02/21/13-1-Python%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/image-20220214145520982-16448217221461.png" alt="image-20220214145520982" style="zoom:150%;">
</li>
<li><p>查看安装版本：python --version或者是python -V2</p>
</li>
</ul>
]]></content>
      <categories>
        <category>测试学习</category>
      </categories>
      <tags>
        <tag>python编程语言</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2022/02/21/13-2-Pycharm%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="安装Pycharm"><a href="#安装Pycharm" class="headerlink" title="安装Pycharm"></a>安装Pycharm</h1><ul>
<li><p>推荐版本：社区版</p>
  <img src="/2022/02/21/13-2-Pycharm%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20220214145827924-16448219090921.png" alt="image-20220214145827924" style="zoom:150%;">
</li>
<li><p>官方<a href="https://www.jetbrains.com/pycharm/download/#section=windows">https://www.jetbrains.com/pycharm/download/#section=windows</a></p>
</li>
<li><p>安装时记得勾选”添加到系统路径”</p>
</li>
</ul>
<h1 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h1><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><img src="/2022/02/21/13-2-Pycharm%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20220214145842520-16448219236392.png" alt="image-20220214145842520" style="zoom:150%;">

<img src="/2022/02/21/13-2-Pycharm%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20220214145847619-16448219289993.png" alt="image-20220214145847619" style="zoom:150%;">

<h2 id="系统设置"><a href="#系统设置" class="headerlink" title="系统设置"></a>系统设置</h2><blockquote>
<p>编译器在创建时就已经设置好，因此不用再设置了如需设置，采用python解释器后面的小齿轮进行添加等</p>
</blockquote>
<img src="/2022/02/21/13-2-Pycharm%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20220214145901385-16448219426434.png" alt="image-20220214145901385">

<img src="/2022/02/21/13-2-Pycharm%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20220214145907991-16448219496795.png" alt="image-20220214145907991" style="zoom:150%;">

<ul>
<li>如果需要新的库，安装，点击加号。如果没有其他库，则添加国内管理源即可。查找并安装包。</li>
</ul>
<img src="/2022/02/21/13-2-Pycharm%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20220214145925090-16448219660586.png" alt="image-20220214145925090" style="zoom:150%;">

<img src="/2022/02/21/13-2-Pycharm%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20220214145931244-16448219723007.png" alt="image-20220214145931244" style="zoom:150%;">

<blockquote>
<p><a href="https://blog.csdn.net/bananasssss/article/details/108369288?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_default&amp;utm_relevant_index=2">https://blog.csdn.net/bananasssss/article/details/108369288?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_default&amp;utm_relevant_index=2</a></p>
</blockquote>
]]></content>
      <categories>
        <category>测试学习</category>
      </categories>
      <tags>
        <tag>python编程语言</tag>
      </tags>
  </entry>
  <entry>
    <title>13.3 Python的基本操作</title>
    <url>/2022/02/21/13-3-Python%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="基本操作注意事项"><a href="#基本操作注意事项" class="headerlink" title="基本操作注意事项"></a>基本操作注意事项</h1><ul>
<li><p>缩进与空格</p>
</li>
<li><p>编写规范</p>
<ul>
<li><p>注释</p>
</li>
<li><p>符合规范性，命名要见名知意</p>
</li>
<li><p>不要用关键字命名</p>
</li>
</ul>
</li>
</ul>
<h1 id="PEP8编码规范（了解）"><a href="#PEP8编码规范（了解）" class="headerlink" title="PEP8编码规范（了解）"></a>PEP8编码规范（了解）</h1><blockquote>
<p><a href="https://www.python.org/dev/peps/pep-0008/">https://www.python.org/dev/peps/pep-0008/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>测试学习</category>
      </categories>
      <tags>
        <tag>python编程语言</tag>
      </tags>
  </entry>
  <entry>
    <title>13.10 常用数据结构——tuple元组</title>
    <url>/2022/02/21/13-10-%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94tuple%E5%85%83%E7%BB%84/</url>
    <content><![CDATA[<h1 id="元组定义与使用"><a href="#元组定义与使用" class="headerlink" title="元组定义与使用"></a>元组定义与使用</h1><h2 id="元组定义"><a href="#元组定义" class="headerlink" title="元组定义"></a>元组定义</h2><ul>
<li>元组是有序的<strong>不可变</strong>对象集合</li>
<li>元组使用小括号包围，各个对象之间使用逗号分隔</li>
<li>元组是<strong>异构</strong>的，可以包含多种数据类型</li>
</ul>
<h2 id="元组的使用"><a href="#元组的使用" class="headerlink" title="元组的使用"></a>元组的使用</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><ul>
<li><p>创建</p>
<ul>
<li><p>使用逗号分隔</p>
</li>
<li><p>通过小括号填充元素</p>
</li>
<li><p>通过构造方法 tuple(iterable)</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、直接使用逗号分隔</span></span><br><span class="line">t5 = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(t5))  <span class="comment"># 打印 &lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、通过小括号填充元素</span></span><br><span class="line">t3 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(t3)  <span class="comment"># 打印 (1, 2, 3)</span></span><br><span class="line">t4 = (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(t4)  <span class="comment"># 打印 (&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、通过构造函数tuple()</span></span><br><span class="line">t1 = <span class="built_in">tuple</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(t1))  <span class="comment"># 打印 &lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line">t2 = <span class="built_in">tuple</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(t2), t2)  <span class="comment"># 打印 &lt;class &#x27;tuple&#x27;&gt; (1, 2, 3)</span></span><br><span class="line">t6 = <span class="built_in">tuple</span>(<span class="string">&#x27;yangyilin&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(t6)  <span class="comment"># 打印 (&#x27;y&#x27;, &#x27;a&#x27;, &#x27;n&#x27;, &#x27;g&#x27;, &#x27;y&#x27;, &#x27;i&#x27;, &#x27;l&#x27;, &#x27;i&#x27;, &#x27;n&#x27;)</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<p><strong>注意</strong></p>
<p>​    单元素元组，逗号不可或缺，否则会被认为是int型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tup6 = <span class="number">1</span>,</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(tup6), tup6)  <span class="comment"># 打印 &lt;class &#x27;tuple&#x27;&gt; (1,)</span></span><br><span class="line">tup4 = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(tup4), tup4)  <span class="comment"># 打印 &lt;class &#x27;int&#x27;&gt; 1</span></span><br></pre></td></tr></table></figure>

<h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><img src="/2022/02/21/13-10-%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94tuple%E5%85%83%E7%BB%84/Snipaste_2021-09-30_16-47-54.jpg" alt="img">

<ul>
<li><p>索引</p>
</li>
<li><p>可以通过索引值来访问对应的元素。</p>
<ul>
<li><p>正向索引，默认编号从 0 开始</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = <span class="built_in">tuple</span>(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>))</span><br><span class="line"><span class="comment"># 正向索引</span></span><br><span class="line"><span class="built_in">print</span>(t[<span class="number">2</span>])  <span class="comment"># 打印 3</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>反向索引，默认编号从-1 开始</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 反向索引</span></span><br><span class="line"><span class="built_in">print</span>(t[-<span class="number">1</span>])  <span class="comment"># 打印 5</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><ul>
<li><p>切片 [start: stop: step]</p>
<ul>
<li><p>三个值都是可选的，非必填</p>
</li>
<li><p>start 值: 指示开始索引值，如果没有指定，则默认开始值为 0；</p>
</li>
<li><p>stop 值：指示到哪个索引值结束，但不包括这个结束索引值。如果没有指定，则取元组允许的最大索引值；</p>
</li>
<li><p>step 值：步长值指示每一步大小，如果没有指定，则默认步长值为 1。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(t[:])</span><br><span class="line"><span class="built_in">print</span>(t[:-<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(t[<span class="number">2</span>:<span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(t[<span class="number">2</span>:<span class="number">5</span>:<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 特殊的切片写法：逆序</span></span><br><span class="line"><span class="built_in">print</span>(t[::-<span class="number">1</span>])</span><br></pre></td></tr></table></figure>

<p>  结果：</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">(<span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line">(<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h1 id="元组常用方法"><a href="#元组常用方法" class="headerlink" title="元组常用方法"></a>元组常用方法</h1><h2 id="index"><a href="#index" class="headerlink" title="index()"></a>index()</h2><ul>
<li><p><code>index(item)</code></p>
</li>
<li><p>返回与目标元素相匹配的首个元素的索引。</p>
</li>
<li><p>目标必须在元组中存在的，否则会报错</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = (<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(t.index(<span class="number">3</span>))	<span class="comment"># 打印 1</span></span><br><span class="line"></span><br><span class="line">t = (<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(t.index(<span class="string">&#x27;a&#x27;</span>))	<span class="comment"># 打印 4</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="count"><a href="#count" class="headerlink" title="count()"></a>count()</h2><ul>
<li><p><code>count(item)</code>：返回某个元素出现的次数。</p>
</li>
<li><p>入参：对象 item</p>
</li>
<li><p>返回：次数</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(t.count(<span class="number">3</span>))	<span class="comment"># 打印 4</span></span><br><span class="line"></span><br><span class="line">t = (<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;s&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(t.count(<span class="string">&#x27;a&#x27;</span>))	<span class="comment"># 打印 1</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="元组解包"><a href="#元组解包" class="headerlink" title="元组解包"></a>元组解包</h2><p>​    元组解包：把一个可迭代对象里的元素，一并赋值到由对应的变量组成的元组中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">a = t[<span class="number">0</span>]</span><br><span class="line">b = t[<span class="number">1</span>]</span><br><span class="line">c = t[<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(a, b, c)  <span class="comment"># 打印 1 2 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用元组解包，一气呵成</span></span><br><span class="line">a, b, c = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(a, b, c)  <span class="comment"># 打印 1 2 3</span></span><br></pre></td></tr></table></figure>

<h1 id="元组与列表"><a href="#元组与列表" class="headerlink" title="元组与列表"></a>元组与列表</h1><ul>
<li>相同点<ul>
<li>都是有序的</li>
<li>都是异构的，能够包含不同类型的对象</li>
<li>都支持索引和切片</li>
</ul>
</li>
<li>区别<ul>
<li>声明方式不同，元组使用<code>()</code>，列表使用 <code>[]</code></li>
<li>列表是可变的，元组是不可变的</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>测试学习</category>
      </categories>
      <tags>
        <tag>python编程语言</tag>
      </tags>
  </entry>
  <entry>
    <title>12-2-Git 常用命令</title>
    <url>/2022/02/23/12-2-Git-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="集中式和分布式"><a href="#集中式和分布式" class="headerlink" title="集中式和分布式"></a>集中式和分布式</h1><p>Git是分布式版本控制系统。</p>
<p>先说集中式版本控制系统，版本库是集中存放在中央服务器的，而干活的时候，用的都是自己的电脑，所以要先从中央服务器取得最新的版本，然后开始干活，干完活了，再把自己的活推送给中央服务器。中央服务器就好比是一个图书馆，你要改一本书，必须先从图书馆借出来，然后回到家自己改，改完了，再放回图书馆。</p>
<p>集中式版本控制系统最大的毛病就是必须联网才能工作，如果在局域网内还好，带宽够大，速度够快，可如果在互联网上，遇到网速慢的话，可能提交一个10M的文件就需要5分钟。</p>
<p>那分布式版本控制系统与集中式版本控制系统有何不同呢？首先，分布式版本控制系统根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库，这样，你工作的时候，就不需要联网了，因为版本库就在你自己的电脑上。既然每个人电脑上都有一个完整的版本库，那多个人如何协作呢？比方说你在自己电脑上改了文件A，你的同事也在他的电脑上改了文件A，这时，你们俩之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。</p>
<p>和集中式版本控制系统相比，分布式版本控制系统的安全性要高很多，因为每个人电脑里都有完整的版本库，某一个人的电脑坏掉了不要紧，随便从其他人那里复制一个就可以了。而集中式版本控制系统的中央服务器要是出了问题，所有人都没法干活了。</p>
<p>在实际使用分布式版本控制系统的时候，其实很少在两人之间的电脑上推送版本库的修改，因为可能你们俩不在一个局域网内，两台电脑互相访问不了，也可能今天你的同事病了，他的电脑压根没有开机。因此，分布式版本控制系统通常也有一台充当“中央服务器”的电脑，但这个服务器的作用仅仅是用来方便“交换”大家的修改，没有它大家也一样干活，只是交换修改不方便而已。</p>
<h1 id="Git基本理论（重要）"><a href="#Git基本理论（重要）" class="headerlink" title="Git基本理论（重要）"></a>Git基本理论（重要）</h1><h2 id="三个区域"><a href="#三个区域" class="headerlink" title="三个区域"></a>三个区域</h2><p>Git本地有三个工作区域：工作目录（Working Directory）、暂存区(Stage&#x2F;Index)、资源库(Repository或Git Directory)。如果在加上远程的git仓库(Remote Directory)就可以分为四个工作区域。文件在这四个区域之间的转换关系如下：</p>
<p><img src="/2022/02/23/12-2-Git-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/640.png" alt="图片"></p>
<ul>
<li>Workspace：工作区，就是你平时存放项目代码的地方</li>
<li>Index &#x2F; Stage：暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息</li>
<li>Repository：仓库区（或本地仓库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本</li>
<li>Remote：远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换</li>
</ul>
<p>本地的三个区域确切的说应该是git仓库中HEAD指向的版本：</p>
<p><img src="/2022/02/23/12-2-Git-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/640-16456711023201.png" alt="图片"></p>
<ul>
<li>Directory：使用Git管理的一个目录，也就是一个仓库，包含我们的工作空间和Git的管理空间。</li>
<li>WorkSpace：需要通过Git进行版本控制的目录和文件，这些目录和文件组成了工作空间。</li>
<li>.git：存放Git管理信息的目录，初始化仓库的时候自动创建。</li>
<li>Index&#x2F;Stage：暂存区，或者叫待提交更新区，在提交进入repo之前，我们可以把所有的更新放在暂存区。</li>
<li>Local Repo：本地仓库，一个存放在本地的版本库；HEAD会只是当前的开发分支（branch）。</li>
<li>Stash：隐藏，是一个工作状态保存栈，用于保存&#x2F;恢复WorkSpace中的临时状态。</li>
</ul>
<h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><p>git的工作流程一般是这样的：</p>
<p>１、在工作目录中添加、修改文件；</p>
<p>２、将需要进行版本管理的文件放入暂存区域；</p>
<p>３、将暂存区域的文件提交到git仓库。</p>
<p>因此，git管理的文件有三种状态：已修改（modified）,已暂存（staged）,已提交(committed)</p>
<p><img src="/2022/02/23/12-2-Git-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/640-16456711023212.jpeg" alt="图片"></p>
<h1 id="Git常用命令"><a href="#Git常用命令" class="headerlink" title="Git常用命令"></a>Git常用命令</h1><h2 id="Git-项目搭建"><a href="#Git-项目搭建" class="headerlink" title="Git 项目搭建"></a>Git 项目搭建</h2><h3 id="创建工作目录与常用指令"><a href="#创建工作目录与常用指令" class="headerlink" title="创建工作目录与常用指令"></a>创建工作目录与常用指令</h3><p>工作目录（WorkSpace)一般就是你希望Git帮助你管理的文件夹，可以是你项目的目录，也可以是一个空目录，建议不要有中文。</p>
<p>日常使用只要记住下图6个命令：</p>
<p><img src="/2022/02/23/12-2-Git-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/640-16456713416656.png" alt="图片"></p>
<h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><h4 id="本地仓库搭建"><a href="#本地仓库搭建" class="headerlink" title="本地仓库搭建"></a>本地仓库搭建</h4><p>在文件根目录下：<code>git init</code></p>
<p>创建一个文件：<code>test.txt</code></p>
<p>将所有文件提交到临时仓库：<code>git add .</code></p>
<p>将临时仓库的内容提交到本地仓库：<code>git commit -m &quot;add 123&quot;</code> ，<code>&quot;add 123&quot;</code>是注释</p>
<h4 id="克隆远程仓库"><a href="#克隆远程仓库" class="headerlink" title="克隆远程仓库"></a>克隆远程仓库</h4><p>另一种方式是克隆远程目录，由于是将远程服务器上的仓库完全镜像一份至本地！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 克隆一个项目和它的整个代码历史(版本信息)</span></span><br><span class="line">$ git <span class="built_in">clone</span> [url]  <span class="comment"># https://gitee.com/kuangstudy/openclass.git</span></span><br></pre></td></tr></table></figure>

<h2 id="Git文件操作"><a href="#Git文件操作" class="headerlink" title="Git文件操作"></a>Git文件操作</h2><h3 id="文件的四种状态"><a href="#文件的四种状态" class="headerlink" title="文件的四种状态"></a>文件的四种状态</h3><p>版本控制就是对文件的版本控制，要对文件进行修改、提交等操作，首先要知道文件当前在什么状态，不然可能会提交了现在还不想提交的文件，或者要提交的文件没提交上。</p>
<ul>
<li>Untracked: 未跟踪, 此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过git add 状态变为Staged.</li>
<li>Unmodify: 文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处, 如果它被修改, 而变为Modified. 如果使用git rm移出版本库, 则成为Untracked文件</li>
<li>Modified: 文件已修改, 仅仅是修改, 并没有进行其他的操作. 这个文件也有两个去处, 通过git add可进入暂存staged状态, 使用git checkout 则丢弃修改过, 返回到unmodify状态, 这个git checkout即从库中取出文件, 覆盖当前修改 !</li>
<li>Staged: 暂存状态. 执行git commit则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为Unmodify状态. 执行git reset HEAD filename取消暂存, 文件状态为Modified</li>
</ul>
<h3 id="查看文件状态"><a href="#查看文件状态" class="headerlink" title="查看文件状态"></a>查看文件状态</h3><p>上面说文件有4种状态，通过如下命令可以查看到文件的状态：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看指定文件状态</span></span><br><span class="line">git status [filename]</span><br><span class="line"><span class="comment">#查看所有文件状态</span></span><br><span class="line">git status</span><br><span class="line"><span class="comment">#添加所有文件到暂存区</span></span><br><span class="line">git add .    </span><br><span class="line"><span class="comment">#提交暂存区中的内容到本地仓库 -m 提交信息</span></span><br><span class="line">git commit -m <span class="string">&quot;消息内容&quot;</span>    </span><br></pre></td></tr></table></figure>

<h3 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h3><p>有些时候我们不想把某些文件纳入版本控制中，比如数据库文件，临时文件，设计文件等</p>
<p>在主目录下建立”.gitignore”文件，此文件有如下规则：</p>
<ol>
<li>忽略文件中的空行或以井号（#）开始的行将会被忽略。</li>
<li>可以使用Linux通配符。例如：星号（*）代表任意多个字符，问号（？）代表一个字符，方括号（[abc]）代表可选字符范围，大括号（{string1,string2,…}）代表可选的字符串等。</li>
<li>如果名称的最前面有一个感叹号（!），表示例外规则，将不被忽略。</li>
<li>如果名称的最前面是一个路径分隔符（&#x2F;），表示要忽略的文件在此目录下，而子目录中的文件不忽略。</li>
<li>如果名称的最后面是一个路径分隔符（&#x2F;），表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#为注释</span></span><br><span class="line">*.txt        <span class="comment">#忽略所有 .txt结尾的文件,这样的话上传就不会被选中！</span></span><br><span class="line">!lib.txt     <span class="comment">#但lib.txt除外</span></span><br><span class="line">/temp        <span class="comment">#仅忽略项目根目录下的TODO文件,不包括其它目录temp</span></span><br><span class="line">build/       <span class="comment">#忽略build/目录下的所有文件</span></span><br><span class="line">doc/*.txt    <span class="comment">#会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</span></span><br></pre></td></tr></table></figure>

<h3 id="进行修改"><a href="#进行修改" class="headerlink" title="进行修改"></a>进行修改</h3><p>查看结果：<code>git status</code></p>
<p>查看究竟改变了什么：<code>git diff</code></p>
<h3 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h3><h4 id="1-还未放到临时仓库"><a href="#1-还未放到临时仓库" class="headerlink" title="1  还未放到临时仓库"></a>1  还未放到临时仓库</h4><p>查看状态：<code>git diff</code></p>
<p>撤销修改：<code>git checkout --xxx</code></p>
<h4 id="2-已经推送到临时仓库，使用git-add"><a href="#2-已经推送到临时仓库，使用git-add" class="headerlink" title="2 已经推送到临时仓库，使用git add"></a>2 已经推送到临时仓库，使用<code>git add</code></h4><h5 id="step1-撤除临时仓库更改"><a href="#step1-撤除临时仓库更改" class="headerlink" title="step1 撤除临时仓库更改"></a>step1 撤除临时仓库更改</h5><p>查看状态：<code>git status</code></p>
<p>撤销修改：<code>git reset HEAD &lt;file&gt;</code></p>
<h5 id="step2-撤除工作区更改"><a href="#step2-撤除工作区更改" class="headerlink" title="step2 撤除工作区更改"></a>step2 撤除工作区更改</h5><p>查看状态：<code>git status</code></p>
<p>撤销修改：<code>git checkout --xxx</code></p>
<h4 id="3-输入有误，使用-git-add，且使用了-git-commit"><a href="#3-输入有误，使用-git-add，且使用了-git-commit" class="headerlink" title="3  输入有误，使用 git add，且使用了 git commit"></a>3  输入有误，使用 <code>git add</code>，且使用了 <code>git commit</code></h4><p>查看提交日志：<code>git log</code></p>
<p>回到上一个版本：<code>git reset –hard HEAD^</code>（上上个版本^^，以此类推······）</p>
<p>查看提交日志：<code>git log</code></p>
<h1 id="Git-log分析与检索"><a href="#Git-log分析与检索" class="headerlink" title="Git log分析与检索"></a>Git log分析与检索</h1><h2 id="配置秘钥"><a href="#配置秘钥" class="headerlink" title="配置秘钥"></a>配置秘钥</h2><p>查看是否存在<code>id_rsa</code>和<code>id_rsa.pub</code>文件：<code>cd ~/.ssh</code></p>
<p>如果没有<code>SSH Key</code>，则需要先生成一下：<code>ssh-keygen -t rsa -C &quot;XXXX@gmail.com&quot;</code></p>
<h2 id="Git-push"><a href="#Git-push" class="headerlink" title="Git push"></a>Git push</h2><p>添加远程仓库：<code>git remote add origin git@github.com:xxx</code>（创建github仓库就有）</p>
<p>将本地代码上传到远端：<code>git push -u origin master</code>（第一次这么写，后面可以直接写<code>git push</code>)</p>
<h2 id="Git-rebase"><a href="#Git-rebase" class="headerlink" title="Git rebase"></a>Git rebase</h2><ul>
<li>pick：保留该commit（缩写：p）</li>
<li>reword：保留该commit，但我需要修改该commit的注释（缩写：r）</li>
<li>edit：保留该commit，但我要停下来修改该提交（不仅仅修改注释）（缩写：e）</li>
<li>squash：将commit和前一个commit合并（缩写：s）</li>
<li>fixup：将该commit和前一个commit合并，但我不要保留该提交的注释信息（缩写：f）</li>
<li>exec：执行shell命令（缩写：x）</li>
<li>drop：我要丢弃该commit（缩写：d）</li>
</ul>
<h1 id="Git分支管理"><a href="#Git分支管理" class="headerlink" title="Git分支管理"></a>Git分支管理</h1><p><img src="/2022/02/23/12-2-Git-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/640-164567247618810.png" alt="图片"></p>
<p>git分支中常用指令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出所有本地分支</span></span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有远程分支</span></span><br><span class="line">git branch -r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，但依然停留在当前分支</span></span><br><span class="line">git branch [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，并切换到该分支</span></span><br><span class="line">git checkout -b [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并指定分支到当前分支</span></span><br><span class="line">$ git merge [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line">$ git push origin --delete [branch-name]</span><br><span class="line">$ git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure>

<h1 id="分支开发主干发布模式"><a href="#分支开发主干发布模式" class="headerlink" title="分支开发主干发布模式"></a>分支开发主干发布模式</h1><p>如果同一个文件在合并分支时都被修改了则会引起冲突：解决的办法是我们可以修改冲突文件后重新提交！选择要保留他的代码还是你的代码！</p>
<p>master主分支应该非常稳定，用来发布新版本，一般情况下不允许在上面工作，工作一般情况下在新建的dev分支上工作，工作完后，比如上要发布，或者说dev分支代码稳定后可以合并到主分支master上来。</p>
]]></content>
      <categories>
        <category>测试学习</category>
      </categories>
      <tags>
        <tag>Git代码管理</tag>
      </tags>
  </entry>
  <entry>
    <title>13.4 Python的基本数据类型</title>
    <url>/2022/02/21/13-4-Python%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><ul>
<li><p>变量是一种存储数据的载体。计算机中的变量是实际存在的数据或者说是存储器中存储数据的一块内存空间</p>
</li>
<li><p>变量的值可以被读取和修改</p>
</li>
<li><p>pycharm中认识变量</p>
</li>
</ul>
<img src="/2022/02/21/13-4-Python%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/image-20220214150306918.png" alt="image-20220214150306918" style="zoom:100%;">

<ul>
<li>命名规则<ul>
<li>变量名由字母（广义的Unicode字符，不包括特殊字符）、数字和下划线构成，数字不能开头。</li>
<li>大小写敏感（大写的A和小写a的是两个不同的变量）。</li>
<li>不要跟关键字（有特殊含义的单词）和系统保留字（如函数、模块等的名字）冲突。</li>
</ul>
</li>
</ul>
<img src="/2022/02/21/13-4-Python%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/image-20220214150320170.png" alt="image-20220214150320170" style="zoom:87%;">

<h1 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h1><h2 id="常用数字类型"><a href="#常用数字类型" class="headerlink" title="常用数字类型"></a>常用数字类型</h2><h4 id="int"><a href="#int" class="headerlink" title="int"></a>int</h4><img src="/2022/02/21/13-4-Python%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/image-20220214150441199-16448222821823.png" alt="image-20220214150441199">

<img src="/2022/02/21/13-4-Python%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/image-20220214150446418-16448222874074.png" alt="image-20220214150446418">

<h4 id="float"><a href="#float" class="headerlink" title="float"></a>float</h4><img src="/2022/02/21/13-4-Python%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/image-20220214150501358-16448223025125.png" alt="image-20220214150501358">

<h3 id="常用运算符"><a href="#常用运算符" class="headerlink" title="常用运算符"></a>常用运算符</h3><img src="/2022/02/21/13-4-Python%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/image-20220214150518968-16448223202346.png" alt="image-20220214150518968">

<img src="/2022/02/21/13-4-Python%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/image-20220214150526828-16448223279977.png" alt="image-20220214150526828">

<img src="/2022/02/21/13-4-Python%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/image-20220214150533280-16448223343798.png" alt="image-20220214150533280">

<h1 id="字符串String-“-“"><a href="#字符串String-“-“" class="headerlink" title="字符串String “  “"></a>字符串String “  “</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str_a = <span class="string">&quot;abc&quot;</span></span><br><span class="line"><span class="built_in">print</span>(str_a)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(str_a))</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">abc</span><br><span class="line">&lt;class &#x27;str&#x27;&gt;</span><br></pre></td></tr></table></figure>

<p>\：转义符</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str_a = <span class="string">&quot;abc\ndsgvrwg&quot;</span></span><br><span class="line"><span class="built_in">print</span>(str_a)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(str_a))</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">abc</span><br><span class="line">dsgvrwg</span><br><span class="line">&lt;class &#x27;str&#x27;&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>不想让\n生效就在\前加\</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str_a = <span class="string">&quot;abc\\ndsgvrwg&quot;</span></span><br><span class="line"><span class="built_in">print</span>(str_a)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(str_a))</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">abc\ndsgvrwg</span><br><span class="line">&lt;class &#x27;str&#x27;&gt;</span><br></pre></td></tr></table></figure>

<p>r：忽略转义符的作用</p>
<blockquote>
<p>字符串引号前加r</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str_a = <span class="string">r&quot;abc\ndsgvrwg&quot;</span></span><br><span class="line"><span class="built_in">print</span>(str_a)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(str_a))</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">abc\ndsgvrwg</span><br><span class="line">&lt;class &#x27;str&#x27;&gt;</span><br></pre></td></tr></table></figure>

<p>+：多个字符串连接</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str_a = <span class="string">r&quot;abc\ndsgvrwg&quot;</span></span><br><span class="line">str_b = <span class="string">&#x27;waqpowxk2-4i0r-0 qw&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(str_a+str_b)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">abc\ndsgvrwgwaqpowxk2-4i0r-0 qw</span><br></pre></td></tr></table></figure>

<p>索引</p>
<img src="/2022/02/21/13-4-Python%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/image-20220214151249125.png" alt="image-20220214151249125" style="zoom: 67%;">

<blockquote>
<p>字符串位置，从左到右计数</p>
</blockquote>
<img src="/2022/02/21/13-4-Python%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/image-20220214151307217-164482278825710.png" alt="image-20220214151307217">

<p>切片</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">var = <span class="string">&quot;afd238vd&quot;</span></span><br><span class="line"><span class="comment">#索引从开始打印到结束</span></span><br><span class="line"><span class="built_in">print</span>(var[<span class="number">0</span>:])</span><br><span class="line"><span class="comment">#索引从第一位开始打印到第四位————第五位不打印“前闭后开“原则：1≤n&lt;5</span></span><br><span class="line"><span class="built_in">print</span>(var[<span class="number">1</span>:<span class="number">5</span>])</span><br><span class="line"><span class="comment">#第三位数字代表“步长”，默认为1  start：stop:step</span></span><br><span class="line"><span class="built_in">print</span>(var[<span class="number">1</span>:<span class="number">5</span>:<span class="number">2</span>])</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">afd238vd</span><br><span class="line">fd23</span><br><span class="line">f2</span><br></pre></td></tr></table></figure>

<h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用括号中包起来的元素就叫列表</span></span><br><span class="line">var_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="literal">True</span>]</span><br><span class="line"><span class="built_in">print</span>(var_list)</span><br><span class="line"><span class="comment"># 拿到倒数第一位元素</span></span><br><span class="line"><span class="built_in">print</span>(var_list[-<span class="number">1</span>])</span><br><span class="line"><span class="comment"># 拿到倒数第三位元素</span></span><br><span class="line"><span class="built_in">print</span>(var_list[-<span class="number">3</span>])</span><br><span class="line"><span class="comment"># 拿到倒数第11位元素——超出会报错</span></span><br><span class="line"><span class="comment"># print(var_list[-11])</span></span><br><span class="line"><span class="comment"># 拿到正数第三位元素</span></span><br><span class="line"><span class="built_in">print</span>(var_list[<span class="number">2</span>])</span><br><span class="line"><span class="comment"># 从第三元素开始，到倒数第二元素为止————前闭后开</span></span><br><span class="line"><span class="built_in">print</span>(var_list[<span class="number">2</span>:-<span class="number">1</span>])</span><br><span class="line"><span class="comment"># 从第三元素开始，到最后为止————前闭后开</span></span><br><span class="line"><span class="built_in">print</span>(var_list[<span class="number">2</span>:])</span><br><span class="line"><span class="comment"># 从第三元素开始，到最后为止，步长为2</span></span><br><span class="line"><span class="built_in">print</span>(var_list[<span class="number">2</span>::<span class="number">2</span>])</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[1, 2, 3, 4, 5, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, True]</span><br><span class="line">True</span><br><span class="line">b</span><br><span class="line">3</span><br><span class="line">[3, 4, 5, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span><br><span class="line">[3, 4, 5, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, True]</span><br><span class="line">[3, 5, &#x27;b&#x27;, True]</span><br></pre></td></tr></table></figure>

<ul>
<li><p>定义</p>
</li>
<li><p>索引</p>
</li>
<li><p>切片</p>
</li>
</ul>
]]></content>
      <categories>
        <category>测试学习</category>
      </categories>
      <tags>
        <tag>python编程语言</tag>
      </tags>
  </entry>
  <entry>
    <title>13.5 Python字符串基本操作</title>
    <url>/2022/02/21/13-5-Python%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="字符串操作的使用场景"><a href="#字符串操作的使用场景" class="headerlink" title="字符串操作的使用场景"></a>字符串操作的使用场景</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 单行</span></span><br><span class="line">str_a = <span class="string">&#x27;this is a girl&#x27;</span></span><br><span class="line"><span class="comment"># 多行</span></span><br><span class="line">str_b = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">132434r</span></span><br><span class="line"><span class="string">fedwsefrg</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(str_a)</span><br><span class="line"><span class="built_in">print</span>(str_b)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">this is a girl</span><br><span class="line"></span><br><span class="line">132434r</span><br><span class="line">fedwsefrg</span><br></pre></td></tr></table></figure>

<ul>
<li><p>数据提取之后的通用格式</p>
<ul>
<li><p>日志</p>
</li>
<li><p>excel</p>
</li>
</ul>
</li>
<li><p>第三方数据信息</p>
</li>
</ul>
<h1 id="字符串常用特殊字符"><a href="#字符串常用特殊字符" class="headerlink" title="字符串常用特殊字符"></a>字符串常用特殊字符</h1><img src="/2022/02/21/13-5-Python%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/image-20220214162100427.png" alt="image-20220214162100427" style="zoom:67%;">

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;test \n yyl&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;test \\n yyl&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">test </span><br><span class="line"> yyl</span><br><span class="line">test \n yyl</span><br></pre></td></tr></table></figure>

<h1 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h1><h2 id="占位符-方式"><a href="#占位符-方式" class="headerlink" title="占位符(%)方式"></a>占位符(%)方式</h2><img src="/2022/02/21/13-5-Python%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/image-20220214162315419-16448269969852.png" alt="image-20220214162315419" style="zoom:150%;">

<h3 id="s"><a href="#s" class="headerlink" title="%s"></a>%s</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用yyl代替%s的位置</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;test %s&#x27;</span> % <span class="string">&#x27;yyl&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">test yyl</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用111代替%s的位置</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;test %s&#x27;</span> % <span class="string">&#x27;111&#x27;</span>)</span><br><span class="line"><span class="comment"># 虽然是111但是是字符串并非是数字</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">test 111</span><br></pre></td></tr></table></figure>

<h3 id="d"><a href="#d" class="headerlink" title="%d"></a>%d</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用ad代替%d的位置</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;test %d&#x27;</span> % <span class="string">&#x27;ad&#x27;</span>)</span><br><span class="line"><span class="comment"># %d只接受整数而不是字符串</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;D:\PycharmProject\main.py&quot;, line 141, in &lt;module&gt;</span><br><span class="line">    print(&#x27;test %d&#x27; % &#x27;ad&#x27;)</span><br><span class="line">TypeError: %d format: a number is required, not str</span><br></pre></td></tr></table></figure>

<h2 id="format-格式化函数"><a href="#format-格式化函数" class="headerlink" title="format 格式化函数"></a>format 格式化函数</h2><p>Python2.6 开始，新增了一种格式化字符串的函数**&quot;str&quot;.format( )**，它增强了字符串格式化的功能。基本语法是通过 { } 和 : 来代替以前的 % 。</p>
<p><strong>format函数</strong></p>
<h3 id="位置映射"><a href="#位置映射" class="headerlink" title="位置映射"></a>位置映射</h3><img src="/2022/02/21/13-5-Python%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/image-20220214163326989.png" alt="image-20220214163326989">

<blockquote>
<p>分隔符可以任意写</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&#x27;yyl&#x27;</span>, <span class="string">&#x27;girl&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&#x27;yyl&#x27;</span>, <span class="string">&#x27;girl&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;,&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&#x27;yyl&#x27;</span>, <span class="string">&#x27;girl&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;&#125; is a &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&#x27;yyl&#x27;</span>, <span class="string">&#x27;girl&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yyl:girl</span><br><span class="line">yylgirl</span><br><span class="line">yyl,girl</span><br><span class="line">yyl is a girl</span><br></pre></td></tr></table></figure>

<ul>
<li>1 ： 不设置指定位置，按默认顺序 ； 2 &amp; 3：设置指定位置</li>
</ul>
<img src="/2022/02/21/13-5-Python%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/image-20220214163800444-16448278815262.png" alt="image-20220214163800444">

<ul>
<li>通过名称传递变量</li>
</ul>
<img src="/2022/02/21/13-5-Python%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/image-20220214163806931-16448278881683.png" alt="image-20220214163806931">

<h3 id="关键字映射"><a href="#关键字映射" class="headerlink" title="关键字映射"></a>关键字映射</h3><img src="/2022/02/21/13-5-Python%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/image-20220214163830847-16448279121074.png" alt="image-20220214163830847" style="zoom:150%;">

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;str&#125;&#123;0&#125; &#123;1&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;lovely&quot;</span>, <span class="string">&#x27;girl&#x27;</span>, <span class="built_in">str</span>=<span class="string">&#x27;yyl is a &#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yyl is a lovely gir</span><br></pre></td></tr></table></figure>



<h3 id="元素访问"><a href="#元素访问" class="headerlink" title="元素访问"></a>元素访问</h3><img src="/2022/02/21/13-5-Python%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/image-20220214164006189-16448280071555.png" alt="image-20220214164006189" style="zoom:150%;">

<img src="/2022/02/21/13-5-Python%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/image-20220214164012251-16448280133946.png" alt="image-20220214164012251" style="zoom:150%;">

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;0[1]&#125; &#123;1[2]&#125; &#123;2[0]&#125;&quot;</span>.<span class="built_in">format</span>((<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>), (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>), (<span class="string">&#x27;yyl&#x27;</span>, <span class="string">&#x27;test&#x27;</span>)))</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2 c yyl</span><br></pre></td></tr></table></figure>



<h3 id="填充对齐"><a href="#填充对齐" class="headerlink" title="填充对齐"></a>填充对齐</h3><blockquote>
<p>^、&lt;、&gt;分别是居中、左对齐、右对齐</p>
</blockquote>
<img src="/2022/02/21/13-5-Python%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/image-20220214164151908-16448281130547.png" alt="image-20220214164151908">

<ul>
<li>1</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125;*&#123;1&#125;=&#123;2:@&gt;2&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span> * <span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125;*&#123;1&#125;=&#123;2:@&lt;2&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span> * <span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125;*&#123;1&#125;=&#123;2:@^2&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span> * <span class="number">3</span>))</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3*2=@6</span><br><span class="line">3*2=6@</span><br><span class="line">3*2=6@</span><br></pre></td></tr></table></figure>

<ul>
<li>2</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;:*^30&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&#x27;centered&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;:*&lt;30&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&#x27;left&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;:*&gt;30&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&#x27;right&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">***********centered***********</span><br><span class="line">left**************************</span><br><span class="line">*************************right</span><br></pre></td></tr></table></figure>

<ul>
<li>3</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> a &lt;= i:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125;*&#123;1&#125;=&#123;2:0&gt;2&#125;&quot;</span>.<span class="built_in">format</span>(a, i, a * i), end=<span class="string">&quot;\t&quot;</span>)</span><br><span class="line">        a += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1*1=01	</span><br><span class="line">1*2=02	2*2=04	</span><br><span class="line">1*3=03	2*3=06	3*3=09	</span><br><span class="line">1*4=04	2*4=08	3*4=12	4*4=16	</span><br><span class="line">1*5=05	2*5=10	3*5=15	4*5=20	5*5=25	</span><br><span class="line">1*6=06	2*6=12	3*6=18	4*6=24	5*6=30	6*6=36	</span><br><span class="line">1*7=07	2*7=14	3*7=21	4*7=28	5*7=35	6*7=42	7*7=49	</span><br><span class="line">1*8=08	2*8=16	3*8=24	4*8=32	5*8=40	6*8=48	7*8=56	8*8=64	</span><br><span class="line">1*9=09	2*9=18	3*9=27	4*9=36	5*9=45	6*9=54	7*9=63	8*9=72	9*9=81	</span><br></pre></td></tr></table></figure>

<ul>
<li>4</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># test 是原始变量内容</span></span><br><span class="line">test = <span class="string">&quot;yyl is a &#123;girl&#125;&quot;</span></span><br><span class="line"><span class="comment"># test_str是替换过后的变量内容</span></span><br><span class="line">test_str = test.<span class="built_in">format</span>(girl=<span class="string">&quot;king&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(test)</span><br><span class="line"><span class="built_in">print</span>(test_str)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yyl is a &#123;girl&#125;</span><br><span class="line">yyl is a king</span><br></pre></td></tr></table></figure>

<p>精度设置</p>
<img src="/2022/02/21/13-5-Python%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/image-20220214164643315-16448284046668.png" alt="image-20220214164643315">

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># &#123;:.2f&#125; : 保留小数点后两位</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;:.2f&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="number">3.12345423432</span>))</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3.12</span><br></pre></td></tr></table></figure>

<p><strong>字面量格式化字符串 f-strings</strong></p>
<p>f-strings 就是在字符串的引号前面加上一个字母 f。字母大小写都可以，但是推荐使用小写。{ } 中除了可以使用变量外，还可以放入函数</p>
<img src="/2022/02/21/13-5-Python%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/image-20220214165105290-16448286666699.png" alt="image-20220214165105290">

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&quot; yyl &quot;</span></span><br><span class="line">age = <span class="number">22</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;My name is <span class="subst">&#123;name&#125;</span>. I am <span class="subst">&#123;age&#125;</span> years old.&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">My name is  yyl . I am 22 years old.</span><br></pre></td></tr></table></figure>

<h1 id="字符串常用API之join"><a href="#字符串常用API之join" class="headerlink" title="字符串常用API之join"></a>字符串常用API之join</h1><p>join( ) 方法用于将序列中的元素以指定的字符连接生成一个新的字符串。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;e&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span>.join(a))</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a-p-p-l-e</span><br></pre></td></tr></table></figure>

<ul>
<li><p>语法： &#39; sep &#39;.join(seq)</p>
</li>
<li><p>sep：分隔符。可以为空</p>
</li>
<li><p>seq：要连接的元素序列、字符串、元组、字典</p>
</li>
<li><p>返回值：返回一个以分隔符 sep 连接各个元素后生成的字符串</p>
</li>
</ul>
<h1 id="字符串常用API之split"><a href="#字符串常用API之split" class="headerlink" title="字符串常用API之split"></a>字符串常用API之split</h1><p><strong>split( )</strong> 通过指定分隔符对字符串进行切片，如果参数 num 有指定值，则分隔 num+1 个子字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&quot;Line1-abcdef \nLine2-abc \nLine4-abcd&quot;</span></span><br><span class="line"><span class="comment"># # 以空格为分隔符,包含 \n---默认</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>.split())</span><br><span class="line"><span class="comment"># 以空格为分隔符,分隔成两个</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>.split(<span class="string">&#x27; &#x27;</span>, <span class="number">1</span>))</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[&#x27;Line1-abcdef&#x27;, &#x27;Line2-abc&#x27;, &#x27;Line4-abcd&#x27;]</span><br><span class="line">[&#x27;Line1-abcdef&#x27;, &#x27;\nLine2-abc \nLine4-abcd&#x27;]</span><br></pre></td></tr></table></figure>

<ul>
<li><p>语法：str.split(seq&#x3D;&quot;&quot;, num&#x3D;string.count(str))</p>
</li>
<li><p>seq ：分隔符（会被丢弃），默认为所有的空字符，包括空格、换行(\n)、制表符(\t)等。</p>
</li>
<li><p>num ：分割次数。默认为 -1, 即分隔所有。</p>
</li>
<li><p>返回值：返回分割后的字符串列表。</p>
</li>
</ul>
<h1 id="字符串常用API之replace"><a href="#字符串常用API之replace" class="headerlink" title="字符串常用API之replace"></a>字符串常用API之replace</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str_ = <span class="string">&quot;this is string example....wow!!! this is really string&quot;</span></span><br><span class="line"><span class="built_in">print</span>(str_.replace(<span class="string">&quot;is&quot;</span>, <span class="string">&quot;was&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(str_.replace(<span class="string">&quot;is&quot;</span>, <span class="string">&quot;was&quot;</span>, <span class="number">3</span>))</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">thwas was string example....wow!!! thwas was really string</span><br><span class="line">thwas was string example....wow!!! thwas is really string</span><br></pre></td></tr></table></figure>

<ul>
<li><p>replace() 方法把字符串中的 old（旧字符串） 替换成 new(新字符串)，如果指定第三个参数max，则替换不超过 max 次。</p>
</li>
<li><p>replace()方法语法：str . replace ( old , new , [ max ])</p>
</li>
<li><p>old -- 将被替换的子字符串。</p>
</li>
<li><p>new -- 新字符串，用于替换old子字符串。</p>
</li>
<li><p>max -- 可选字符串, 替换不超过 max 次</p>
</li>
<li><p>返回值：返回字符串中的 old（旧字符串） 替换成 new(新字符串)后生成的新字符串，如果指定第三个参数max，则替换不超过 max 次。</p>
</li>
</ul>
<p><strong>strip()方法</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&quot;00000003210Runoob01230000000&quot;</span>;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>.strip(<span class="string">&#x27;0&#x27;</span>))</span><br><span class="line"><span class="comment"># 去除首尾字符 0</span></span><br><span class="line">str2 = <span class="string">&quot;   Runoob      &quot;</span></span><br><span class="line"><span class="comment"># 去除首尾空格</span></span><br><span class="line"><span class="built_in">print</span>(str2.strip())</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3210Runoob0123</span><br><span class="line">Runoob</span><br></pre></td></tr></table></figure>

<ul>
<li><p>strip() 方法用于移除字符串头尾指定的字符（默认为空格或换行符）或字符序列。</p>
</li>
<li><p><strong>注意：该方法只能删除开头或是结尾的字符，不能删除中间部分的字符。</strong></p>
</li>
<li><p>strip()方法语法：str.strip ([ chars ])</p>
</li>
<li><p>chars -- 移除字符串头尾指定的字符序列。</p>
</li>
<li><p>返回值：返回移除字符串头尾指定的字符生成的新字符串。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>测试学习</category>
      </categories>
      <tags>
        <tag>python编程语言</tag>
      </tags>
  </entry>
  <entry>
    <title>13.6 Python运算符</title>
    <url>/2022/02/21/13-6-Python%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[<h1 id="运算符的作用"><a href="#运算符的作用" class="headerlink" title="运算符的作用"></a>运算符的作用</h1><ul>
<li>Python基础语法的内容</li>
<li>通常表示不同数据或变量之间的关系</li>
</ul>
<h1 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h1><img src="/2022/02/21/13-6-Python%E8%BF%90%E7%AE%97%E7%AC%A6/image-20220214143828957-16448207115151.png" alt="image-20220214143828957" style="zoom:67%;">

<img src="/2022/02/21/13-6-Python%E8%BF%90%E7%AE%97%E7%AC%A6/image-20220214143834400-16448207160832.png" alt="image-20220214143834400">

<h1 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h1><img src="/2022/02/21/13-6-Python%E8%BF%90%E7%AE%97%E7%AC%A6/image-20220214143910164.png" alt="image-20220214143910164" style="zoom:67%;">

<ul>
<li>输出布尔值</li>
</ul>
<h1 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h1><img src="/2022/02/21/13-6-Python%E8%BF%90%E7%AE%97%E7%AC%A6/image-20220214143943557.png" alt="image-20220214143943557" style="zoom:67%;">

<img src="/2022/02/21/13-6-Python%E8%BF%90%E7%AE%97%E7%AC%A6/image-20220214144037404-16448208385265.png" alt="image-20220214144037404">

<h1 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h1><img src="/2022/02/21/13-6-Python%E8%BF%90%E7%AE%97%E7%AC%A6/image-20220214144100535.png" alt="image-20220214144100535" style="zoom:67%;">

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a, b = <span class="literal">True</span>, <span class="literal">False</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">and</span> b)</span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">or</span> b)</span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">not</span> b)</span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">not</span> a)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">False</span><br><span class="line">True</span><br><span class="line">True</span><br><span class="line">False</span><br></pre></td></tr></table></figure>



<h1 id="成员运算符"><a href="#成员运算符" class="headerlink" title="成员运算符"></a>成员运算符</h1><img src="/2022/02/21/13-6-Python%E8%BF%90%E7%AE%97%E7%AC%A6/image-20220214144746738.png" alt="image-20220214144746738" style="zoom:67%;">

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list_a = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;</span><br><span class="line">str_a = <span class="string">&#x27;rfedaergd&#x27;</span></span><br><span class="line">str_b = <span class="string">&#x27;gfdgarrfed&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a&#x27;</span> <span class="keyword">in</span> list_a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> list_a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a&#x27;</span> <span class="keyword">in</span> str_a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> str_a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> str_b)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">True</span><br><span class="line">False</span><br><span class="line">True</span><br><span class="line">False</span><br><span class="line">False</span><br></pre></td></tr></table></figure>

<blockquote>
<p>in 右边一定是一个序列：字符串、数列、元组、列表······</p>
<p>返回值：布尔值</p>
</blockquote>
<h1 id="身份运算符"><a href="#身份运算符" class="headerlink" title="身份运算符"></a>身份运算符</h1><img src="/2022/02/21/13-6-Python%E8%BF%90%E7%AE%97%E7%AC%A6/image-20220214145100845.png" alt="image-20220214145100845" style="zoom:67%;">

<img src="/2022/02/21/13-6-Python%E8%BF%90%E7%AE%97%E7%AC%A6/image-20220214145148059-16448215092519.png" alt="image-20220214145148059">

<blockquote>
<p>a与b内存地址不同</p>
</blockquote>
<ul>
<li>is是判断两个变量之间的<strong>内存地址</strong>是否相同——<strong>是否是对同一个对象的引用</strong></li>
<li>可变的数据结构，即使看着一样，但是内存地址是不同的</li>
<li>不可变的数据类型，如果看着一样，那么他们的内存地址是相同的</li>
</ul>
<blockquote>
<p>在<code>python</code>中针对<code>NONE</code>比较时，建议使用<code>is</code>判断</p>
</blockquote>
<p><strong><code>is</code>与<code>==</code>区别</strong></p>
<ul>
<li><code>is</code>用于判断<strong>两个变量</strong> <strong>引用对象是否为同一个</strong></li>
<li><code>==</code>用于判断<strong>引用变量的值</strong>是否相等</li>
</ul>
]]></content>
      <categories>
        <category>测试学习</category>
      </categories>
      <tags>
        <tag>python编程语言</tag>
      </tags>
  </entry>
  <entry>
    <title>13.7 Python控制流——判断</title>
    <url>/2022/02/21/13-7-Python%E6%8E%A7%E5%88%B6%E6%B5%81%E2%80%94%E2%80%94%E5%88%A4%E6%96%AD/</url>
    <content><![CDATA[<h1 id="什么是分支判断"><a href="#什么是分支判断" class="headerlink" title="什么是分支判断"></a>什么是分支判断</h1><img src="/2022/02/21/13-7-Python%E6%8E%A7%E5%88%B6%E6%B5%81%E2%80%94%E2%80%94%E5%88%A4%E6%96%AD/image-20220214170058028-16448292591501.png" alt="image-20220214170058028">

<ul>
<li><p>一条一条语句顺序执行叫做顺序结构</p>
</li>
<li><p>分支结构就是在某个判断条件后，选择一条分支去执行</p>
</li>
</ul>
<h1 id="if-条件判断"><a href="#if-条件判断" class="headerlink" title="if 条件判断"></a>if 条件判断</h1><img src="/2022/02/21/13-7-Python%E6%8E%A7%E5%88%B6%E6%B5%81%E2%80%94%E2%80%94%E5%88%A4%E6%96%AD/image-20220214170113523-16448292745802.png" alt="image-20220214170113523">

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name1 = <span class="string">&#x27;yyl&#x27;</span></span><br><span class="line">name2 = <span class="string">&quot;yll&quot;</span></span><br><span class="line"><span class="comment"># if后面要有判断条件</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;name1&#x27;</span> != <span class="string">&#x27;name2&#x27;</span>:</span><br><span class="line">    <span class="comment"># 执行语句需要注意缩进</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;123&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">123</span><br></pre></td></tr></table></figure>

<blockquote>
<p>if后面要有判断条件，if后不加括号</p>
</blockquote>
<p><strong>执行语句需要注意缩进</strong></p>
<h1 id="else判断语句"><a href="#else判断语句" class="headerlink" title="else判断语句"></a>else判断语句</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name1 = <span class="string">&#x27;yyl&#x27;</span></span><br><span class="line">name2 = <span class="string">&quot;yll&quot;</span></span><br><span class="line"><span class="comment"># if后面要有判断条件</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;name1&#x27;</span> == <span class="string">&#x27;name2&#x27;</span>:</span><br><span class="line">    <span class="comment"># 执行语句需要注意缩进</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;456&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">456</span><br></pre></td></tr></table></figure>

<h1 id="elif-多重条件"><a href="#elif-多重条件" class="headerlink" title="elif 多重条件"></a>elif 多重条件</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num = <span class="number">5</span></span><br><span class="line"><span class="keyword">if</span> num == <span class="number">3</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> num == <span class="number">2</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;bbb&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> num == <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;ccc&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;ddd&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ddd</span><br></pre></td></tr></table></figure>

<h1 id="分支嵌套"><a href="#分支嵌套" class="headerlink" title="分支嵌套"></a>分支嵌套</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num = <span class="number">5</span></span><br><span class="line"><span class="keyword">if</span> num == <span class="number">3</span>:</span><br><span class="line">    <span class="keyword">if</span> num != <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;yes&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;boss&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> num == <span class="number">2</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">5</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;yyl&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;123&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yyl</span><br><span class="line">123</span><br></pre></td></tr></table></figure>

<p>如果判断需要多个条件需同时判断时，可以使用 or （或）：表示两个条件有一个成立时判断条件成功；使用 and （与）时，表示只有两个条件同时成立的情况下，判断条件才成功。</p>
<h1 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a, b = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">name = <span class="string">&#x27;yyl&#x27;</span> <span class="keyword">if</span> a &gt; b <span class="keyword">else</span> <span class="string">&#x27;yll&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(name)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yll</span><br></pre></td></tr></table></figure>

<ul>
<li>语法：exp1 if contion else exp2</li>
<li>condition 是判断条件，exp1 和 exp2 是两个表达式。如果 condition 成立（结果为真），就执行 exp1，并把 exp1 的结果作为整个表达式的结果；如果 condition 不成立（结果为假），就执行 exp2，并把 exp2 的结果作为整个表达式的结果。</li>
</ul>
]]></content>
      <categories>
        <category>测试学习</category>
      </categories>
      <tags>
        <tag>python编程语言</tag>
      </tags>
  </entry>
  <entry>
    <title>13.8 Python控制流——循环</title>
    <url>/2022/02/21/13-8-Python%E6%8E%A7%E5%88%B6%E6%B5%81%E2%80%94%E2%80%94%E5%BE%AA%E7%8E%AF/</url>
    <content><![CDATA[<h1 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h1><img src="/2022/02/21/13-8-Python%E6%8E%A7%E5%88%B6%E6%B5%81%E2%80%94%E2%80%94%E5%BE%AA%E7%8E%AF/image-20220214171748443-16448302705411.png" alt="image-20220214171748443">

<ul>
<li><p>循环语句允许我们执行一个语句或语句组多次</p>
</li>
<li><p>python提供了for循环和while循环</p>
</li>
</ul>
<h1 id="循环的作用"><a href="#循环的作用" class="headerlink" title="循环的作用"></a>循环的作用</h1><ul>
<li><p>封装重复操作</p>
</li>
<li><p>Python最重要的基础语法之一</p>
</li>
</ul>
<h1 id="for-in循环"><a href="#for-in循环" class="headerlink" title="for-in循环"></a>for-in循环</h1><ul>
<li><p>使用场景：</p>
<p>  明确的知道循环执行的次数或者要对一个容器进行迭代（后面会讲到）</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用for 循环遍历列表中的元素</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure>

<ul>
<li><p>range 函数</p>
<ul>
<li><p>当range只传入一个参数的时候，传入的是结束数值，遵循前闭后开原则</p>
<blockquote>
<p>range(101)可以产生一个0到100的整数序列。</p>
</blockquote>
</li>
<li><p>当range传入两个参数的时候，range（开始数值，结束数值）</p>
<blockquote>
<p>range(1, 100)可以产生一个1到99的整数序列。</p>
</blockquote>
</li>
<li><p>当range传入三个参数的时候，range（开始数值，结束数值，步长）</p>
<blockquote>
<p>range(1, 100, 2)可以产生一个1到99的奇数序列，其中的2是步长。</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># for 循环结合 range函数</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span>):</span><br><span class="line">  <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">3</span><br><span class="line">5</span><br><span class="line">7</span><br><span class="line">9</span><br></pre></td></tr></table></figure>

<h1 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h1><img src="/2022/02/21/13-8-Python%E6%8E%A7%E5%88%B6%E6%B5%81%E2%80%94%E2%80%94%E5%BE%AA%E7%8E%AF/image-20220214172023097-16448304250652.png" alt="image-20220214172023097">

<ul>
<li><p>满足条件，进入循环</p>
</li>
<li><p><strong>需要设定好循环结束条件</strong></p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="comment"># while循环条件，满足条件执行循环体内代码</span></span><br><span class="line"><span class="keyword">while</span> count &lt; <span class="number">5</span>:</span><br><span class="line">    <span class="comment"># count 变量+1，否则会进入死循环</span></span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(count)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure>

<h1 id="break-跳出整个循环体"><a href="#break-跳出整个循环体" class="headerlink" title="break-跳出整个循环体"></a>break-跳出整个循环体</h1><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># while循环</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="comment"># while循环条件，满足条件执行循环体内代码</span></span><br><span class="line"><span class="keyword">while</span> count &lt; <span class="number">5</span>:</span><br><span class="line">    <span class="comment"># count 变量+1，否则会进入死循环</span></span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> count == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(count)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure>

<h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list_demo = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="comment"># 循环遍历裂变</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list_demo:</span><br><span class="line">    <span class="comment"># 如果i 等于三，那么跳出整个for循环</span></span><br><span class="line">    <span class="comment"># 不再打印后面的4、5、6</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure>

<h1 id="continue-跳出当前轮次循环"><a href="#continue-跳出当前轮次循环" class="headerlink" title="continue:跳出当前轮次循环"></a>continue:跳出当前轮次循环</h1><p>continue 语句用来告诉Python跳过当前循环的剩余语句，然后继续进行下一轮循环。</p>
<h2 id="continue-while循环"><a href="#continue-while循环" class="headerlink" title="continue+while循环"></a>continue+while循环</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># while循环</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="comment"># while循环条件，满足条件执行循环体内代码</span></span><br><span class="line"><span class="keyword">while</span> count &lt; <span class="number">5</span>:</span><br><span class="line">    <span class="comment"># count 变量+1，否则会进入死循环</span></span><br><span class="line">    <span class="built_in">print</span>(count)</span><br><span class="line">    <span class="keyword">if</span> count == <span class="number">3</span>:</span><br><span class="line">        <span class="comment"># 为了与3区分，如果==3的情况下count = count+1.5</span></span><br><span class="line">        count += <span class="number">1.5</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    count += <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4.5</span><br></pre></td></tr></table></figure>

<h2 id="continue-for循环"><a href="#continue-for循环" class="headerlink" title="continue+for循环"></a>continue+for循环</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list_demo = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="comment"># 循环遍历裂变</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list_demo:</span><br><span class="line">    <span class="comment"># 如果i 等于三，那么跳出整个if循环,不再打印3</span></span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td></tr></table></figure>

<h1 id="pass"><a href="#pass" class="headerlink" title="pass"></a>pass</h1><ul>
<li>没有实质性含义，通常占位使用</li>
<li>不影响代码的执行逻辑</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a&quot;</span>)</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;b&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a</span><br><span class="line">b</span><br></pre></td></tr></table></figure>

<h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><h2 id="1：求1-100的偶数的和"><a href="#1：求1-100的偶数的和" class="headerlink" title="1：求1~100的偶数的和"></a>1：求1~100的偶数的和</h2><h3 id="使用分支结构"><a href="#使用分支结构" class="headerlink" title="使用分支结构"></a>使用分支结构</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用分支结构求1~100的和</span></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">101</span>):</span><br><span class="line">    <span class="comment"># 对i取余，如果余数为0，证明i是偶数</span></span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">sum</span> += i</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">6</span><br><span class="line">12</span><br><span class="line">···</span><br><span class="line">2550</span><br></pre></td></tr></table></figure>

<h3 id="不使用分支结构"><a href="#不使用分支结构" class="headerlink" title="不使用分支结构"></a>不使用分支结构</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">101</span>, <span class="number">2</span>):</span><br><span class="line">    <span class="built_in">sum</span> += i + <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">6</span><br><span class="line">12</span><br><span class="line">···</span><br><span class="line">2550</span><br></pre></td></tr></table></figure>

<h2 id="2：猜数字游戏"><a href="#2：猜数字游戏" class="headerlink" title="2：猜数字游戏"></a>2：猜数字游戏</h2><p>计算机出一个1~100之间的随机数由人来猜。计算机根据人猜的数字分别给出提示大一点&#x2F;小一点&#x2F;猜对了，直到猜对为止</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># random()是不能直接访问的，需要导入 random 模块，然后通过 random 静态对象调用该方法。</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算机出一个1~100之间的随机数由人来猜。计算机根据人猜的数字分别给出提示大一点/小一点/猜对了</span></span><br><span class="line"><span class="comment"># random.randint()随机生一个整数int类型，可以指定这个整数的范围，同样有上限和下限值</span></span><br><span class="line">a = random.randint(<span class="number">0</span>, <span class="number">101</span>)</span><br><span class="line">b = <span class="built_in">int</span>()</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="keyword">while</span> a != b:</span><br><span class="line">    b = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个数：&quot;</span>))</span><br><span class="line">    <span class="keyword">if</span> b &gt; a:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;小一点&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> b &lt; a:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;大一点&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;猜对了&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">27</span><br><span class="line">请输入一个数：33</span><br><span class="line">小一点</span><br><span class="line">请输入一个数：30</span><br><span class="line">小一点</span><br><span class="line">请输入一个数：28</span><br><span class="line">小一点</span><br><span class="line">请输入一个数：27</span><br><span class="line">猜对了</span><br></pre></td></tr></table></figure>

<p>其实写循环条件应该写：while True: 代表永远会进入循环</p>
<h2 id="3：求1-100奇数和"><a href="#3：求1-100奇数和" class="headerlink" title="3：求1~100奇数和"></a>3：求1~100奇数和</h2><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用while语句实现1~100之间的奇数求和</span></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> a &lt; <span class="number">101</span>:</span><br><span class="line">    <span class="built_in">sum</span> += a</span><br><span class="line">    a += <span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">4</span><br><span class="line">9</span><br><span class="line">16</span><br><span class="line">···</span><br><span class="line">2500</span><br></pre></td></tr></table></figure>

<h3 id="不使用分支结构求和"><a href="#不使用分支结构求和" class="headerlink" title="不使用分支结构求和"></a>不使用分支结构求和</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 不使用分支结构实现1~100之间的奇数求和</span></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">101</span>, <span class="number">2</span>):</span><br><span class="line">    <span class="built_in">sum</span> += a</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">4</span><br><span class="line">9</span><br><span class="line">16</span><br><span class="line">···</span><br><span class="line">2500</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>测试学习</category>
      </categories>
      <tags>
        <tag>python编程语言</tag>
      </tags>
  </entry>
  <entry>
    <title>13.9 常用数据结构——list列表</title>
    <url>/2022/02/21/13-9-%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94list%E5%88%97%E8%A1%A8/</url>
    <content><![CDATA[<h1 id="列表定义与使用"><a href="#列表定义与使用" class="headerlink" title="列表定义与使用"></a>列表定义与使用</h1><h2 id="列表定义"><a href="#列表定义" class="headerlink" title="列表定义"></a>列表定义</h2><img src="/2022/02/21/13-9-%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94list%E5%88%97%E8%A1%A8/../../Markdown文档/测试/3 Python编程语言/13.9 Python常用数据结构——list列表/image-20220215094659500-16448896212761.png" alt="image-20220215094659500">

<ul>
<li>列表是有序的可变元素的集合，使用中括号<code>[]</code>包围，元素之间用逗号分隔</li>
<li>列表是<strong>动态</strong>的，可以随时扩展和收缩</li>
<li>列表是<strong>异构</strong>的，可以同时存放不同类型的对象</li>
<li>列表中允许出现<strong>重复</strong>元素</li>
</ul>
<h2 id="列表的使用"><a href="#列表的使用" class="headerlink" title="列表的使用"></a>列表的使用</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><ul>
<li><p>创建列表</p>
<ul>
<li><p>通过构造函数创建</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 空列表</span></span><br><span class="line">li1 = <span class="built_in">list</span>()  </span><br><span class="line"><span class="comment"># 字符串</span></span><br><span class="line">li2 = <span class="built_in">list</span>(<span class="string">&#x27;yyl&#x27;</span>)  </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(li1), li1)	<span class="comment"># 打印 &lt;class &#x27;list&#x27;&gt; []</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(li2), li2)	<span class="comment"># 打印 &lt;class &#x27;list&#x27;&gt; [&#x27;y&#x27;, &#x27;y&#x27;, &#x27;l&#x27;]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>中括号创建并填充</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 空列表</span></span><br><span class="line">li3 = []  </span><br><span class="line"> <span class="comment"># 直接填充对象</span></span><br><span class="line">li4 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] </span><br><span class="line">li5 = [<span class="string">&#x27;yyl&#x27;</span>, <span class="string">&#x27;is&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;girl&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(li3), li3)	<span class="comment"># 打印 &lt;class &#x27;list&#x27;&gt; []</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(li4), li4)	<span class="comment"># 打印 &lt;class &#x27;list&#x27;&gt; [1, 2, 3]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(li5), li5)	<span class="comment"># 打印 &lt;class &#x27;list&#x27;&gt; [&#x27;yyl&#x27;, &#x27;is&#x27;, &#x27;a&#x27;, &#x27;girl&#x27;]</span></span><br><span class="line"><span class="comment"># 因为列表是异构的,可以同时储存</span></span><br><span class="line">li6 = [<span class="number">1</span>, <span class="number">3.14</span>, <span class="string">&#x27;yyl&#x27;</span>, [<span class="string">&#x27;girl&#x27;</span>, <span class="number">5</span>, <span class="number">6</span>]]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(li6), li6)	<span class="comment"># 打印 &lt;class &#x27;list&#x27;&gt; [1, 3.14, &#x27;yyl&#x27;, [&#x27;girl&#x27;, 5, 6]]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>列表推导式</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">li7 = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>) <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(li7), li7)	<span class="comment"># 打印 &lt;class &#x27;list&#x27;&gt; [2, 4, 6, 8]</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><img src="/2022/02/21/13-9-%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94list%E5%88%97%E8%A1%A8/../../Markdown文档/测试/3 Python编程语言/13.9 Python常用数据结构——list列表/image-20220215110446481-16448942875662.png" alt="image-20220215110446481">

<ul>
<li><p>索引</p>
<ul>
<li><p>默认正向索引，编号从 0 开始。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">li = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">print</span>(li[<span class="number">0</span>])  <span class="comment"># 打印1</span></span><br><span class="line"><span class="built_in">print</span>(li[<span class="number">3</span>])  <span class="comment"># 打印4</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>支持反向索引，编号从-1 开始。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">li = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">print</span>(li[-<span class="number">1</span>])  <span class="comment"># 打印 5</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><img src="/2022/02/21/13-9-%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94list%E5%88%97%E8%A1%A8/../../Markdown文档/测试/3 Python编程语言/13.9 Python常用数据结构——list列表/image-20220215111438900-16448948808173.png" alt="image-20220215111438900">

<ul>
<li><p>切片 [start: stop: step]</p>
<ul>
<li>start 值: 指示开始索引值，如果没有指定，则默认开始值为 0</li>
<li>stop 值: 指示到哪个索引值结束，但<strong>不包括这个结束索引值</strong>。如果没有指定，则取列表允许的最大索引值；如果要取结束元素本身，可以取结束索引值+1</li>
<li>step 值: 步长值指示每一步大小，如果没有指定，则默认步长值为 1</li>
<li>三个值都是可选的，非必填</li>
</ul>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切片基本用法</span></span><br><span class="line"><span class="comment"># 索引值0    1    2    3    4    5    6    7    8    9</span></span><br><span class="line">li = [<span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;l&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(li[<span class="number">0</span>:<span class="number">5</span>:<span class="number">2</span>])	<span class="comment"># 打印 [&#x27;y&#x27;, &#x27;l&#x27;, &#x27;s&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(li[<span class="number">2</span>:<span class="number">4</span>])	<span class="comment"># 打印 [&#x27;l&#x27;, &#x27;i&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(li[:<span class="number">4</span>])	<span class="comment"># 打印 [&#x27;y&#x27;, &#x27;y&#x27;, &#x27;l&#x27;, &#x27;i&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(li[<span class="number">2</span>:])	<span class="comment"># 打印 [&#x27;l&#x27;, &#x27;i&#x27;, &#x27;s&#x27;, &#x27;a&#x27;, &#x27;g&#x27;, &#x27;i&#x27;, &#x27;r&#x27;, &#x27;l&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(li[::<span class="number">2</span>])	<span class="comment"># 打印  [&#x27;y&#x27;, &#x27;l&#x27;, &#x27;s&#x27;, &#x27;g&#x27;, &#x27;r&#x27;]</span></span><br><span class="line"><span class="comment"># 取最后一个元素</span></span><br><span class="line"><span class="built_in">print</span>(li[<span class="number">9</span>:])	<span class="comment"># 打印 [&#x27;l&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(li[-<span class="number">1</span>:])	<span class="comment"># 打印 [&#x27;l&#x27;]</span></span><br><span class="line"><span class="comment"># 特殊的切片写法：逆序打印</span></span><br><span class="line"><span class="built_in">print</span>(li[::-<span class="number">1</span>]) 	<span class="comment"># 打印 [&#x27;l&#x27;, &#x27;r&#x27;, &#x27;i&#x27;, &#x27;g&#x27;, &#x27;a&#x27;, &#x27;s&#x27;, &#x27;i&#x27;, &#x27;l&#x27;, &#x27;y&#x27;, &#x27;y&#x27;]</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><ul>
<li><p>重复</p>
<ul>
<li><p>使用 <code>*</code> 运算符可以重复生成列表元素。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">li = [<span class="number">1</span>] * <span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(li)  <span class="comment"># 打印[1, 1, 1, 1, 1]</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>合并</p>
<ul>
<li><p>使用 <code>+</code> 加号运算符，可以将两个列表合二为一。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">li1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">li2 = [<span class="number">99</span>, <span class="number">100</span>]</span><br><span class="line"><span class="built_in">print</span>(li1 + li2)  <span class="comment"># 打印[1, 2, 3, 99, 100]</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="成员检测"><a href="#成员检测" class="headerlink" title="成员检测"></a>成员检测</h3><ul>
<li><p>in：检查一个对象是否在列表中，如果在则返回 True，否则返回 False。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">li = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="comment"># in</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span> <span class="keyword">in</span> li)  <span class="comment"># 返回True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">100</span> <span class="keyword">in</span> li)  <span class="comment"># 返回False</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>not in：检查一个列表是否不包含某个元素。如果不在返回 True，否则返回 False。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">1</span> <span class="keyword">not</span> <span class="keyword">in</span> li)  <span class="comment"># 返回False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">100</span> <span class="keyword">not</span> <span class="keyword">in</span> li)  <span class="comment"># 返回True</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="列表常用方法"><a href="#列表常用方法" class="headerlink" title="列表常用方法"></a>列表常用方法</h1><h2 id="append"><a href="#append" class="headerlink" title="append()"></a>append()</h2><ul>
<li><p><code>append(item)</code>：将一个对象 item 添加到列表的末尾。</p>
</li>
<li><p>入参：对象 item</p>
</li>
<li><p>返回：None</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加元素</span></span><br><span class="line">li = []</span><br><span class="line">li.append(<span class="number">1</span>)</span><br><span class="line">li.append(<span class="number">3.14</span>)</span><br><span class="line">li.append(<span class="string">&quot;hogwarts&quot;</span>)</span><br><span class="line">li.append([<span class="number">6</span>, <span class="number">6</span>, <span class="number">6</span>])</span><br><span class="line">li.append((<span class="number">1.2</span>, <span class="number">1.5</span>))</span><br><span class="line">li.append(&#123;<span class="string">&#x27;msg&#x27;</span>: <span class="string">&quot;Hello&quot;</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(li)  <span class="comment"># 打印列表</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(li))  <span class="comment"># 获取列表元素个数</span></span><br></pre></td></tr></table></figure>

<p>  结果：</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">3.14</span>, <span class="string">&#x27;hogwarts&#x27;</span>, [<span class="number">6</span>, <span class="number">6</span>, <span class="number">6</span>], (<span class="number">1.2</span>, <span class="number">1.5</span>), &#123;<span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;Hello&#x27;</span>&#125;]</span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="extend"><a href="#extend" class="headerlink" title="extend()"></a>extend()</h2><ul>
<li><p><code>extend(iterable)</code>：将一个可迭代对象的所有元素，添加到列表末尾。</p>
</li>
<li><p>入参：可迭代对象 iterable</p>
</li>
<li><p>返回：None</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">li = []</span><br><span class="line">li.extend(<span class="string">&#x27;hogwarts&#x27;</span>)  <span class="comment"># 添加的是字符串的所有字母</span></span><br><span class="line">li.extend([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])  <span class="comment"># 接收列表的所有元素</span></span><br><span class="line">li.extend((<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>))  <span class="comment"># 接收元组的所有元素</span></span><br><span class="line">li.extend(&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>&#125;)  <span class="comment"># 接收字典的所有key值</span></span><br><span class="line"><span class="built_in">print</span>(li)	<span class="comment"># 打印 [&#x27;h&#x27;, &#x27;o&#x27;, &#x27;g&#x27;, &#x27;w&#x27;, &#x27;a&#x27;, &#x27;r&#x27;, &#x27;t&#x27;, &#x27;s&#x27;, 1, 2, 3, 4, 5, 6, &#x27;a&#x27;, &#x27;b&#x27;]</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="insert"><a href="#insert" class="headerlink" title="insert()"></a>insert()</h2><ul>
<li><p><code>insert(index, item)</code>：将一个对象插入到指定的索引位置</p>
</li>
<li><p>入参：索引值 index ，一个对象 item</p>
</li>
<li><p>返回：None</p>
</li>
<li><p>原索引位置及后面的元素<strong>后移一位</strong></p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">li = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;插入前: &quot;</span>, li)  <span class="comment"># 打印 [0, 1, 2]</span></span><br><span class="line"><span class="comment"># 在索引0的位置插入元素</span></span><br><span class="line">li.insert(<span class="number">0</span>, <span class="string">&#x27;hogwarts&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;插入后: &quot;</span>, li)  <span class="comment"># 打印 [&#x27;hogwarts&#x27;, 0, 1, 2]</span></span><br></pre></td></tr></table></figure>

<p>  结果：</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">插入前:  [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">插入后:  [<span class="string">&#x27;hogwarts&#x27;</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h2><ul>
<li><p><code>pop(index) 或 pop()</code></p>
</li>
<li><p>弹出并返回所指定索引的元素。</p>
</li>
<li><p>入参：索引值 index，可不传</p>
</li>
<li><p>返回：指定索引的元素；未指定索引则返回<strong>末尾元素</strong></p>
</li>
<li><p>如果索引值不正确，或者列表已经为空，则引发 IndexError 错误</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">letters = [<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;s&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 传入索引3，弹出元素 w</span></span><br><span class="line">n1 = letters.pop(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(n1)  <span class="comment"># 打印 w</span></span><br><span class="line"><span class="built_in">print</span>(letters)	<span class="comment"># 打印[&#x27;h&#x27;, &#x27;o&#x27;, &#x27;g&#x27;, &#x27;a&#x27;, &#x27;r&#x27;, &#x27;t&#x27;, &#x27;s&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不传参数，默认弹出末尾元素</span></span><br><span class="line">n2 = letters.pop()</span><br><span class="line"><span class="built_in">print</span>(n2)  <span class="comment"># 打印 s</span></span><br><span class="line"><span class="built_in">print</span>(letters)	<span class="comment"># 打印[&#x27;h&#x27;, &#x27;o&#x27;, &#x27;g&#x27;, &#x27;a&#x27;, &#x27;r&#x27;, &#x27;t&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="remove"><a href="#remove" class="headerlink" title="remove()"></a>remove()</h2><ul>
<li><p><code>remove(item)</code></p>
</li>
<li><p>移除列表中第一个等于 item 的元素</p>
</li>
<li><p>入参：指定元素 item</p>
</li>
<li><p>返回：None</p>
</li>
<li><p>目标元素必须已存在，否则会报 ValueError</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">li = [<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;s&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(li))  <span class="comment"># 打印 8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1、删除指定元素&#x27;h&#x27;</span></span><br><span class="line">li.remove(<span class="string">&#x27;h&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(li)  <span class="comment"># 打印 [&#x27;o&#x27;, &#x27;g&#x27;, &#x27;w&#x27;, &#x27;a&#x27;, &#x27;r&#x27;, &#x27;t&#x27;, &#x27;s&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(li))  <span class="comment"># 打印 7</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、移除第一个2</span></span><br><span class="line">li = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line">li.remove(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(li)  <span class="comment"># 打印 [1, 3, 2, 1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、删除不存在的元素，会报ValueError错误</span></span><br><span class="line">li = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">li.remove(<span class="number">100</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h2><ul>
<li><p><code>sort(key=None, reverse=False)</code></p>
</li>
<li><p>对列表进行原地排序，只使用 &lt; 来进行各项间比较。</p>
</li>
<li><p>入参：支持 2 个关键字参数：</p>
<ul>
<li><code>key</code>：指定带有一个参数的<strong>函数</strong>，用于从每个列表元素中提取比较键。</li>
<li><code>reverse</code>：默认值为 False 表示升序，为 True 表示降序</li>
</ul>
</li>
<li><p>返回：None</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">nums = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1、不传参数，默认升序，数字从小到大排列</span></span><br><span class="line">nums.sort()</span><br><span class="line"><span class="built_in">print</span>(nums)  <span class="comment"># 打印 [1, 2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、指定key=len，按元素的长度排序</span></span><br><span class="line">words = [<span class="string">&#x27;Python&#x27;</span>, <span class="string">&#x27;Java&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;Go&#x27;</span>]</span><br><span class="line">words.sort(key=<span class="built_in">len</span>)</span><br><span class="line"><span class="built_in">print</span>(words)  <span class="comment"># 打印 [&#x27;R&#x27;, &#x27;Go&#x27;, &#x27;Java&#x27;, &#x27;Python&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、指定reverse=True，降序</span></span><br><span class="line">nums = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">5</span>]</span><br><span class="line">nums.sort(reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(nums)  <span class="comment"># 打印 [5, 4, 3, 2, 1]</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h2><ul>
<li><p><code>reverse()</code>：将列表中的元素顺序反转</p>
</li>
<li><p>参数：无</p>
</li>
<li><p>返回：None</p>
</li>
<li><p>反转只是针对索引值，元素之间不相互比较。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 反转顺序</span></span><br><span class="line">nums = [<span class="number">8</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">77</span>]</span><br><span class="line">nums.reverse()</span><br><span class="line"><span class="built_in">print</span>(nums)  <span class="comment"># 打印[77, 2, 5, 1, 8]</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h1><ul>
<li><p>嵌套列表是指在列表里存放列表</p>
</li>
<li><p>列表的常用方法都适用于嵌套列表</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、创建嵌套列表</span></span><br><span class="line">li_2d = [[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]</span><br><span class="line"><span class="built_in">print</span>(li_2d)  <span class="comment"># 打印 [[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;], [1, 2, 3]]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(li_2d))  <span class="comment"># 打印&lt;class &#x27;list&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(li_2d))  <span class="comment"># 打印 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、访问嵌套列表中的元素</span></span><br><span class="line"><span class="built_in">print</span>(li_2d[<span class="number">0</span>][<span class="number">2</span>])  <span class="comment"># 打印 &#x27;c&#x27;——获取列表第一个元素的第三个值</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h1><ul>
<li><p>列表推导式是指循环创建列表，相当于 for 循环创建列表的简化版</p>
</li>
<li><p>语法：<code>[x for x in list if x ...]</code></p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、传统解决方案</span></span><br><span class="line">result = []</span><br><span class="line"><span class="keyword">for</span> ele <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">    <span class="keyword">if</span> ele % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        result.append(ele ** <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># 打印 [4, 16, 36, 64, 100]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、使用列表推导式</span></span><br><span class="line">result = [ele ** <span class="number">2</span> <span class="keyword">for</span> ele <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>) <span class="keyword">if</span> ele % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># 打印 [4, 16, 36, 64, 100]</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>测试学习</category>
      </categories>
      <tags>
        <tag>python编程语言</tag>
      </tags>
  </entry>
  <entry>
    <title>14.1 常用数据结构——set集合</title>
    <url>/2022/02/21/14-1-%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94set%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<h1 id="集合定义与使用"><a href="#集合定义与使用" class="headerlink" title="集合定义与使用"></a>集合定义与使用</h1><h2 id="集合定义"><a href="#集合定义" class="headerlink" title="集合定义"></a>集合定义</h2><ul>
<li>无序的唯一对象集合</li>
<li>用大括号<code>&#123;&#125;</code>包围，对象相互之间使用逗号分隔</li>
<li>集合是动态的，可以随时添加或删除元素</li>
<li>集合是异构的，可以包含不同类型的数据</li>
</ul>
<h2 id="集合使用"><a href="#集合使用" class="headerlink" title="集合使用"></a>集合使用</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><ul>
<li><p>创建</p>
<ul>
<li><p>通过使用<code>&#123;&#125;</code>填充元素</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">st4 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">st5 = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(st4, st5)  <span class="comment"># 打印&#123;1, 2, 3&#125; &#123;&#x27;c&#x27;, &#x27;b&#x27;, &#x27;a&#x27;&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>通过构造方法 set()</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">st1 = <span class="built_in">set</span>()  <span class="comment"># 空集合</span></span><br><span class="line">st2 = <span class="built_in">set</span>(<span class="string">&#x27;hogwarts&#x27;</span>)</span><br><span class="line">li = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>]</span><br><span class="line">st3 = <span class="built_in">set</span>(li)</span><br><span class="line"><span class="built_in">print</span>(st1)</span><br><span class="line"><span class="built_in">print</span>(st2)</span><br><span class="line"><span class="built_in">print</span>(st3)</span><br></pre></td></tr></table></figure>

<p>  结果：</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span>()</span><br><span class="line">&#123;<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;s&#x27;</span>&#125;</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过集合推导式</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">st6 = &#123;x <span class="keyword">for</span> x <span class="keyword">in</span> li&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<p>​    <strong>注意：不要单独使用{ }来创建空集合</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">st7 = &#123;&#125;  <span class="comment"># 这是字典类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(st7))	<span class="comment"># 打印 &lt;class &#x27;dict&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="成员检测"><a href="#成员检测" class="headerlink" title="成员检测"></a>成员检测</h3><ul>
<li><p>n</p>
<ul>
<li><p>判断元素是否在集合中存在</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">st = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span> <span class="keyword">in</span> st)  <span class="comment"># 打印 True</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>not in</p>
<ul>
<li><p>判断元素是否在集合中不存在</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">99</span> <span class="keyword">not</span> <span class="keyword">in</span> st)  <span class="comment"># 打印 True</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h1 id="集合常用方法"><a href="#集合常用方法" class="headerlink" title="集合常用方法"></a>集合常用方法</h1><h2 id="add"><a href="#add" class="headerlink" title="add()"></a>add()</h2><ul>
<li><p><code>add(item)</code>：将单个对象添加到集合中</p>
</li>
<li><p>入参：对象 item</p>
</li>
<li><p>返回：None</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加元素</span></span><br><span class="line">st = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">st.add(<span class="number">99</span>)</span><br><span class="line">st.add(<span class="string">&#x27;hogwarts&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(st)   <span class="comment"># 打印 &#123;1, 2, 99, 3, &#x27;hogwarts&#x27;&#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="update"><a href="#update" class="headerlink" title="update()"></a>update()</h2><ul>
<li><p><code>update(iterable)</code></p>
</li>
<li><p>批量添加来自可迭代对象中的所有元素</p>
</li>
<li><p>入参：可迭代对象 iterable</p>
</li>
<li><p>返回：None</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">li = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">tup = (<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">st = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1、批量添加列表中的元素</span></span><br><span class="line">st1 = <span class="built_in">set</span>()</span><br><span class="line">st1.update(li)</span><br><span class="line"><span class="comment"># 2、批量添加元组中的元素</span></span><br><span class="line">st1.update(tup)</span><br><span class="line"><span class="comment"># 3、批量添加集合中的元素</span></span><br><span class="line">st1.update(st)</span><br><span class="line"><span class="built_in">print</span>(st1)</span><br></pre></td></tr></table></figure>

<p>  结果：</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;b&#x27;</span>&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="remove"><a href="#remove" class="headerlink" title="remove()"></a>remove()</h2><ul>
<li><p><code>remove(item)</code>：从集合中移除指定元素 item。</p>
</li>
<li><p>入参：指定元素值</p>
</li>
<li><p>返回：None</p>
</li>
<li><p>如果 item 不存在于集合中则会引发 KeyError</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、删除已存在的元素</span></span><br><span class="line">st = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">st.remove(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(st)  <span class="comment"># 打印 &#123;1, 3, 4, 5&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、删除不存在的元素</span></span><br><span class="line">st.remove(<span class="number">1024</span>)  <span class="comment"># KeyError</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="discard"><a href="#discard" class="headerlink" title="discard()"></a>discard()</h2><ul>
<li><p><code>discard(item)</code>：从集合中移除指定对象 item。</p>
</li>
<li><p>入参：指定对象值</p>
</li>
<li><p>返回：None</p>
</li>
<li><p>元素 item 不存在没影响，不会抛出 KeyError 错误。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、删除已存在的元素</span></span><br><span class="line">st = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">st.remove(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(st)  <span class="comment"># 打印 &#123;1, 3, 4, 5&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、删除不存在的元素</span></span><br><span class="line">st.discard(<span class="number">1024</span>)</span><br><span class="line"><span class="built_in">print</span>(st)  <span class="comment"># 打印 &#123;1, 3, 4, 5&#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h2><ul>
<li><p><code>pop()</code>：随机从集合中移除并返回一个元素。</p>
</li>
<li><p>入参：无。</p>
</li>
<li><p>返回：被移除的元组。</p>
</li>
<li><p>如果集合为空则会引发 KeyError。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、随机删除某个对象</span></span><br><span class="line">st = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">item = st.pop()</span><br><span class="line"><span class="built_in">print</span>(item, st)  <span class="comment"># 打印 1 &#123;2, 3, 4, 5&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、集合本身为空会报错</span></span><br><span class="line">st = <span class="built_in">set</span>()</span><br><span class="line">st.pop()  <span class="comment"># KeyError</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h2><ul>
<li><p><code>clear()</code>：清空集合，移除所有元素</p>
</li>
<li><p>入参：无</p>
</li>
<li><p>返回：None</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">st = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">st.clear()</span><br><span class="line"><span class="built_in">print</span>(st)  <span class="comment"># 打印 set()</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h1><h2 id="交集运算"><a href="#交集运算" class="headerlink" title="交集运算"></a>交集运算</h2><img src="/2022/02/21/14-1-%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94set%E9%9B%86%E5%90%88/../../Markdown文档/测试/3 Python编程语言/14.1 Python常用数据结构——Set集合/image-20210614214617665.png" alt="img" style="zoom:20%;">

<ul>
<li><p>交集运算</p>
</li>
<li><p>intersection()</p>
</li>
<li><p>操作符：&amp;</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>&#125;</span><br><span class="line">set2 = &#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(set1.intersection(set2))  <span class="comment"># 打印 &#123;2, 3&#125;</span></span><br><span class="line"><span class="built_in">print</span>(set1 &amp; set2)  <span class="comment"># 打印 &#123;2, 3&#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="并集运算"><a href="#并集运算" class="headerlink" title="并集运算"></a>并集运算</h2><img src="/2022/02/21/14-1-%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94set%E9%9B%86%E5%90%88/../../Markdown文档/测试/3 Python编程语言/14.1 Python常用数据结构——Set集合/image-20210614214440627.png" alt="img" style="zoom: 20%;">

<ul>
<li><p>并集运算</p>
</li>
<li><p>union()</p>
</li>
<li><p>操作符：｜</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 求两个集合的并集</span></span><br><span class="line">set1 = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>&#125;</span><br><span class="line">set2 = &#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(set1.union(set2))  <span class="comment"># 打印 &#123;1, 2, 3, 4&#125;</span></span><br><span class="line"><span class="built_in">print</span>(set1 | set2)  <span class="comment"># 打印 &#123;1, 2, 3, 4&#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="差集运算"><a href="#差集运算" class="headerlink" title="差集运算"></a>差集运算</h2><img src="/2022/02/21/14-1-%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94set%E9%9B%86%E5%90%88/../../Markdown文档/测试/3 Python编程语言/14.1 Python常用数据结构——Set集合/image-20210614214644314.png" alt="img" style="zoom:20%;">

<ul>
<li><p>差集运算</p>
</li>
<li><p>difference()</p>
</li>
<li><p>操作符： -</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>&#125;</span><br><span class="line">set2 = &#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(set1.difference(set2))  <span class="comment"># 打印 &#123;1&#125;</span></span><br><span class="line"><span class="built_in">print</span>(set1 - set2)  <span class="comment"># 打印 &#123;1&#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="集合推导式"><a href="#集合推导式" class="headerlink" title="集合推导式"></a>集合推导式</h1><ul>
<li><p>类似列表推导式，同样集合支持集合推导式</p>
</li>
<li><p>语法：<code>&#123;x for x in ... if ...&#125;</code></p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">st = &#123;x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;hogwarts&#x27;</span> <span class="keyword">if</span> x <span class="keyword">in</span> <span class="string">&#x27;hello world&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(st)   <span class="comment"># 打印 &#123;&#x27;r&#x27;, &#x27;w&#x27;, &#x27;o&#x27;, &#x27;h&#x27;&#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>测试学习</category>
      </categories>
      <tags>
        <tag>python编程语言</tag>
      </tags>
  </entry>
  <entry>
    <title>14.2 常用数据结构——dict字典</title>
    <url>/2022/02/21/14-2-%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94dict%E5%AD%97%E5%85%B8/</url>
    <content><![CDATA[<h1 id="字典定义与使用"><a href="#字典定义与使用" class="headerlink" title="字典定义与使用"></a>字典定义与使用</h1><h2 id="字典定义"><a href="#字典定义" class="headerlink" title="字典定义"></a>字典定义</h2><img src="/2022/02/21/14-2-%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94dict%E5%AD%97%E5%85%B8/image-20210929001355163-20211002231809769.png" alt="img" style="zoom: 33%;">

<ul>
<li>字典是无序的键值对集合</li>
<li>字典用大括号<code>&#123;&#125;</code>包围</li>
<li>每个键&#x2F;值对之间用一个逗号<code>,</code>分隔</li>
<li>各个键与值之间用一个冒号<code>:</code>分隔</li>
<li>字典是动态的</li>
<li>字典的键是惟一的，是不可变的对象，比如字符串，数值等；值可以是任意python对象，如元组，也可以是另一个字典</li>
</ul>
<h2 id="字典使用"><a href="#字典使用" class="headerlink" title="字典使用"></a>字典使用</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><ul>
<li><p>创建字典</p>
<ul>
<li><p>使用大括号填充键值对</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dc = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Harry Potter&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(dc), dc)</span><br></pre></td></tr></table></figure>

<p>  结果：</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;dict&#x27;</span>&gt; &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Harry Potter&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过构造方法 dict()</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dc1 = <span class="built_in">dict</span>()  <span class="comment"># 空字典</span></span><br><span class="line"><span class="built_in">print</span>(dc1)</span><br><span class="line">dc2 = <span class="built_in">dict</span>(name=<span class="string">&quot;Harry Potter&quot;</span>, age=<span class="number">18</span>)  <span class="comment"># 关键字参数赋值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(dc2), dc2)</span><br><span class="line"><span class="comment"># 利用构造方法传入一个由元组组成的列表</span></span><br><span class="line">dc3 = <span class="built_in">dict</span>([(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Harry Potter&quot;</span>), (<span class="string">&quot;age&quot;</span>, <span class="number">18</span>)])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(dc3), dc3)</span><br></pre></td></tr></table></figure>

<p>  结果：</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#125;</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;dict&#x27;</span>&gt; &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Harry Potter&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>&#125;</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;dict&#x27;</span>&gt; &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Harry Potter&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用字典推导式</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># k取值列表—元组第一个元素，v取值列表—元组第二个元素</span></span><br><span class="line">dc4 = &#123;k: v <span class="keyword">for</span> k, v <span class="keyword">in</span> [(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Harry Potter&quot;</span>), (<span class="string">&quot;age&quot;</span>, <span class="number">18</span>)]&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(dc4), dc4)</span><br></pre></td></tr></table></figure>

<p>  结果：</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;dict&#x27;</span>&gt; &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Harry Potter&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="访问元素"><a href="#访问元素" class="headerlink" title="访问元素"></a>访问元素</h3><ul>
<li><p>访问元素</p>
<ul>
<li><p>与字典也支持中括号记法**<code>[key]</code>**。</p>
</li>
<li><p>字典使用键来访问其关联的值。</p>
</li>
<li><p>访问时对应的 key 必须要存在</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dc = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Harry Potter&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">18</span>&#125;</span><br><span class="line"><span class="comment"># 1、访问存在的key</span></span><br><span class="line"><span class="built_in">print</span>(dc[<span class="string">&quot;name&quot;</span>])</span><br><span class="line"><span class="built_in">print</span>(dc[<span class="string">&quot;age&quot;</span>])</span><br></pre></td></tr></table></figure>

<p>  结果：</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Harry Potter</span><br><span class="line"><span class="number">18</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="操作元素"><a href="#操作元素" class="headerlink" title="操作元素"></a>操作元素</h3><ul>
<li><p>语法：dict[key] &#x3D; value</p>
</li>
<li><p>添加元素</p>
<ul>
<li><p>键不存在</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dc = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Harry Potter&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">18</span>&#125;</span><br><span class="line">dc[<span class="string">&#x27;hobby&#x27;</span>] = <span class="string">&#x27;Magic&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(dc)</span><br></pre></td></tr></table></figure>

<p>  结果：</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Harry Potter&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>, <span class="string">&#x27;hobby&#x27;</span>: <span class="string">&#x27;Magic&#x27;</span>&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>修改元素</p>
<ul>
<li><p>键已经存在</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dc[<span class="string">&#x27;age&#x27;</span>] = <span class="number">20</span></span><br><span class="line"><span class="built_in">print</span>(dc)</span><br></pre></td></tr></table></figure>

<p>  结果：</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Harry Potter&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;hobby&#x27;</span>: <span class="string">&#x27;Magic&#x27;</span>&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="嵌套字典"><a href="#嵌套字典" class="headerlink" title="嵌套字典"></a>嵌套字典</h3><ul>
<li><p>嵌套字典</p>
</li>
<li><p>字典的值可以是字典对象</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dc = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Harry Potter&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">18</span>, <span class="string">&quot;course&quot;</span>: &#123;<span class="string">&quot;magic&quot;</span>: <span class="number">90</span>, <span class="string">&quot;python&quot;</span>: <span class="number">80</span>&#125;&#125;</span><br><span class="line"><span class="comment"># 1、获取课程Magic的值</span></span><br><span class="line"><span class="built_in">print</span>(dc[<span class="string">&#x27;course&#x27;</span>][<span class="string">&#x27;magic&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、把python分数改成100分</span></span><br><span class="line">dc[<span class="string">&#x27;course&#x27;</span>][<span class="string">&#x27;python&#x27;</span>] = <span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(dc)</span><br></pre></td></tr></table></figure>

<p>  结果：</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">90</span></span><br><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Harry Potter&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>, <span class="string">&#x27;course&#x27;</span>: &#123;<span class="string">&#x27;magic&#x27;</span>: <span class="number">90</span>, <span class="string">&#x27;python&#x27;</span>: <span class="number">100</span>&#125;&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="字典常用方法"><a href="#字典常用方法" class="headerlink" title="字典常用方法"></a>字典常用方法</h1><h2 id="keys"><a href="#keys" class="headerlink" title="keys()"></a>keys()</h2><ul>
<li><p><code>keys()</code></p>
</li>
<li><p>返回由字典键组成的一个新视图对象。</p>
<blockquote>
<p>视图对象：1。视图对象提供字典条目的动态视图，字典项发生改变时，视图也会相应改变；<br>2.字典视图可以被迭代，以产生对应的数据。 并支持成员检测in ， not in</p>
<p>3.keys(),values(),items()方法返回的对象都是视图对象</p>
</blockquote>
</li>
<li><p>入参：无</p>
</li>
<li><p>返回：</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dc = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Harry Potter&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">18</span>&#125;</span><br><span class="line">keys = dc.keys()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(keys), keys)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1、遍历查看所有的键</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> keys:</span><br><span class="line">    <span class="built_in">print</span>(key)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、将视图对象转成列表</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(keys))</span><br></pre></td></tr></table></figure>

<p>  结果：</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;dict_keys&#x27;</span>&gt; dict_keys([<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>])</span><br><span class="line">name</span><br><span class="line">age</span><br><span class="line">[<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>]</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="values"><a href="#values" class="headerlink" title="values()"></a>values()</h2><ul>
<li><p><code>values()</code></p>
</li>
<li><p>返回由字典值组成的一个新<strong>视图对象</strong>。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dc = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Harry Potter&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">18</span>&#125;</span><br><span class="line">values = dc.values()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(values), values)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历查看所有的键——</span></span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> values:</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将视图对象转成列表</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(values))</span><br></pre></td></tr></table></figure>

<p>  结果：</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;dict_values&#x27;</span>&gt; dict_values([<span class="string">&#x27;Harry Potter&#x27;</span>, <span class="number">18</span>])</span><br><span class="line">Harry Potter</span><br><span class="line"><span class="number">18</span></span><br><span class="line">[<span class="string">&#x27;Harry Potter&#x27;</span>, <span class="number">18</span>]</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="items"><a href="#items" class="headerlink" title="items()"></a>items()</h2><ul>
<li><p><code>items()</code></p>
</li>
<li><p>返回由字典项 ((键, 值) 对) 组成的一个新视图对象。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dc = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Harry Potter&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">18</span>&#125;</span><br><span class="line">items = dc.items()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(items), items)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1、遍历查看所有的键</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、将视图对象转成字典</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(items))</span><br></pre></td></tr></table></figure>

<p>  结果：</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;dict_items&#x27;</span>&gt; dict_items([(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;Harry Potter&#x27;</span>), (<span class="string">&#x27;age&#x27;</span>, <span class="number">18</span>)])</span><br><span class="line">(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;Harry Potter&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27;age&#x27;</span>, <span class="number">18</span>)</span><br><span class="line">[(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;Harry Potter&#x27;</span>), (<span class="string">&#x27;age&#x27;</span>, <span class="number">18</span>)]</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="get"><a href="#get" class="headerlink" title="get()"></a>get()</h2><ul>
<li><p><code>get(key)</code></p>
</li>
<li><p>获取指定 key 关联的 value 值。</p>
</li>
<li><p>入参：</p>
<ul>
<li>key：字典的键，必传。</li>
</ul>
</li>
<li><p>返回：</p>
<ul>
<li>如果 key 存在于字典中，返回 key 关联的 value 值。</li>
<li>如果 key 不存在，则返回 None。</li>
</ul>
</li>
<li><p>此方法的好处是无需担心 key 是否存在，永远都不会引发 KeyError 错误。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dc = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Harry Potter&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">18</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1、访问存在的key</span></span><br><span class="line">name = dc[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、访问不存在的key</span></span><br><span class="line">hobby = dc.get(<span class="string">&#x27;hobby&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(hobby)</span><br></pre></td></tr></table></figure>

<p>  结果：</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Harry Potter</span><br><span class="line"><span class="literal">None</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="update"><a href="#update" class="headerlink" title="update()"></a>update()</h2><ul>
<li><p><code>update(dict)</code></p>
</li>
<li><p>使用来自 dict 的键&#x2F;值对更新字典，覆盖原有的键和值。</p>
</li>
<li><p>入参：</p>
<ul>
<li>dc：字典对象，必传</li>
</ul>
</li>
<li><p>返回：None</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dc = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Harry Potter&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">18</span>&#125;</span><br><span class="line">dc.update(&#123;<span class="string">&quot;age&quot;</span>: <span class="number">20</span>, <span class="string">&quot;hobby&quot;</span>: <span class="string">&quot;magic&quot;</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(dc)</span><br></pre></td></tr></table></figure>

<p>  结果：</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Harry Potter&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;hobby&#x27;</span>: <span class="string">&#x27;magic&#x27;</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h2><ul>
<li><p><code>pop(key)</code></p>
</li>
<li><p>删除指定 key 的键值对，并返回对应 value 值。</p>
</li>
<li><p>入参：</p>
<ul>
<li>key：必传</li>
</ul>
</li>
<li><p>返回：</p>
<ul>
<li><p>如果 key 存在于字典中，则将其移除并返回 value 值</p>
</li>
<li><p>如果 key 不存在于字典中，则会引发 KeyError</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dc = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Harry Potter&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">18</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1、弹出</span></span><br><span class="line">item = dc.pop(<span class="string">&quot;age&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(dc, item)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、删除不存在的key</span></span><br><span class="line">dc.pop(<span class="string">&quot;hobby&quot;</span>)  <span class="comment"># 报错keyError</span></span><br></pre></td></tr></table></figure>

<p>  结果：</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Harry Potter&#x27;</span>&#125; <span class="number">18</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h1 id="字典推导式"><a href="#字典推导式" class="headerlink" title="字典推导式"></a>字典推导式</h1><ul>
<li><p>字典推导式：可以从任何以键值对作为元素的可迭代对象中构建出字典。</p>
</li>
<li><p>实例：给定一个字典对象<code>&#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3&#125;</code>，找出其中所有大于 1 的键值对，同时 value 值进行平方运算。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 未使用字典推导式的写法</span></span><br><span class="line">dc = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line">d_old = <span class="built_in">dict</span>()</span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> dc.items():</span><br><span class="line">    <span class="keyword">if</span> v &gt; <span class="number">1</span>:</span><br><span class="line">        d_old[k] = v ** <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(d_old)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用字典推导式</span></span><br><span class="line">d_new = &#123;k: v ** <span class="number">2</span> <span class="keyword">for</span> k, v <span class="keyword">in</span> dc.items() <span class="keyword">if</span> v &gt; <span class="number">1</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(d_new)</span><br></pre></td></tr></table></figure>

<p>  结果：</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;b&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">9</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;b&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">9</span>&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>给定一个字典对象，请使用字典推导式，将它的key和value分别进行交换。也就是key变成值，值变成key。</p>
<p>输入: {‘a’: 1, ‘b’: 2, ‘c’: 3}<br>输出: {1: ‘a’, 2: ‘b’, 3: ‘c’}</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line">dict2 = &#123;v: k <span class="keyword">for</span> k, v <span class="keyword">in</span> dict1.items()&#125;</span><br><span class="line"><span class="built_in">print</span>(dict2)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">1</span>: <span class="string">&#x27;a&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;b&#x27;</span>, <span class="number">3</span>: <span class="string">&#x27;c&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>测试学习</category>
      </categories>
      <tags>
        <tag>python编程语言</tag>
      </tags>
  </entry>
  <entry>
    <title>12.1 git 环境配置</title>
    <url>/2022/02/23/12-1-git-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a>Git安装</h1><p>官网：<a href="https://git-scm.com/download/">https://git-scm.com/download/</a></p>
<img src="/2022/02/23/12-1-git-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/image-20220223092719631-16455796416761.png" alt="image-20220223092719631" style="zoom: 50%;">

<p>Git环境验证</p>
<ul>
<li>windows：cmd中输入命令 <code>git --version</code></li>
<li>mac ：终端输入命令 <code>git –version</code></li>
</ul>
<h1 id="windows打开Git-Bash"><a href="#windows打开Git-Bash" class="headerlink" title="windows打开Git Bash"></a>windows打开Git Bash</h1><img src="/2022/02/23/12-1-git-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/image-20220223093018904-16455798202732.png" alt="image-20220223093018904">

<h1 id="Git-环境配置"><a href="#Git-环境配置" class="headerlink" title="Git 环境配置"></a>Git 环境配置</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;你的GitHub⽤户名&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;你的GitHub注册邮箱&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看配置</span></span><br><span class="line">git config --list</span><br></pre></td></tr></table></figure>

<p><strong>⽣成ssh密钥⽂件：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>

<p>直接⼀路三次回⻋，不⽤设置密码。然后在<code>C:/⽤户/⽤户名/.ssh</code> ⽬录下找到<code>id_rsa.pub</code> ⽂件，⽤⽂本⼯具打开<br>该⽂件，复制⾥⾯的内容备⽤。<br>接下来返回到Github，在⾸⻚右上⻆，点击<code>⽤户头像--&gt;Settings--&gt;SSH and GPG keys--&gt;New SSH key</code> 。这<br>⾥⾯的<code>Title</code> 为标题可以随便填写， <code>Key</code> 填写刚刚复制的公钥⽂本内容，最后点击<code>Add SSH key</code> 。</p>
<img src="/2022/02/23/12-1-git-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/image-20220223093739515-16455802618203.png" alt="image-20220223093739515" style="zoom: 37%;">

<p><strong>然后验证公钥</strong>，打开终端，输⼊⼀下内容。第⼀次添加需要输⼊<code>yes</code> 来确定，完成之后即可看到输出的欢迎信息。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<h1 id="pycharm中配置Git"><a href="#pycharm中配置Git" class="headerlink" title="pycharm中配置Git"></a>pycharm中配置Git</h1><img src="/2022/02/23/12-1-git-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/image-20220223094456247.png" alt="image-20220223094456247">
]]></content>
      <categories>
        <category>测试学习</category>
      </categories>
      <tags>
        <tag>Git代码管理</tag>
      </tags>
  </entry>
  <entry>
    <title>14.4 函数进阶与参数处理</title>
    <url>/2022/02/21/14-4-%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6%E4%B8%8E%E5%8F%82%E6%95%B0%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h1 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h1><ul>
<li>可变参数也称为不定长参数</li>
<li>传入函数中实际参数可以是任意多个</li>
<li>常见形式<ul>
<li><code>*args</code></li>
<li><code>**kwargs</code></li>
</ul>
</li>
</ul>
<h2 id="args"><a href="#args" class="headerlink" title="*args"></a><code>*args</code></h2><ul>
<li><p>接收任意多个实际参数，并将其放到一个<strong>元组</strong>中</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">print_language</span>(<span class="params">*args</span>):</span><br><span class="line">    <span class="built_in">print</span>(args)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数，把不同数量的参数传递进去，用位置参数</span></span><br><span class="line">print_language(<span class="string">&quot;python&quot;</span>, <span class="string">&quot;java&quot;</span>)</span><br><span class="line">print_language(<span class="string">&quot;python&quot;</span>, <span class="string">&quot;java&quot;</span>, <span class="string">&quot;php&quot;</span>, <span class="string">&quot;go&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>  结果：</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;java&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;java&#x27;</span>, <span class="string">&#x27;php&#x27;</span>, <span class="string">&#x27;go&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用<strong>已经存在的列表或元组</strong>作为函数的可变参数，可以在列表的名称前加<code>*</code>，相当于解包操作，如果不加 * 则会将列表或元组视为一整个参数</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将整个列表作为一个元素传入函数</span></span><br><span class="line">params = [<span class="string">&quot;python&quot;</span>, <span class="string">&quot;java&quot;</span>, <span class="string">&quot;php&quot;</span>, <span class="string">&quot;go&quot;</span>]</span><br><span class="line">print_language(*params)</span><br><span class="line"><span class="comment"># 将整个元组作为一个元素传入函数</span></span><br><span class="line">params = (<span class="string">&quot;python&quot;</span>, <span class="string">&quot;java&quot;</span>, <span class="string">&quot;php&quot;</span>)</span><br><span class="line">print_language(params)</span><br><span class="line"><span class="comment"># *：相当于解包操作，等价于print_language(&quot;python&quot;, &quot;java&quot;, &quot;php&quot;, &quot;go&quot;)</span></span><br><span class="line">print_language(*params)</span><br></pre></td></tr></table></figure>

<p>  结果：</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;java&#x27;</span>, <span class="string">&#x27;php&#x27;</span>, <span class="string">&#x27;go&#x27;</span>)</span><br><span class="line">((<span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;java&#x27;</span>, <span class="string">&#x27;php&#x27;</span>),)</span><br><span class="line">(<span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;java&#x27;</span>, <span class="string">&#x27;php&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>  如果想将参数分开，可以采用循环</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">print_language</span>(<span class="params">*args</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> args:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print_language(<span class="string">&quot;python&quot;</span>, <span class="string">&quot;java&quot;</span>, <span class="string">&quot;php&quot;</span>, <span class="string">&quot;go&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>  结果：</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python</span><br><span class="line">java</span><br><span class="line">php</span><br><span class="line">go</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="kwargs"><a href="#kwargs" class="headerlink" title="**kwargs"></a><code>**kwargs</code></h2><ul>
<li><p>接收任意多个类似<strong>关键字</strong>参数一样显式赋值的实际参数，并将其放到一个<strong>字典</strong>中</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">print_info</span>(<span class="params">**kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print_info(Tom=<span class="number">18</span>, Jim=<span class="number">20</span>, Lily=<span class="number">12</span>)</span><br></pre></td></tr></table></figure>

<p>  结果：</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;Tom&#x27;</span>: <span class="number">18</span>, <span class="string">&#x27;Jim&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;Lily&#x27;</span>: <span class="number">12</span>&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用<strong>已经存在字典</strong>作为函数的可变参数，可以在字典的名称前加<code>**</code></p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">params = &#123;<span class="string">&#x27;Tom&#x27;</span>:<span class="number">18</span>, <span class="string">&#x27;Jim&#x27;</span>:<span class="number">20</span>, <span class="string">&#x27;Lily&#x27;</span>:<span class="number">12</span>&#125;</span><br><span class="line">print_language(**params)</span><br></pre></td></tr></table></figure>

<p>  结果：</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;Tom&#x27;</span>: <span class="number">18</span>, <span class="string">&#x27;Jim&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;Lily&#x27;</span>: <span class="number">12</span>&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>测试学习</category>
      </categories>
      <tags>
        <tag>python编程语言</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2022/03/04/14-10-Python-%E6%A8%A1%E5%9D%97%E4%B8%8E%E5%8C%85/</url>
    <content><![CDATA[<h1 id="1-项目目录结构"><a href="#1-项目目录结构" class="headerlink" title="1 项目目录结构"></a>1 项目目录结构</h1><h2 id="python的程序结构："><a href="#python的程序结构：" class="headerlink" title="python的程序结构："></a>python的程序结构：</h2><img src="/2022/03/04/14-10-Python-%E6%A8%A1%E5%9D%97%E4%B8%8E%E5%8C%85/image-20220304134433802.png" alt="image-20220304134433802" style="zoom: 50%;">

<h2 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h2><ul>
<li><code>package</code>包</li>
<li><code>modele</code>模块</li>
<li><code>function</code>方法</li>
</ul>
<h1 id="2-模块定义"><a href="#2-模块定义" class="headerlink" title="2 模块定义"></a>2 模块定义</h1><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><ul>
<li>包含<code>Python</code>定义和语句的文件</li>
<li><code>.py</code>文件</li>
<li>作为脚本运行</li>
</ul>
<h2 id="模块分类"><a href="#模块分类" class="headerlink" title="模块分类"></a>模块分类</h2><ul>
<li>系统内置模块</li>
<li>第三方的开源模块</li>
<li>自定义模块</li>
</ul>
<h2 id="如何使用模块"><a href="#如何使用模块" class="headerlink" title="如何使用模块"></a>如何使用模块</h2><ul>
<li><h3 id="系统内置模块"><a href="#系统内置模块" class="headerlink" title="系统内置模块"></a>系统内置模块</h3><ul>
<li><p>Python安装好之后自带的一些非常有用的模块（sys, os, time, json 模块等）</p>
  <img src="/2022/03/04/14-10-Python-%E6%A8%A1%E5%9D%97%E4%B8%8E%E5%8C%85/image-20220304135423493.png" alt="image-20220304135423493" style="zoom:50%;">

  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="built_in">print</span>(sys.path)</span><br></pre></td></tr></table></figure>

<p>  结果：</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;D:\\PycharmProject&#x27;</span>, <span class="string">&#x27;D:\\PycharmProject&#x27;</span>, <span class="string">&#x27;C:\\Program Files\\Python310\\python310.zip&#x27;</span>, <span class="string">&#x27;C:\\Program Files\\Python310\\DLLs&#x27;</span>, <span class="string">&#x27;C:\\Program Files\\Python310\\lib&#x27;</span>, <span class="string">&#x27;C:\\Program Files\\Python310&#x27;</span>, <span class="string">&#x27;C:\\Users\\yilin.yang\\AppData\\Roaming\\Python\\Python310\\site-packages&#x27;</span>, <span class="string">&#x27;C:\\Program Files\\Python310\\lib\\site-packages&#x27;</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><h3 id="第三方开源模块"><a href="#第三方开源模块" class="headerlink" title="第三方开源模块"></a>第三方开源模块</h3><ul>
<li><p>是通过包管理工具<code>pip</code>完成的</p>
<ul>
<li>需要通过 <code>pip install 模块名</code> 安装</li>
</ul>
</li>
<li><p>也通过可以Python解释器找到一些第三方库</p>
<p>  <img src="/2022/03/04/14-10-Python-%E6%A8%A1%E5%9D%97%E4%B8%8E%E5%8C%85/image-20220304140151603.png" alt="image-20220304140151603"></p>
</li>
</ul>
</li>
<li><h3 id="自定义模块"><a href="#自定义模块" class="headerlink" title="自定义模块"></a>自定义模块</h3><ul>
<li>自定义模块是自己写的模块，对某段逻辑或某些函数进行封装后供其他函<br>  数调用。</li>
</ul>
<p>  比如先定义一个模块<code>baidu.py</code>，输入代码：</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">search</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;这是一个搜索方法&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>  然后在另一个模块<code>demo.py</code>导入，注意导入时的选择：</p>
  <img src="/2022/03/04/14-10-Python-%E6%A8%A1%E5%9D%97%E4%B8%8E%E5%8C%85/image-20220304141004887.png" alt="image-20220304141004887" style="zoom:50%;">

  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> baidu <span class="keyword">import</span> search</span><br><span class="line">search()</span><br></pre></td></tr></table></figure>

<p>  或者写：</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> baidu</span><br><span class="line">baidu.search()</span><br></pre></td></tr></table></figure>

<p>  一个是直接导入<code>baidu</code>模块的<code>search</code>方法，另一个是只导入<code>baidu</code>模块，在模块内调用<code>search</code>方法。</p>
<blockquote>
<p>如果要导入一个模块的很多类或者方法，可以写 <code>from 模块名 import *</code></p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h1 id="3-文件引用"><a href="#3-文件引用" class="headerlink" title="3 文件引用"></a>3 文件引用</h1><h2 id="模块导入"><a href="#模块导入" class="headerlink" title="模块导入"></a>模块导入</h2><ul>
<li><code>import 模块名</code></li>
<li><code>from &lt;模块名&gt; import &lt;方法 | 变量 | 类&gt;</code></li>
<li><code>from &lt; 模块名 &gt; import*</code></li>
</ul>
<blockquote>
<p>注意：</p>
<ul>
<li>同一个模块写多次只被导入一次</li>
<li><code>import</code>应该放在代码的顶端</li>
</ul>
</blockquote>
<h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><ul>
<li><code>dir()</code> 找出当前模块定义的对象</li>
<li><code>dir(sys)</code>找出参数模块定义的对象</li>
</ul>
<h2 id="搜索路径"><a href="#搜索路径" class="headerlink" title="搜索路径"></a><strong>搜索路径</strong></h2><p><code>print(sys.path)</code> ，记得先导入<code>sys</code>模块</p>
<ul>
<li>Python解析器对模块位置的搜索顺序是<ul>
<li>包含输入脚本的目录（如果未指定文件，则为当前目录）</li>
<li>PYTHONPATH（目录名称列表，语法与shell变量相同PATH）</li>
<li>安装的默认路径</li>
</ul>
</li>
</ul>
<h2 id="使用模块的总结"><a href="#使用模块的总结" class="headerlink" title="使用模块的总结"></a>使用模块的总结</h2><ul>
<li>代码的可维护性</li>
<li>提升编码效率</li>
<li>函数名可重复（起名避免与系统重复）</li>
</ul>
]]></content>
      <categories>
        <category>测试学习</category>
      </categories>
      <tags>
        <tag>python编程语言</tag>
      </tags>
  </entry>
  <entry>
    <title>14.3 Python函数</title>
    <url>/2022/02/21/14-3-Python%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="函数的作用"><a href="#函数的作用" class="headerlink" title="函数的作用"></a>函数的作用</h1><ul>
<li>函数是组织好的，可重复使用的，用来实现单一或相关联功能的代码段</li>
<li>函数能提高应用的模块性和代码的重复利用率</li>
<li>python 内置函数：<a href="https://docs.python.org/zh-cn/3.8/library/functions.html">https://docs.python.org/zh-cn/3.8/library/functions.html</a></li>
</ul>
<h1 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h1><ul>
<li>def：函数定义关键词</li>
<li>function_name：函数名称</li>
<li>()：参数列表放置的位置，可以为空</li>
<li>parameter_list：可选，指定向函数中传递的参数</li>
<li>comments：可选，为函数指定注释<code>&quot;&quot;&quot;XXX&quot;&quot;&quot;</code></li>
<li>function_body：可选，指定函数体</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">function_name</span>(<span class="params">[parameter_list]</span>):</span><br><span class="line">    [<span class="string">&#x27;&#x27;&#x27; comments &#x27;&#x27;&#x27;</span>]</span><br><span class="line">    [function_body]</span><br></pre></td></tr></table></figure>

<p>例子：</p>
<h2 id="空函数"><a href="#空函数" class="headerlink" title="空函数"></a>空函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义空函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">function_name</span>(<span class="params">function_name</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 这是一个空函数 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>当没有函数体时，写入comments或者是<code>pass</code>语句，否则会报错。</p>
<h2 id="定义一个无参函数"><a href="#定义一个无参函数" class="headerlink" title="定义一个无参函数"></a>定义一个无参函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义一个函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun1</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;函数体&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;这是一个函数&quot;</span>)</span><br><span class="line"></span><br><span class="line">fun1()</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">这是一个函数</span><br></pre></td></tr></table></figure>

<h2 id="定义一个有参函数"><a href="#定义一个有参函数" class="headerlink" title="定义一个有参函数"></a>定义一个有参函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun2</span>(<span class="params">a, b, c</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;这是一个携带参数和注释的函数&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;传入的参数为：a=<span class="subst">&#123;a&#125;</span>,b=<span class="subst">&#123;b&#125;</span>,c=<span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印函数comments的内容</span></span><br><span class="line"><span class="built_in">print</span>(fun2.__doc__)</span><br><span class="line"><span class="built_in">help</span>(fun2)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">这是一个携带参数和注释的函数</span><br><span class="line">Help on function fun2 <span class="keyword">in</span> module __main__:</span><br><span class="line">fun2(a, b, c)</span><br><span class="line">    这是一个携带参数和注释的函数</span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="https://so.csdn.net/so/search?q=python&spm=1001.2101.3001.7020">python</a>的print字符串前面加f表示格式化字符串，加f后可以在字符串里面使用用花括号括起来的变量和表达式，如果字符串里面没有表达式，那么前面加不加f输出应该都一样</p>
</blockquote>
<h2 id="定义函数的注意事项"><a href="#定义函数的注意事项" class="headerlink" title="定义函数的注意事项"></a>定义函数的注意事项</h2><ul>
<li>缩进：python 是通过严格的缩进来判断代码块儿<ul>
<li>函数体和注释相对于 def 关键字必须保持一定的缩进，一般都是 4 个空格</li>
<li>pycharm 自动格式化快捷键：<code>ctrl+alt+L</code></li>
</ul>
</li>
<li>定义空函数<ul>
<li>使用 <code>pass</code> 语句占位</li>
<li>写函数注释 comments</li>
</ul>
</li>
</ul>
<h1 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h1><ul>
<li>function_name：函数名称</li>
<li>parameter_value：可选，指定各个参数的值</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">function_name([parameter_value])</span><br></pre></td></tr></table></figure>

<p>例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun2</span>(<span class="params">a, b, c</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;这是一个携带参数和注释的函数&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;传入的参数为：a=<span class="subst">&#123;a&#125;</span>,b=<span class="subst">&#123;b&#125;</span>,c=<span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 函数调用</span></span><br><span class="line">fun2(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">传入的参数为：a=<span class="number">1</span>,b=<span class="number">2</span>,c=<span class="number">3</span></span><br></pre></td></tr></table></figure>

<h1 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h1><ul>
<li><p>形式参数：定义函数时，函数名称后面括号中的参数</p>
</li>
<li><p>实际参数：调用函数时，函数名称后面括号中的参数</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># a, b, c 为形式参数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">demo_func</span>(<span class="params">a, b, c</span>):</span><br><span class="line">    <span class="built_in">print</span>(a, b, c)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1, 2, 3 为实际参数</span></span><br><span class="line">demo_func(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<p>  结果：</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="位置参数"><a href="#位置参数" class="headerlink" title="位置参数"></a>位置参数</h2><ul>
<li><p>数量必须与定义时一致</p>
</li>
<li><p>位置必须与定义时一致</p>
<blockquote>
<p>例子同上：1 赋值给 a, 2 赋值给 b, 3 赋值给 c</p>
</blockquote>
</li>
</ul>
<h2 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h2><ul>
<li><p>使用形式参数的名字确定输入的参数值</p>
</li>
<li><p>不需要与形式参数的位置完全一致</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">demo_func</span>(<span class="params">a, b, c</span>):</span><br><span class="line">    <span class="built_in">print</span>(a, b, c)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">demo_func(b=<span class="number">2</span>, a=<span class="number">1</span>, c=<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<p>  结果：</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="为参数设置默认值"><a href="#为参数设置默认值" class="headerlink" title="为参数设置默认值"></a>为参数设置默认值</h2><ul>
<li><p>定义函数时可以指定形式参数的默认值</p>
</li>
<li><p>指定默认值的形式参数必须放在所有参数的最后，否则会产生语法错误</p>
</li>
<li><p><code>param=default_value</code>：可选，指定参数并且为该参数设置默认值为 default_value</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">function_name</span>(<span class="params">..., [param=default_value]</span>):</span><br><span class="line">    [function_body]</span><br></pre></td></tr></table></figure>

<p>  例子1：设置默认参数</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">demo</span>(<span class="params">a, b, c=<span class="number">3</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(a, b, c)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">demo(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<p>  结果：</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果首个参数设置默认值则会报错：SyntaxError: non-default argument follows default argument</p>
</blockquote>
</li>
</ul>
<p>例子2：参数默认值为空列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">demo2</span>(<span class="params">a, b, c=[]</span>):</span><br><span class="line">    c.append(a)</span><br><span class="line">    c.append(b)</span><br><span class="line">    <span class="built_in">print</span>(a, b, c)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">demo2(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span> [<span class="number">1</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>可以看到随着实参键入，默认参数空列表不再为空。默认值一定要用不可变对象，否则的话默认值可能会随着调用发生变化。</p>
</blockquote>
<h1 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h1><p>- value：可选，指定要返回的值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">function_name</span>(<span class="params">[parameter_list]</span>):</span><br><span class="line">    [<span class="string">&#x27;&#x27;&#x27; comments &#x27;&#x27;&#x27;</span>]</span><br><span class="line">    [function_body]</span><br><span class="line">    <span class="keyword">return</span> [value]</span><br></pre></td></tr></table></figure>

<p>例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义加法函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sum</span>(<span class="params">a, b</span>):</span><br><span class="line">    result = a + b</span><br><span class="line">    <span class="comment"># 函数返回值</span></span><br><span class="line">    <span class="keyword">return</span> a, b, result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r = <span class="built_in">sum</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(r)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<p>如果注释掉第5行，则输出：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="literal">None</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>测试学习</category>
      </categories>
      <tags>
        <tag>python编程语言</tag>
      </tags>
  </entry>
  <entry>
    <title>14.5 Python lambda表达式</title>
    <url>/2022/02/21/14-5-Python-lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h1><ul>
<li>没有名字的函数</li>
<li>用 lambda 表达式创建匿名函数</li>
</ul>
<h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><ul>
<li>需要一个函数，但是又不想费神去命名这个函数</li>
<li>通常在这个函数只使用一次的场景下</li>
<li>可以指定短小的回调函数</li>
</ul>
<p>例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 常规写法</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">circle_area</span>(<span class="params">r</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;计算圆面积</span></span><br><span class="line"><span class="string">    r为半径&quot;&quot;&quot;</span></span><br><span class="line">    result = math.pi * r ** <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;半径为<span class="subst">&#123;r&#125;</span>的圆的面积为<span class="subst">&#123;circle_area(r)&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">半径为<span class="number">10</span>的圆的面积为<span class="number">314.1592653589793</span></span><br></pre></td></tr></table></figure>

<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><ul>
<li><p>result：调用 lambda 表达式</p>
</li>
<li><p>[arg1 [, arg2, …. , argn]]：可选，指定要传递的参数列表</p>
</li>
<li><p>expression：必选，指定一个实现具体功能的表达式</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = <span class="keyword">lambda</span> [arg1 [, arg2, .... , argn]]: expression</span><br></pre></td></tr></table></figure></li>
</ul>
<p>例子：</p>
<h2 id="常规写法："><a href="#常规写法：" class="headerlink" title="常规写法："></a>常规写法：</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 常规写法</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">circle_area</span>(<span class="params">r</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;计算圆面积</span></span><br><span class="line"><span class="string">    r为半径&quot;&quot;&quot;</span></span><br><span class="line">    result = math.pi * r ** <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;半径为<span class="subst">&#123;r&#125;</span>的圆的面积为<span class="subst">&#123;circle_area(r)&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">半径为<span class="number">10</span>的圆的面积为<span class="number">314.1592653589793</span></span><br></pre></td></tr></table></figure>

<h2 id="用lambda表达式实现"><a href="#用lambda表达式实现" class="headerlink" title="用lambda表达式实现"></a>用lambda表达式实现</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r = <span class="number">10</span></span><br><span class="line"><span class="comment"># 用lambda 表达式实现</span></span><br><span class="line">result = <span class="keyword">lambda</span> r: math.pi * r ** <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;半径为<span class="subst">&#123;r&#125;</span>的圆的面积为<span class="subst">&#123;result(r)&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># 需要用变量存储lambda，直接输出是不行的</span></span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">lambda</span> r: math.pi * r ** <span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">半径为<span class="number">10</span>的圆的面积为<span class="number">314.1592653589793</span></span><br><span class="line">&lt;function &lt;<span class="keyword">lambda</span>&gt; at <span class="number">0x000001C3FBF8A200</span>&gt;</span><br></pre></td></tr></table></figure>

<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><ul>
<li><p>对获取到的信息进行排序</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 书籍价格</span></span><br><span class="line"><span class="comment"># 利用列表储存信息，书籍和价格为元组存储</span></span><br><span class="line">book_info = [</span><br><span class="line">    (<span class="string">&#x27;python&#x27;</span>, <span class="number">22.5</span>),</span><br><span class="line">    (<span class="string">&#x27;java&#x27;</span>, <span class="number">20</span>),</span><br><span class="line">    (<span class="string">&#x27;go&#x27;</span>, <span class="number">25</span>)</span><br><span class="line">]</span><br><span class="line"><span class="built_in">print</span>(book_info)</span><br><span class="line"><span class="comment"># 指定按价格进行排序</span></span><br><span class="line"><span class="comment"># lambda x: x[1] 返回列表中每个元组的第二个元素</span></span><br><span class="line">book_info.sort(key=<span class="keyword">lambda</span> x: X[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(book_info)</span><br></pre></td></tr></table></figure>

<p>  结果：</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[(<span class="string">&#x27;python&#x27;</span>, <span class="number">22.5</span>), (<span class="string">&#x27;java&#x27;</span>, <span class="number">20</span>), (<span class="string">&#x27;go&#x27;</span>, <span class="number">25</span>)]</span><br><span class="line">[(<span class="string">&#x27;java&#x27;</span>, <span class="number">20</span>), (<span class="string">&#x27;python&#x27;</span>, <span class="number">22.5</span>), (<span class="string">&#x27;go&#x27;</span>, <span class="number">25</span>)]</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>测试学习</category>
      </categories>
      <tags>
        <tag>python编程语言</tag>
      </tags>
  </entry>
  <entry>
    <title>14.6 Python面向对象编程</title>
    <url>/2022/02/21/14-6-Python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="两种编程思想"><a href="#两种编程思想" class="headerlink" title="两种编程思想"></a>两种编程思想</h1><h2 id="1-面向过程"><a href="#1-面向过程" class="headerlink" title="1 面向过程"></a>1 面向过程</h2><ul>
<li>一种以过程为中心的编程思想</li>
<li>简单的事情</li>
</ul>
<h2 id="2-面向对象"><a href="#2-面向对象" class="headerlink" title="2 面向对象"></a>2 面向对象</h2><ul>
<li>一种更符合我们人类思维习惯的编程思想</li>
<li>面向对象开发就是不断的创建对象，使用对象，操作对象做事情</li>
<li>复杂的事情</li>
</ul>
<h1 id="什么是面向对象"><a href="#什么是面向对象" class="headerlink" title="什么是面向对象"></a>什么是面向对象</h1><p>语言层面，封装代码和数据规格层面，对象是一系列可被使用的公共接口从概念层面，对象是某种拥有责任的抽象</p>
<h2 id="面向对象程序设计规则"><a href="#面向对象程序设计规则" class="headerlink" title="面向对象程序设计规则"></a>面向对象程序设计规则</h2><ul>
<li>首先分析有哪些类</li>
<li>每个类有哪些属性和行为</li>
<li>类与类之间存在的关系</li>
</ul>
<h1 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h1><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><ul>
<li>类（Class）是对一群具有相同特征或者行为的事物的一个统称，是<strong>抽象</strong>的，<strong>不能直接使用</strong>。<br>  。<strong>特征</strong>被称为<strong>属性</strong><br>  。<strong>行为</strong>被称为<strong>方法</strong></li>
<li>类就相当于制造飞机时的图纸，是一个模板，是<strong>负责创建对象</strong>的</li>
</ul>
<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><ul>
<li>对象是由<strong>类创建出来的一个具体存在，</strong>可以<strong>直接使用</strong></li>
<li>由<strong>哪一个类</strong>创建出来的<strong>对象</strong>，就拥有在<strong>哪一个类</strong>中定义的：<ul>
<li>属性</li>
<li>方法</li>
</ul>
</li>
<li>对象就相当于用图纸制造的飞机</li>
<li>在程序开发中，应该<strong>先有类，再有对象</strong></li>
</ul>
<h2 id="类和对象的关系"><a href="#类和对象的关系" class="headerlink" title="类和对象的关系"></a>类和对象的关系</h2><ul>
<li><strong>类是模板</strong>，对象是根据类这个模板创建出来的，应该先<strong>有类，再有对象</strong></li>
<li><strong>类</strong>只有<strong>一个</strong>，而<strong>对象</strong>可以有<strong>很多个</strong><ul>
<li><strong>不同的对象</strong>之间<strong>属性</strong>可能会各不相同</li>
</ul>
</li>
<li><strong>类</strong>中定义了什么<strong>属性和方法</strong>，<strong>对</strong>象中就有什么<strong>属性和方法</strong>，<strong>不可能多，也不可能少</strong></li>
</ul>
<h2 id="类的设计"><a href="#类的设计" class="headerlink" title="类的设计"></a>类的设计</h2><ul>
<li>在使用面相对象开发前，应该首先分析需求。确定一下，程序中需要包含哪些类</li>
<li>在程序开发中，要设计一个类，通常需要满足一下三个要素：<ol>
<li>类名   这类事物的名字，满足<strong>大驼蜂命名法</strong></li>
<li>属性   这类事物具有什么样的特征</li>
<li>方法   这类事物具有什么样的行为</li>
</ol>
</li>
</ul>
<h3 id="大驼峰命名法（CapWords）"><a href="#大驼峰命名法（CapWords）" class="headerlink" title="大驼峰命名法（CapWords）"></a>大驼峰命名法（CapWords）</h3><p>​    1.<strong>每</strong>一个单词的<strong>首字母大写</strong><br>​    2.单词与单词之间<strong>没有</strong>下划线</p>
<h2 id="类名的确定"><a href="#类名的确定" class="headerlink" title="类名的确定"></a>类名的确定</h2><p>​    <strong>名词提炼法</strong>——分析整个业务流程，出现的<strong>名词</strong>，通常就是找到的类</p>
<h2 id="属性和方法的确定"><a href="#属性和方法的确定" class="headerlink" title="属性和方法的确定"></a>属性和方法的确定</h2><ul>
<li>对<strong>对象的特征描述</strong>，通常可以定义成<strong>属性</strong></li>
<li><strong>对象具有的行为</strong>（动词），通常可以定义成方法</li>
</ul>
<blockquote>
<p>提示：需求中没有涉及的属性或者方法在设计类时，不需要考虑</p>
</blockquote>
<img src="/2022/02/21/14-6-Python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/image-20220217131744889.png" alt="image-20220217131744889" style="zoom: 50%;">

<h1 id="面向对象基础语法"><a href="#面向对象基础语法" class="headerlink" title="面向对象基础语法"></a>面向对象基础语法</h1><h2 id="1-dir内置函数（了解）"><a href="#1-dir内置函数（了解）" class="headerlink" title="1. dir内置函数（了解）"></a>1. dir内置函数（了解）</h2><p>在<code>Python</code>中<strong>对象几乎是无所不在</strong>的。我们之前学习的变量、数据、函数都是对象在<code>Python</code>中可以使用以下两个方法验证：<br>1.在<strong>标识符&#x2F;数据</strong>后输入一个<code>.</code>，然后按下<code>TAB</code>键，<code>iPython</code>会提示该对象能够调用的方法列表<br>2.使用内置函数<code>dir</code>传入<strong>标识符&#x2F;数据</strong>，可以查看对象内的<strong>所有属性及方法</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(对象名))</span><br></pre></td></tr></table></figure>

<blockquote>
<p>提示:<code>__方法名__</code>格式的方法是<code>python</code>提供的内<strong>置方法&#x2F;属性</strong>，稍后会介绍一些常用的内置方法&#x2F;属性</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">方法名</th>
<th align="center">类型</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>__new__</code></td>
<td align="center">方法</td>
<td align="center"><strong>创建对象</strong>时，会被自动调用</td>
</tr>
<tr>
<td align="center"><code>__init_</code></td>
<td align="center">方法</td>
<td align="center"><strong>对象被初始化</strong>时，会被<strong>自动</strong>调用</td>
</tr>
<tr>
<td align="center"><code>__del_</code></td>
<td align="center">方法</td>
<td align="center"><strong>对象</strong>被从<strong>内存中销毁</strong>前，会被<strong>自动</strong>调用</td>
</tr>
<tr>
<td align="center"><code>__str__</code></td>
<td align="center">方法</td>
<td align="center">返回<strong>对象的描述信息</strong>，<strong>print函数</strong>输出使用</td>
</tr>
</tbody></table>
<h2 id="2-定义简单的类"><a href="#2-定义简单的类" class="headerlink" title="2.定义简单的类"></a>2.定义简单的类</h2><blockquote>
<p>面向对象是更大的封装，在一个类中封装多个方法，这样通过这个类创建出来的对<br>象，就可以直接调用这些方法了</p>
</blockquote>
<h3 id="定义只包含方法的类"><a href="#定义只包含方法的类" class="headerlink" title="定义只包含方法的类"></a>定义只包含方法的类</h3><p>在python中要定义一个只包含方法的类，语法格式如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">类名</span>:</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">方法1</span>(<span class="params">self, 参数列表</span>):</span><br><span class="line">		<span class="keyword">pass</span></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">方法2</span>(<span class="params">self, 参数列表</span>):</span><br><span class="line">		<span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<ul>
<li>方法的定义格式和之前学习过的函数几乎一样</li>
<li>区别在于第一个参数必须是<code>self</code>，大家暂时先记住，稍后介绍<code>self</code></li>
</ul>
<blockquote>
<p>注意：类名的命名规则要符合大驼峰命名法</p>
</blockquote>
<h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><p>​    当一个类定义完成之后，要是用这个类来创建对象，语法格式如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">对象变量 = 类名()</span><br></pre></td></tr></table></figure>

<h3 id="第一个面向对象程序"><a href="#第一个面向对象程序" class="headerlink" title="第一个面向对象程序"></a>第一个面向对象程序</h3><p>需求：小猫爱吃鱼，小猫要喝水</p>
<p>分析：</p>
<ol>
<li>定义一个猫类<code>cat</code></li>
<li>定义两个方法<code>eat</code>和<code>drink</code></li>
<li>按照需求——不需要定义属性</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;这是一个猫类&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;小猫爱吃鱼&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">drink</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;小猫爱喝水&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建猫对象</span></span><br><span class="line"><span class="comment"># 对象= 实例化 = 起名</span></span><br><span class="line">tom = Cat()</span><br><span class="line">tom.eat()</span><br><span class="line">tom.drink()</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">小猫爱吃鱼</span><br><span class="line">小猫爱喝水</span><br></pre></td></tr></table></figure>

<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>在面向对象开发中，<strong>引用</strong>的概念是同样适用的。</p>
<ul>
<li><p>在<code>Python</code>中使用类创建对象之后，<code>tom</code>变量中仍然记录的是对象在内存中的地址</p>
</li>
<li><p>也就是<code>tom</code>变量引用了新建的猫对象</p>
</li>
<li><p>使用<code>print</code>输出对象变量，默认情况下，是能够输出这个变量引用的对象是由哪一个类创建的对象，以及在内存中的地址（十六进制表示）</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(tom)</span><br></pre></td></tr></table></figure>

<p>  结果：</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;__main__.Cat <span class="built_in">object</span> at <span class="number">0x00000229EA076CE0</span>&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>提示：在计算机中，通常使用十六进制表示内存地址</p>
<ul>
<li>十进制和十六进制都是用来表达数字的，只是表示的方式不一样</li>
<li>十进制和十六进制的数字之间可以来回转换</li>
</ul>
</blockquote>
<ul>
<li><code>%d</code>可以以10进制输出数字</li>
<li><code>%x</code>可以以16进制输出数字</li>
</ul>
<h2 id="3-方法中的self参数"><a href="#3-方法中的self参数" class="headerlink" title="3.方法中的self参数"></a>3.方法中的<code>self</code>参数</h2><h3 id="3-1-案例改造——给对象增加属性"><a href="#3-1-案例改造——给对象增加属性" class="headerlink" title="3.1 案例改造——给对象增加属性"></a>3.1 案例改造——给对象增加属性</h3><p>在<code>Pythor</code>中，要给<strong>对象设置属性</strong>，非常的容易，但是<strong>不推荐使用</strong></p>
<ul>
<li>因为：对象属性的封装应该封装在类的内部</li>
<li>只需要在<strong>类的外部的代码</strong>中直接通过<code>.</code>设置一个属性即可</li>
</ul>
<blockquote>
<p>注意：这种方式虽然简单，但是不推荐使用！</p>
</blockquote>
<p>在上面的实例代码13行后添加</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tom.name = <span class="string">&quot;tom&quot;</span></span><br><span class="line"><span class="built_in">print</span>(tom.name)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tom</span><br></pre></td></tr></table></figure>

<h3 id="3-2-使用self在方法内部输出每一只猫的名字"><a href="#3-2-使用self在方法内部输出每一只猫的名字" class="headerlink" title="3.2 使用self在方法内部输出每一只猫的名字"></a>3.2 使用<code>self</code>在方法内部输出每一只猫的名字</h3><ul>
<li>由<strong>哪一个对象</strong>调用的方法，方法内的<code>self</code>就是<strong>哪一个对象的引用</strong></li>
<li>在类封装的方法内部，<code>self</code>就表示<strong>当前调用方法的对象自己</strong></li>
<li><strong>调用方法时</strong>，程序员不需要传递<code>self</code>参数</li>
<li><strong>在方法内部</strong><ul>
<li>可以通过<code>self.</code><strong>访问对象的属性</strong></li>
<li>也可以通过<code>self.</code><strong>调用其他的对象方法</strong></li>
</ul>
</li>
<li>在<strong>类的外部</strong>，通过<code>变量名.</code>，访问对象的<strong>属性和方法</strong></li>
<li>在<strong>类封装的方法中</strong>，通过<code>self.</code>访问对象的<strong>属性和方法</strong></li>
</ul>
<blockquote>
<p><strong><code>self</code>指的是类实例对象本身(注意：不是类本身)</strong></p>
</blockquote>
<p>改造代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>:  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s爱吃鱼&quot;</span> % self.name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">drink</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;小猫爱喝水&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tom = Cat()</span><br><span class="line">tom.name = <span class="string">&quot;tom&quot;</span></span><br><span class="line">tom.eat()</span><br><span class="line">tom.drink()</span><br><span class="line"></span><br><span class="line">lucy = Cat()</span><br><span class="line">lucy.name = <span class="string">&#x27;lucy&#x27;</span></span><br><span class="line">lucy.eat()</span><br><span class="line">lucy.drink()</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tom爱吃鱼</span><br><span class="line">小猫爱喝水</span><br><span class="line">lucy爱吃鱼</span><br><span class="line">小猫爱喝水</span><br></pre></td></tr></table></figure>

<h2 id="4-初始化方法"><a href="#4-初始化方法" class="headerlink" title="4. 初始化方法"></a>4. 初始化方法</h2><h3 id="4-1-之前代码存在的问题——在类的外部给对象增加属性"><a href="#4-1-之前代码存在的问题——在类的外部给对象增加属性" class="headerlink" title="4.1 之前代码存在的问题——在类的外部给对象增加属性"></a>4.1 之前代码存在的问题——在类的外部给对象增加属性</h3><p>先调用方法，在设置属性</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tom = Cat()</span><br><span class="line">tom.eat()</span><br><span class="line">tom.drink()</span><br><span class="line">tom.name = <span class="string">&quot;tom&quot;</span></span><br></pre></td></tr></table></figure>

<p>结果：程序报错</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">AttributeError: <span class="string">&#x27;Cat&#x27;</span> <span class="built_in">object</span> has no attribute <span class="string">&#x27;name&#x27;</span></span><br></pre></td></tr></table></figure>

<p>提示</p>
<ul>
<li>在日常开发中，不推荐在<strong>类的外部</strong>给对象增加属性</li>
<li>如果在运行时，<strong>没有找到属性，程序会报错</strong></li>
<li>对象应该包含有哪些属性，应该<strong>封装在类的内部</strong></li>
</ul>
<h3 id="4-2-初始化方法"><a href="#4-2-初始化方法" class="headerlink" title="4.2 初始化方法"></a>4.2 初始化方法</h3><p>当使用<code>类名()</code>创建对象时，会自动执行以下操作：</p>
<ol>
<li>为对象在内存中<strong>分配空间</strong>——创建对象</li>
<li>为对象的属性<strong>设置初始值</strong>——初始化方法（<code>init</code>）</li>
</ol>
<p>这个初始化方法就是<code>_init_</code>方法，<code>_init_</code>是对象的<strong>内置方法</strong></p>
<blockquote>
<p>_<code>_init_</code>_方法是<strong>专门</strong>用来定义一个类<strong>具有哪些属性的方法</strong></p>
</blockquote>
<p>在Cat中增加<code>_init_</code>方法，验证该方法在创建对象时会被<strong>自动调用</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;初始化方法&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">tom = Cat()</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">初始化方法</span><br></pre></td></tr></table></figure>

<h3 id="4-3-在初始化方法内部定义属性"><a href="#4-3-在初始化方法内部定义属性" class="headerlink" title="4.3 在初始化方法内部定义属性"></a>4.3 在初始化方法内部定义属性</h3><p>在<code>_init_</code>方法内部使用<code>self.属性名 =属性的初始值</code>就可以<strong>定义属性</strong></p>
<p>定义属性之后，再使用<code>Cat</code>类创建的对象，都会<strong>拥有该属性</strong> </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;初始化方法&#x27;</span>)</span><br><span class="line">        self.name = <span class="string">&#x27;lili&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s爱吃鱼&quot;</span> % self.name)</span><br><span class="line"></span><br><span class="line">cat = Cat()</span><br><span class="line"><span class="built_in">print</span>(cat.name)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">初始化方法</span><br><span class="line">lili</span><br></pre></td></tr></table></figure>

<h3 id="4-4-改造初始化方法——初始化的同时设置初始值"><a href="#4-4-改造初始化方法——初始化的同时设置初始值" class="headerlink" title="4.4 改造初始化方法——初始化的同时设置初始值"></a>4.4 改造初始化方法——初始化的同时设置初始值</h3><p>在开发中，如果希望在<strong>创建对象的同时，就设置对象的属性</strong>，可以对<code>_init_</code>方法进行改造</p>
<ol>
<li>把希望设置的属性值，定义成<code>_init_</code>方法的参数</li>
<li>在<strong>方法内部</strong>使用<code>self.属性 = 形参</code>接收外部传递的参数</li>
<li>在<strong>创建对象</strong>时，使用<code>类名(属性1, 属性2...)</code>调用</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>:</span><br><span class="line">    <span class="comment"># self 就是类的实例，代表当前被引用的对象 self = tom/lucy···</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, new_name</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;初始化方法&#x27;</span>)</span><br><span class="line">        self.name = new_name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s爱吃鱼&quot;</span> % self.name)</span><br><span class="line"></span><br><span class="line">cat = Cat(<span class="string">&#x27;lili&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(cat.name)</span><br><span class="line">cat.eat()</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">初始化方法</span><br><span class="line">lili</span><br><span class="line">lili爱吃鱼</span><br></pre></td></tr></table></figure>

<h2 id="5-内置方法和属性"><a href="#5-内置方法和属性" class="headerlink" title="5.内置方法和属性"></a>5.内置方法和属性</h2><table>
<thead>
<tr>
<th align="center">方法名</th>
<th align="center">类型</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>_del_</code></td>
<td align="center">方法</td>
<td align="center"><strong>对象被从内存中销毁</strong>前，会<strong>自动</strong>调用</td>
</tr>
<tr>
<td align="center"><code>_str_</code></td>
<td align="center">方法</td>
<td align="center">返回<strong>对象的描述信息</strong>，<code>print</code>函数输出使用</td>
</tr>
</tbody></table>
<h3 id="5-1-del-方法（了解）"><a href="#5-1-del-方法（了解）" class="headerlink" title="5.1 _del_方法（了解）"></a>5.1 <code>_del_</code>方法（了解）</h3><p>在<code>Python</code>中</p>
<ul>
<li>当使用<code>类名()</code>创建对象时，为对象分配完空间后，自动调用<code>_init_</code>方法</li>
<li>当一个<strong>对象被从内存中销毁前</strong>，会自动调用<code>_del_</code>方法</li>
</ul>
<p>应用场景</p>
<ul>
<li><code>_init_</code>改造初始化方法，可以让创建对象更加灵活</li>
<li><code>_del_</code>如果希望在对象呗销毁前，再做一些事情，可以考虑一下<code>_del_</code>方法</li>
</ul>
<p>生命周期</p>
<ul>
<li>一个对象从调用<code>类名()</code>创建，生命周期开始</li>
<li>一个对象的<code>_del_</code>方法一旦被调用，生命周期结束</li>
<li>在对象的生命周期内，可以访问对象属性，或者让对象调用方法</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 来了&quot;</span> % self.name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 走了&quot;</span> % self.name)</span><br><span class="line"></span><br><span class="line">tom = Cat(<span class="string">&#x27;tom&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;_&#x27;</span> * <span class="number">50</span>)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tom 来了</span><br><span class="line">__________________________________________________</span><br><span class="line">tom 走了</span><br></pre></td></tr></table></figure>

<p>如果在10行后添加:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">del</span> tom</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tom 来了</span><br><span class="line">tom 走了</span><br><span class="line">__________________________________________________</span><br></pre></td></tr></table></figure>

<h3 id="5-2-str-方法"><a href="#5-2-str-方法" class="headerlink" title="5.2 _str_方法"></a>5.2 <code>_str_</code>方法</h3><ul>
<li>在<code>Python</code>中，使用<code>print</code>输出<strong>对象变量</strong>，默认情况下，会输出这个变量<strong>引用的对象</strong>是由哪一个类创建的对象，以及在<strong>内存中的地址</strong>（十六进制表示）</li>
<li>如果在开发中，希望使用<code>print</code>输出<strong>对象变量</strong>时，能够打印<strong>自定义的内容</strong>，就可以利用<code>str</code>一这个内置方法了</li>
</ul>
<blockquote>
<p>注意：<code>_str_</code>方法必须返回一个字符串</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 来了&quot;</span> % self.name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 走了&quot;</span> % self.name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&#x27;我是小猫%s&#x27;</span> % self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tom = Cat(<span class="string">&#x27;tom&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(tom)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tom 来了</span><br><span class="line">我是小猫tom</span><br><span class="line">tom 走了</span><br></pre></td></tr></table></figure>

<p>不加<code>__str__</code>方法输出则是</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tom 来了</span><br><span class="line">&lt;__main__.Cat <span class="built_in">object</span> at <span class="number">0x0000013DC3EA6E60</span>&gt;</span><br><span class="line">tom 走了</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>测试学习</category>
      </categories>
      <tags>
        <tag>python编程语言</tag>
      </tags>
  </entry>
  <entry>
    <title>14.9 类型注解</title>
    <url>/2022/03/03/14-9-%E7%B1%BB%E5%9E%8B%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="1-类型提示"><a href="#1-类型提示" class="headerlink" title="1 类型提示"></a>1 类型提示</h1><p>python类型支持提示：<a href="https://docs.python.org/zh-cn/3/library/typing.html">https://docs.python.org/zh-cn/3/library/typing.html</a></p>
<p>例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义一个函数，参数name的类型是字符串string，函数返回结果类型也是string</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">greeting</span>(<span class="params">name: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="comment"># name的类型是str所以name可以调用字符串的方法split(),分割后返回字符串列表</span></span><br><span class="line">    <span class="built_in">print</span>(name.split(<span class="string">&#x27;,&#x27;</span>))</span><br><span class="line">    <span class="comment"># 取分割后第三个元素加上&#x27;Hello&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello&#x27;</span> + name.split(<span class="string">&#x27;,&#x27;</span>)[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(greeting(<span class="string">&#x27; python, java, C++&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27; python&#x27;</span>, <span class="string">&#x27; java&#x27;</span>, <span class="string">&#x27; C++&#x27;</span>]</span><br><span class="line">Hello C++</span><br></pre></td></tr></table></figure>

<p><strong>类型提示的好处：</strong></p>
<ul>
<li>增强代码可读性</li>
<li>ide中代码提示</li>
<li>静态代码检查</li>
</ul>
<h1 id="2-IDE中代码提示功能"><a href="#2-IDE中代码提示功能" class="headerlink" title="2 IDE中代码提示功能"></a>2 IDE中代码提示功能</h1><h2 id="2-1-类型别名："><a href="#2-1-类型别名：" class="headerlink" title="2.1 类型别名："></a>2.1 类型别名：</h2><p>例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># List列表需要导入</span></span><br><span class="line">Vector = <span class="type">List</span>[<span class="built_in">float</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数scale有两个参数：float型的scalar和自己定义的类型Vector的参数vector(列表中每个元素都是float型的)，返回值也是类型Vector</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">scale</span>(<span class="params">scalar: <span class="built_in">float</span>, vector: Vector</span>) -&gt; Vector:</span><br><span class="line">    <span class="comment"># 返回scalar乘以vector中每个元素，返回一个列表</span></span><br><span class="line">    <span class="keyword">return</span> [scalar * num <span class="keyword">for</span> num <span class="keyword">in</span> vector]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(scale(<span class="number">1.2</span>, [<span class="number">2.3</span>, <span class="number">4.6</span>, <span class="number">5.2</span>]))</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">2.76</span>, <span class="number">5.52</span>, <span class="number">6.24</span>]</span><br></pre></td></tr></table></figure>

<p>如果输入参数错误，会有提示：</p>
<p><img src="/2022/03/03/14-9-%E7%B1%BB%E5%9E%8B%E6%B3%A8%E8%A7%A3/image-20220303202432014.png" alt="image-20220303202432014"></p>
<p>也可以设置提示类型为<code>ERROR</code></p>
<p><img src="/2022/03/03/14-9-%E7%B1%BB%E5%9E%8B%E6%B3%A8%E8%A7%A3/Snipaste_2022-03-03_19-37-39-16463095989361.png" alt="Snipaste_2022-03-03_19-37-39"></p>
<h2 id="2-2-自定义类型"><a href="#2-2-自定义类型" class="headerlink" title="2.2 自定义类型"></a>2.2 自定义类型</h2><p>例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line">    age: <span class="built_in">int</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数，参数name类型为str，返回对象Student</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_stu</span>(<span class="params">name: <span class="built_in">str</span></span>) -&gt; Student:</span><br><span class="line">    <span class="keyword">return</span> Student()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">get_stu(<span class="string">&#x27;yyl&#x27;</span>).  ---&gt;有提示信息</span><br></pre></td></tr></table></figure>

<p>可以看到有提示信息：可以调用类的属性</p>
<img src="/2022/03/03/14-9-%E7%B1%BB%E5%9E%8B%E6%B3%A8%E8%A7%A3/image-20220303203132984.png" alt="image-20220303203132984">

<h1 id="3-静态代码检查功能"><a href="#3-静态代码检查功能" class="headerlink" title="3 静态代码检查功能"></a>3 静态代码检查功能</h1><p><strong>首先需要安装mypy：</strong></p>
<p>step1：查看环境变量</p>
<p><img src="/2022/03/03/14-9-%E7%B1%BB%E5%9E%8B%E6%B3%A8%E8%A7%A3/image-20220304103507180.png" alt="image-20220304103507180"></p>
<img src="/2022/03/03/14-9-%E7%B1%BB%E5%9E%8B%E6%B3%A8%E8%A7%A3/image-20220304103528056.png" alt="image-20220304103528056" style="zoom:80%;">

<p><img src="/2022/03/03/14-9-%E7%B1%BB%E5%9E%8B%E6%B3%A8%E8%A7%A3/image-20220304103602324.png" alt="image-20220304103602324"></p>
<p>step2：在<code>pycharm</code>终端输入<code>pip install mypy</code>进行安装</p>
<p>step3：<code>pip list</code>查看是否有<code>mypy</code></p>
<img src="/2022/03/03/14-9-%E7%B1%BB%E5%9E%8B%E6%B3%A8%E8%A7%A3/image-20220304104141145.png" alt="image-20220304104141145" style="zoom:80%;">

<p>输入代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line">a: <span class="type">List</span>[<span class="built_in">int</span>] = []</span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;1&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>step4：在终端输入：<code>python -m mypy 文件名.py</code>后，终端打印出错误提示信息：</p>
<p><img src="/2022/03/03/14-9-%E7%B1%BB%E5%9E%8B%E6%B3%A8%E8%A7%A3/image-20220304103025910.png" alt="image-20220304103025910"></p>
<p>说明在文件<code>leixzj.py</code>中第46行出现错误：列表项2（List[2]）的类型“str”不兼容；应为“int”</p>
<h1 id="4-补充：终端区别"><a href="#4-补充：终端区别" class="headerlink" title="4 补充：终端区别"></a>4 补充：终端区别</h1><p>cmd是和powershell都可以做命令行交互，批处理和powershell脚本功能也相当。</p>
<h2 id="4-1-PowerShell"><a href="#4-1-PowerShell" class="headerlink" title="4.1 PowerShell"></a>4.1 PowerShell</h2><p>powershell是执行linux的，gitbash也是，带$的也是。比如输入<code>ls</code>命令，在powershell可以执行。但是在cmd里不能，cmd是windows的终端，他没有ls命令。</p>
<img src="/2022/03/03/14-9-%E7%B1%BB%E5%9E%8B%E6%B3%A8%E8%A7%A3/image-20220304110741302.png" alt="image-20220304110741302" style="zoom: 50%;">

<h2 id="4-2-CMD"><a href="#4-2-CMD" class="headerlink" title="4.2 CMD"></a>4.2 CMD</h2><p>cmd是windows的终端。输入ls命令：</p>
<img src="/2022/03/03/14-9-%E7%B1%BB%E5%9E%8B%E6%B3%A8%E8%A7%A3/image-20220304110830286.png" alt="image-20220304110830286" style="zoom:50%;">
]]></content>
      <categories>
        <category>测试学习</category>
      </categories>
      <tags>
        <tag>python编程语言</tag>
      </tags>
  </entry>
  <entry>
    <title>15.2 程序调试</title>
    <url>/2022/03/04/15-2-%E7%A8%8B%E5%BA%8F%E8%B0%83%E8%AF%95/</url>
    <content><![CDATA[<h1 id="1-程序调试"><a href="#1-程序调试" class="headerlink" title="1 程序调试"></a>1 程序调试</h1><p>程序调试是将编制的程序投入实际运行前，用手工或编译程序等方法进行测试，修正<strong>语法错误和逻辑错误</strong>的过程。</p>
<h2 id="1-1-语法错误"><a href="#1-1-语法错误" class="headerlink" title="1.1 语法错误"></a>1.1 语法错误</h2><p>编写的<code>python</code>语法不正确，导致程序编译失败。</p>
<h2 id="1-2-逻辑错误"><a href="#1-2-逻辑错误" class="headerlink" title="1.2 逻辑错误"></a>1.2 逻辑错误</h2><p>代码本身能够正常执行，但是执行完成的结果不符合预期结果。</p>
<h3 id="1-3-Bug"><a href="#1-3-Bug" class="headerlink" title="1.3 Bug"></a>1.3 Bug</h3><p>bug是计算机领域专业术语（小昆虫、虫子），计算机里叫漏洞，隐藏在程序中的一些未被发现的缺陷或问题统称为bug（漏洞）。</p>
<h2 id="1-4-调试分类"><a href="#1-4-调试分类" class="headerlink" title="1.4 调试分类"></a>1.4 调试分类</h2><ul>
<li>语法错误<ul>
<li>类型错误，语法错误，缩进错误，索引错误，键错误</li>
</ul>
</li>
<li>逻辑错误<ul>
<li>业务逻辑错误，并不会报错</li>
</ul>
</li>
</ul>
<h2 id="1-5-调试方法"><a href="#1-5-调试方法" class="headerlink" title="1.5 调试方法"></a>1.5 调试方法</h2><p>1、对应位置使用<code>print</code>或者<code>logging</code>打印日志信息<br>2、启动断点模式<code>debug</code>调试</p>
]]></content>
      <categories>
        <category>测试学习</category>
      </categories>
      <tags>
        <tag>python编程语言</tag>
      </tags>
  </entry>
  <entry>
    <title>15.10 内置库-多线程threding</title>
    <url>/2022/03/10/15-10-%E5%86%85%E7%BD%AE%E5%BA%93-%E5%A4%9A%E7%BA%BF%E7%A8%8Bthreding/</url>
    <content><![CDATA[<p>多线程</p>
<h2 id="1-多任务"><a href="#1-多任务" class="headerlink" title="1 多任务"></a>1 多任务</h2><p>多任务的最大好处是充分利用CPU资源，提高程序的执行效率。</p>
<h3 id="1-1多任务的概念"><a href="#1-1多任务的概念" class="headerlink" title="1.1多任务的概念"></a>1.1多任务的概念</h3><p>多任务是指在同一时间内执行多个任务。</p>
<h3 id="1-2多任务的两种表现形式"><a href="#1-2多任务的两种表现形式" class="headerlink" title="1.2多任务的两种表现形式"></a>1.2多任务的两种表现形式</h3><ul>
<li>并发（在一段时间内交替去执行多个任务）</li>
<li>并行（在一段时间内真正的同时一起执行多个任务）</li>
</ul>
<h4 id="1-2-1-并发"><a href="#1-2-1-并发" class="headerlink" title="1.2.1 并发"></a>1.2.1 并发</h4><p>在一段时间内交替去执行多个任务。</p>
<img src="/2022/03/10/15-10-%E5%86%85%E7%BD%AE%E5%BA%93-%E5%A4%9A%E7%BA%BF%E7%A8%8Bthreding/image-20220310104923973.png" alt="image-20220310104923973" style="zoom:40%;">

<p>例子：<br>对于单核cu处理多任务，操作系统<strong>轮流</strong>让各个任务交替执行。</p>
<h4 id="1-2-2-并行"><a href="#1-2-2-并行" class="headerlink" title="1.2.2 并行"></a>1.2.2 并行</h4><p>在一段时间内真正的同时一起执行多个任务。</p>
<img src="/2022/03/10/15-10-%E5%86%85%E7%BD%AE%E5%BA%93-%E5%A4%9A%E7%BA%BF%E7%A8%8Bthreding/image-20220310105041361.png" alt="image-20220310105041361" style="zoom:40%;">

<p>例子：<br>对于多核CPU处理多任务，操作系统会给CPU的每个内核安排一个执行的任务，多个内核是真正的<strong>一起同时执行多个任务</strong>。这里需要注意多核CPU是并行的执行多任务，始终有多个任务一起执行。</p>
<h2 id="2-进程"><a href="#2-进程" class="headerlink" title="2 进程"></a>2 进程</h2><h3 id="2-1-程序中实现多任务的方式"><a href="#2-1-程序中实现多任务的方式" class="headerlink" title="2.1 程序中实现多任务的方式"></a>2.1 程序中实现多任务的方式</h3><p>在Python中，想要实现多任务可以使用多进程来完成。</p>
<h3 id="2-2-进程的概念"><a href="#2-2-进程的概念" class="headerlink" title="2.2 进程的概念"></a>2.2 进程的概念</h3><p>进程（Process）是<strong>资源分配的最小单位</strong>，它是<strong>操作系统进行资源分配和调度运行的基本单位</strong>，通俗理解：一个<strong>正在运行</strong>的程序就是一个进程。例如：正在运行的QQ，微信等他们都是一个进程。</p>
<blockquote>
<p>注意：<br>一个程序运行后至少有一个进程。</p>
</blockquote>
<h3 id="2-3-进程的作用"><a href="#2-3-进程的作用" class="headerlink" title="2.3 进程的作用"></a>2.3 进程的作用</h3><p>对于<code>hello.py</code>文件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun_a</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;a&#x27;</span>)    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun_b</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fun_a()</span><br><span class="line">fun_b()</span><br></pre></td></tr></table></figure>

<p>这是是一个非常简单的程序，一旦运行<code>hello.py</code>这个程序，按照代码的执行顺序，<code>fun_a</code>函数执行完毕后才能执行<code>fun_b</code>函数。如果可以让<code>fun_a</code>和<code>fun_b</code>同时运行，显然执行<code>hello.py</code>这个程序的效率会大大提升。</p>
<p><img src="/2022/03/10/15-10-%E5%86%85%E7%BD%AE%E5%BA%93-%E5%A4%9A%E7%BA%BF%E7%A8%8Bthreding/image-20220310110553025.png" alt="image-20220310110553025"></p>
<h2 id="3-多进程完成多任务"><a href="#3-多进程完成多任务" class="headerlink" title="3 多进程完成多任务"></a>3 多进程完成多任务</h2><h3 id="3-1-进程的创建步骤"><a href="#3-1-进程的创建步骤" class="headerlink" title="3.1 进程的创建步骤"></a>3.1 进程的创建步骤</h3><ol>
<li><p>导入进程包</p>
<p> <code>import multiprocessing</code></p>
</li>
<li><p>通过进程类创建进程对象</p>
<p> <code>进程对象 = multiprocessing.Process()</code></p>
</li>
<li><p>启动进程执行任务</p>
<p> <code>进程对象.start()</code></p>
</li>
</ol>
<h3 id="3-2-通过进程类创建进程对象"><a href="#3-2-通过进程类创建进程对象" class="headerlink" title="3.2 通过进程类创建进程对象"></a>3.2 通过进程类创建进程对象</h3><p><code>进程对象 = multiprocessing.Process(target = 任务名)</code></p>
<table>
<thead>
<tr>
<th>参数名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>target</td>
<td>执行的目标任务名，这里指的是函数名(方法名)</td>
</tr>
<tr>
<td>name</td>
<td>进程名，一半不用设置</td>
</tr>
<tr>
<td>group</td>
<td>进程组，目前只能使用None</td>
</tr>
</tbody></table>
<h3 id="3-3-进程创建与启动的代码"><a href="#3-3-进程创建与启动的代码" class="headerlink" title="3.3 进程创建与启动的代码"></a>3.3 进程创建与启动的代码</h3><p>如果有一个程序：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sing</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;唱歌&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dance</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;跳舞&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    sing()</span><br><span class="line">    dance()</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">唱歌</span><br><span class="line">唱歌</span><br><span class="line">唱歌</span><br><span class="line">跳舞</span><br><span class="line">跳舞</span><br><span class="line">跳舞</span><br></pre></td></tr></table></figure>

<p>这个程序需要执行6次，花费3秒时间。现在对程序进行改写，让其1.5秒内执行完毕。</p>
<p>对<code>main</code>函数进行修改，并导入：<code>import multiprocessing </code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 创建子进程</span></span><br><span class="line">    sing_process = multiprocessing.Process(target=sing)</span><br><span class="line">    dance_process = multiprocessing.Process(target=dance)</span><br><span class="line">    <span class="comment"># 启动进程</span></span><br><span class="line">    sing_process.start()</span><br><span class="line">    dance_process.start()</span><br></pre></td></tr></table></figure>

<p>程序只执行三次，每一次都是唱歌和跳舞同时执行，用时1.5秒。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">跳舞</span><br><span class="line">唱歌</span><br><span class="line">跳舞</span><br><span class="line">唱歌</span><br><span class="line">跳舞</span><br><span class="line">唱歌</span><br></pre></td></tr></table></figure>

<h2 id="4-进程执行带有参数的任务"><a href="#4-进程执行带有参数的任务" class="headerlink" title="4 进程执行带有参数的任务"></a>4 进程执行带有参数的任务</h2><h3 id="4-1-参数"><a href="#4-1-参数" class="headerlink" title="4.1 参数"></a>4.1 参数</h3><table>
<thead>
<tr>
<th>参数名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>args</code></td>
<td>以元组的方式给执行任务传参</td>
</tr>
<tr>
<td><code>kwargs</code></td>
<td>以字典方式给执行任务传参</td>
</tr>
</tbody></table>
<h3 id="4-2-args参数的使用"><a href="#4-2-args参数的使用" class="headerlink" title="4.2 args参数的使用"></a>4.2 <code>args</code>参数的使用</h3><p>元组方式传参：元组方式传参一定要和参数的顺序保持一致。</p>
<h3 id="4-3-kwargs参数的使用"><a href="#4-3-kwargs参数的使用" class="headerlink" title="4.3 kwargs参数的使用"></a>4.3 kwargs参数的使用</h3><p>字典方式传参：字典方式传参字典中的<code>key</code>一定要和参数名保持一致。</p>
<p>改写例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sing</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;唱歌&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dance</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;跳舞&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 创建子进程</span></span><br><span class="line">    <span class="comment"># args:表示以元组的方式给函数传参,元组的元素顺序必须和函数参数的顺序一致</span></span><br><span class="line">    sing_process = multiprocessing.Process(target=sing, args=(<span class="number">3</span>,))</span><br><span class="line">    <span class="comment"># kwargs:表示以字典的方式给函数传参，字典的键对应函数的形参，值对应实参</span></span><br><span class="line">    dance_process = multiprocessing.Process(target=dance, kwargs=&#123;<span class="string">&#x27;num&#x27;</span>: <span class="number">2</span>&#125;)</span><br><span class="line">    <span class="comment"># 启动进程</span></span><br><span class="line">    sing_process.start()</span><br><span class="line">    dance_process.start()</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">唱歌</span><br><span class="line">跳舞</span><br><span class="line">唱歌</span><br><span class="line">跳舞</span><br><span class="line">唱歌</span><br></pre></td></tr></table></figure>

<h2 id="5-获取进程编号"><a href="#5-获取进程编号" class="headerlink" title="5 获取进程编号"></a>5 获取进程编号</h2><p>进程编号的作用：当程序中进程的数量越来越多时，如果没有办法区分主进程和子进程还有不同的子进程，那么就无法进行有效的进程管理，为了方便管理实际上每个进程都是有自己编号的。</p>
<h3 id="5-1-获取进程编号的两种方式"><a href="#5-1-获取进程编号的两种方式" class="headerlink" title="5.1 获取进程编号的两种方式"></a>5.1 获取进程编号的两种方式</h3><p><code>import os</code></p>
<ol>
<li><p>获取当前进程编号</p>
<p> <code>os.getpid()</code></p>
</li>
<li><p>获取当前父进程编号</p>
<p> <code>os.getppid()</code></p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sing</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;唱歌进程的pid：&#x27;</span>, os.getpid())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;唱歌进程的ppid：&#x27;</span>, os.getppid())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;唱歌&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dance</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;跳舞进程的pid：&#x27;</span>, os.getpid())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;跳舞进程的ppid：&#x27;</span>, os.getppid())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;跳舞&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主进程，也是两个子进程（唱歌、跳舞）的父进程</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;主进程的pid为：&#x27;</span>, os.getpid())</span><br><span class="line">    <span class="comment"># 创建子进程对象并指定执行的任务名：函数名</span></span><br><span class="line">    sing_process = multiprocessing.Process(target=sing, args=(<span class="number">3</span>,))</span><br><span class="line">    dance_process = multiprocessing.Process(target=dance, kwargs=&#123;<span class="string">&#x27;num&#x27;</span>: <span class="number">2</span>&#125;)</span><br><span class="line">    <span class="comment"># 启动子进程并执行任务</span></span><br><span class="line">    sing_process.start()</span><br><span class="line">    dance_process.start()</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">主进程的pid为： 12988</span><br><span class="line">唱歌进程的pid： 16980</span><br><span class="line">跳舞进程的pid： 12912</span><br><span class="line">唱歌进程的ppid： 12988</span><br><span class="line">跳舞进程的ppid： 12988</span><br><span class="line">跳舞</span><br><span class="line">唱歌</span><br><span class="line">跳舞</span><br><span class="line">唱歌</span><br><span class="line">唱歌</span><br></pre></td></tr></table></figure>

<h2 id="6-进程的注意点"><a href="#6-进程的注意点" class="headerlink" title="6 进程的注意点"></a>6 进程的注意点</h2><h3 id="6-1-主进程会等待所有的子进程执行结束再结束"><a href="#6-1-主进程会等待所有的子进程执行结束再结束" class="headerlink" title="6.1 主进程会等待所有的子进程执行结束再结束"></a>6.1 主进程会等待所有的子进程执行结束再结束</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">work</span>():</span><br><span class="line">    <span class="comment"># 子进程会工作2秒</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;工作中···········&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 创建子进程</span></span><br><span class="line">    work_process = multiprocessing.Process(target=work)</span><br><span class="line">    work_process.start()</span><br><span class="line">    <span class="comment"># 让主进程等待一秒钟</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;主进程执行完毕&#x27;</span>)</span><br><span class="line">    <span class="comment"># 主进程会等待所有的子进程执行完成之后程序再退出</span></span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">工作中···········</span><br><span class="line">工作中···········</span><br><span class="line">工作中···········</span><br><span class="line">工作中···········</span><br><span class="line">工作中···········</span><br><span class="line">主进程执行完毕</span><br><span class="line">工作中···········</span><br><span class="line">工作中···········</span><br><span class="line">工作中···········</span><br><span class="line">工作中···········</span><br><span class="line">工作中···········</span><br></pre></td></tr></table></figure>

<p>但是结果并不是所有的子进程结束之后才会执行主进程，因此需要进行更改。</p>
<h3 id="6-2-设置守护主进程"><a href="#6-2-设置守护主进程" class="headerlink" title="6.2 设置守护主进程"></a>6.2 设置守护主进程</h3><p>改写上面的代码：在15行子进程启动前加入以下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 子进程会去守护主进程——主进程结束，子进程自动销毁，不再执行子进程代码</span></span><br><span class="line">work_process.daemon = <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<p>再次执行，输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">工作中···········</span><br><span class="line">工作中···········</span><br><span class="line">工作中···········</span><br><span class="line">工作中···········</span><br><span class="line">工作中···········</span><br><span class="line">主进程执行完毕</span><br></pre></td></tr></table></figure>

<h3 id="6-3-知识要点"><a href="#6-3-知识要点" class="headerlink" title="6.3 知识要点"></a>6.3 知识要点</h3><p>为了保证子进程能够正常的运行，主进程会等所有的子进程执行完成以后再销毁，设置守护主进程的目的是主<strong>进程退出子进程销毁</strong>，不让主进程再等待子进程去执行。</p>
<p>设置守护主进程方式：<code>子进程对象.daemon = True</code></p>
<h2 id="7-线程"><a href="#7-线程" class="headerlink" title="7 线程"></a>7 线程</h2><h3 id="7-1-实现多任务的另一种形式"><a href="#7-1-实现多任务的另一种形式" class="headerlink" title="7.1 实现多任务的另一种形式"></a>7.1 实现多任务的另一种形式</h3><p>在Python中，想要实现多任务还可以使用多线程来完成。</p>
<h3 id="7-2-为什么使用多线程？"><a href="#7-2-为什么使用多线程？" class="headerlink" title="7.2 为什么使用多线程？"></a>7.2 为什么使用多线程？</h3><p>进程是<strong>分配资源的最小单位</strong>，一旦创建一个进程就会分配一定的资源，就像跟两个人聊QQ就需要打开两个QQ软件一样是比较浪费资源的。<br>线程是<strong>程序执行的最小单位</strong>，实际上进程只负责分配资源，而利用这些资源执行程序的是线程，也就说<strong>进程是线程的容器</strong>，一个进程中最少有一个线程来负责执行程序。同时线程自己不拥有系统资源，只需要一点儿在运行中必不可少的资源，但它可与<strong>同属一个进程的其它线程共享进程所拥有的全部资源</strong>。这就像通过一个QQ软件（一个进程）打开两个窗口（两个线程）跟两个人聊天一样，实现多任务的同时也节省了资源。</p>
<h3 id="7-3-多线程的作用"><a href="#7-3-多线程的作用" class="headerlink" title="7.3 多线程的作用"></a>7.3 多线程的作用</h3><img src="/2022/03/10/15-10-%E5%86%85%E7%BD%AE%E5%BA%93-%E5%A4%9A%E7%BA%BF%E7%A8%8Bthreding/image-20220310150046074.png" alt="image-20220310150046074" style="zoom: 33%;">

<h2 id="8-多线程完成多任务"><a href="#8-多线程完成多任务" class="headerlink" title="8 多线程完成多任务"></a>8 多线程完成多任务</h2><h3 id="8-1-线程的创建步骤"><a href="#8-1-线程的创建步骤" class="headerlink" title="8.1 线程的创建步骤"></a>8.1 线程的创建步骤</h3><ol>
<li><p>导入线程包</p>
<p> <code>import threading</code></p>
</li>
<li><p>通过线程类创建进程对象</p>
<p> <code>线程对象 = threading.Thread(target = 任务名)</code></p>
</li>
<li><p>启动线程执行任务</p>
<p> <code>线程对象.start()</code></p>
</li>
</ol>
<h3 id="8-2-通过线程类创建线程对象"><a href="#8-2-通过线程类创建线程对象" class="headerlink" title="8.2 通过线程类创建线程对象"></a>8.2 通过线程类创建线程对象</h3><table>
<thead>
<tr>
<th>参数名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>target</td>
<td>执行的目标任务名，这里指的是函数名（方法名）</td>
</tr>
<tr>
<td>name</td>
<td>线程名，一般不用设置</td>
</tr>
<tr>
<td>group</td>
<td>线程组，目前只能使用None</td>
</tr>
</tbody></table>
<h3 id="8-3-线程创建与启动的代码"><a href="#8-3-线程创建与启动的代码" class="headerlink" title="8.3 线程创建与启动的代码"></a>8.3 线程创建与启动的代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sing</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;唱歌&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dance</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;跳舞&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建子线程</span></span><br><span class="line">    sing_thread = threading.Thread(target=sing)</span><br><span class="line">    dance_thread = threading.Thread(target=dance)</span><br><span class="line">    <span class="comment"># 启动线程</span></span><br><span class="line">    sing_thread.start()</span><br><span class="line">    dance_thread.start()</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">唱歌</span><br><span class="line">跳舞</span><br><span class="line">跳舞</span><br><span class="line">唱歌</span><br><span class="line">跳舞</span><br><span class="line">唱歌</span><br></pre></td></tr></table></figure>

<p>程序只执行三次，每一次都是唱歌和跳舞同时执行。</p>
<h2 id="9-线程执行带有参数的任务"><a href="#9-线程执行带有参数的任务" class="headerlink" title="9 线程执行带有参数的任务"></a>9 线程执行带有参数的任务</h2><h3 id="9-1-参数"><a href="#9-1-参数" class="headerlink" title="9.1 参数"></a>9.1 参数</h3><table>
<thead>
<tr>
<th>参数名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>args</code></td>
<td>以元组的方式给执行任务传参</td>
</tr>
<tr>
<td><code>kwargs</code></td>
<td>以字典方式给执行任务传参</td>
</tr>
</tbody></table>
<h3 id="9-2-args参数的使用"><a href="#9-2-args参数的使用" class="headerlink" title="9.2 args参数的使用"></a>9.2 <code>args</code>参数的使用</h3><p>元组方式传参：元组方式传参一定要和参数的顺序保持一致。</p>
<h3 id="9-3-kwargs参数的使用"><a href="#9-3-kwargs参数的使用" class="headerlink" title="9.3 kwargs参数的使用"></a>9.3 kwargs参数的使用</h3><p>字典方式传参：字典方式传参字典中的<code>key</code>一定要和参数名保持一致。</p>
<h2 id="10-主线程和子线程的结束顺序"><a href="#10-主线程和子线程的结束顺序" class="headerlink" title="10 主线程和子线程的结束顺序"></a>10 主线程和子线程的结束顺序</h2><p>对比进程：主线程会等待所有的子线程执行结束后主线程再结束。</p>
<h3 id="10-1-设置守护主线程"><a href="#10-1-设置守护主线程" class="headerlink" title="10.1 设置守护主线程"></a>10.1 设置守护主线程</h3><p>要想主线程不等待子线程执行完成可以设置守护主线程。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">work</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;工作············&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建子线程</span></span><br><span class="line">    work_thread = threading.Thread(target=work, daemon=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 启动线程</span></span><br><span class="line">    work_thread.start()</span><br><span class="line">    <span class="comment"># 主线程等待一秒后，结束</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;主线程结束了&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">工作············</span><br><span class="line">工作············</span><br><span class="line">工作············</span><br><span class="line">工作············</span><br><span class="line">工作············</span><br><span class="line">主线程结束了</span><br></pre></td></tr></table></figure>

<h2 id="11-线程间的执行顺序"><a href="#11-线程间的执行顺序" class="headerlink" title="11 线程间的执行顺序"></a>11 线程间的执行顺序</h2><p>线程之间执行是无序的，是由<strong>CPU调度决定某个线程先执行</strong>的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">work</span>():</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># current_thread()：获取当前线程的线程对象</span></span><br><span class="line">    thread = threading.current_thread()</span><br><span class="line">    <span class="built_in">print</span>(thread)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        sub_thread = threading.Thread(target=work)</span><br><span class="line">        sub_thread.start()</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Thread(Thread-5 (work), started 24344)&gt;&lt;Thread(Thread-2 (work), started 1452)&gt;</span><br><span class="line">&lt;Thread(Thread-3 (work), started 19044)&gt;</span><br><span class="line">&lt;Thread(Thread-4 (work), started 19784)&gt;</span><br><span class="line"></span><br><span class="line">&lt;Thread(Thread-1 (work), started 5236)&gt;</span><br></pre></td></tr></table></figure>

<h2 id="12-进程和线程对比"><a href="#12-进程和线程对比" class="headerlink" title="12 进程和线程对比"></a>12 进程和线程对比</h2><h3 id="12-1-关系对比"><a href="#12-1-关系对比" class="headerlink" title="12.1 关系对比"></a>12.1 关系对比</h3><ul>
<li>线程是依附在进程里面的，没有进程就没有线程</li>
<li>一个进程默认提供一条线程，进程可以创建多个线程</li>
</ul>
<h3 id="12-2-区别对此"><a href="#12-2-区别对此" class="headerlink" title="12.2 区别对此"></a>12.2 区别对此</h3><ul>
<li>创建进程的资源开销要比创建线程的资源开销要大</li>
<li>进程是操作系统资源分配的基本单位，线程是CPU调度的基本单位</li>
<li>线程不能够独立执行，必须依存在进程中</li>
</ul>
<h3 id="12-3-优缺点对比"><a href="#12-3-优缺点对比" class="headerlink" title="12.3 优缺点对比"></a>12.3 优缺点对比</h3><ul>
<li>进程优缺点：<ul>
<li>优点：可以用多核</li>
<li>缺点：资源开销大</li>
</ul>
</li>
<li>线程优缺点：<ul>
<li>优点：资源开销小</li>
<li>缺点：不可用多核</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>测试学习</category>
      </categories>
      <tags>
        <tag>python编程语言</tag>
      </tags>
  </entry>
  <entry>
    <title>14.8 Python内置装饰器</title>
    <url>/2022/02/28/14-8-Python%E5%86%85%E7%BD%AE%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
    <content><![CDATA[<h1 id="类属性和类方法"><a href="#类属性和类方法" class="headerlink" title="类属性和类方法"></a>类属性和类方法</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul>
<li>类的结构</li>
<li>类属性和实例属性</li>
<li>类方法和静态方法</li>
</ul>
<h2 id="1-类的结构"><a href="#1-类的结构" class="headerlink" title="1. 类的结构"></a>1. 类的结构</h2><h3 id="1-1-术语-——-实例"><a href="#1-1-术语-——-实例" class="headerlink" title="1.1 术语 —— 实例"></a>1.1 术语 —— 实例</h3><ol>
<li><p>使用面向对象开发，<strong>第 1 步</strong> 是设计 <strong>类</strong></p>
</li>
<li><p>使用<code>类名()</code>创建对象，<strong>创建对象</strong>的动作有两步：</p>
<ol>
<li>在内存中为对象 <strong>分配空间</strong></li>
<li>调用初始化方法 <code>__init__</code> 为 <strong>对象初始化</strong></li>
</ol>
</li>
<li><p>对象创建后，<strong>内存</strong> 中就有了一个对象的 <strong>实实在在</strong> 的存在 —— <strong>实例</strong></p>
 <img src="/2022/02/28/14-8-Python%E5%86%85%E7%BD%AE%E8%A3%85%E9%A5%B0%E5%99%A8/017_类的结构示意图I-164603666341320.png" alt="img" style="zoom:50%;">

<p> 因此，通常也会把：</p>
<ol>
<li>创建出来的 <strong>对象</strong> 叫做 <strong>类</strong> 的 <strong>实例</strong></li>
<li>创建对象的 <strong>动作</strong> 叫做 <strong>实例化</strong></li>
<li><strong>对象的属性</strong> 叫做 <strong>实例属性</strong></li>
<li><strong>对象调用的方法</strong> 叫做 <strong>实例方法</strong></li>
</ol>
<p> 在程序执行时：</p>
<ol>
<li>对象各自拥有自己的 <strong>实例属性</strong></li>
<li>调用对象方法，可以通过 <code>self.</code><ul>
<li>访问自己的属性</li>
<li>调用自己的方法</li>
</ul>
</li>
</ol>
<p> <strong>结论</strong></p>
<ul>
<li><strong>每一个对象</strong> 都有自己 <strong>独立的内存空间</strong>，<strong>保存各自不同的属性</strong></li>
<li><strong>多个对象的方法</strong>，<strong>在内存中只有一份</strong>，在调用方法时，<strong>需要把对象的引用</strong>(self) 传递到方法内部</li>
</ul>
</li>
</ol>
<h3 id="1-2-类是一个特殊的对象"><a href="#1-2-类是一个特殊的对象" class="headerlink" title="1.2 类是一个特殊的对象"></a>1.2 类是一个特殊的对象</h3><blockquote>
<p><code>Python</code> 中 <strong>一切皆对象</strong>：</p>
<ul>
<li><code>class AAA:</code> 定义的类属于 <strong>类对象</strong></li>
<li><code>obj1 = AAA()</code> 属于 <strong>实例对象</strong></li>
</ul>
</blockquote>
<ul>
<li>在程序运行时，<strong>类</strong> 同样 <strong>会被加载到内存</strong></li>
<li>在 <code>Python</code> 中，<strong>类</strong> 是一个特殊的对象 —— <strong>类对象</strong></li>
<li>在程序运行时，<strong>类对象</strong> 在内存中 <strong>只有一份</strong>，使用 <strong>一个类</strong> 可以创建出 <strong>很多个对象实例</strong></li>
<li>除了封装<strong>实例</strong>的<strong>属性</strong>和方法外，<strong>类对象</strong>还可以拥有自己的<strong>属性</strong>和<strong>方法</strong><ol>
<li><strong>类属性</strong></li>
<li><strong>类方法</strong></li>
</ol>
</li>
<li>通过 <strong>类名.</strong> 的方式可以 <strong>访问类的属性</strong> 或者 <strong>调用类的方法</strong></li>
</ul>
<p>​    <img src="/2022/02/28/14-8-Python%E5%86%85%E7%BD%AE%E8%A3%85%E9%A5%B0%E5%99%A8/017_类的结构示意图II-164604252098122.png" alt="img" style="zoom:50%;"></p>
<h2 id="2-类属性和实例属性"><a href="#2-类属性和实例属性" class="headerlink" title="2. 类属性和实例属性"></a>2. 类属性和实例属性</h2><h3 id="2-1-概念和使用"><a href="#2-1-概念和使用" class="headerlink" title="2.1 概念和使用"></a>2.1 概念和使用</h3><ul>
<li><strong>类属性</strong> 就是给 <strong>类对象</strong> 中定义的 <strong>属性</strong></li>
<li>通常用来记录 <strong>与这个类相关</strong> 的特征</li>
<li><strong>类属性</strong> <strong>不会用于</strong>记录 <strong>具体对象的特征</strong></li>
</ul>
<p><strong>示例需求</strong></p>
<ul>
<li>定义一个 <strong>工具类</strong></li>
<li>每件工具都有自己的 <code>name</code></li>
<li><strong>需求</strong> —— 知道使用这个类，创建了多少个工具对象？</li>
</ul>
<img src="/2022/02/28/14-8-Python%E5%86%85%E7%BD%AE%E8%A3%85%E9%A5%B0%E5%99%A8/018_类属性案例I.png" alt="img" style="zoom:50%;">

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Tool</span>:</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;工具的名称是：%s&#x27;</span> % name)</span><br><span class="line">        Tool.count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tool1 = Tool(<span class="string">&#x27;斧子&#x27;</span>)</span><br><span class="line">tool2 = Tool(<span class="string">&#x27;锤子&#x27;</span>)</span><br><span class="line">tool3 = Tool(<span class="string">&#x27;锯子&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;工具类一共有<span class="subst">&#123;Tool.count&#125;</span>个&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">工具的名称是：斧子</span><br><span class="line">工具的名称是：锤子</span><br><span class="line">工具的名称是：锯子</span><br><span class="line">工具类一共有<span class="number">3</span>个</span><br></pre></td></tr></table></figure>

<p>如果打印输出改为：<code>print(f&#39;工具类一共有&#123;tool3.count&#125;个&#39;)</code>，则结果仍然不变。</p>
<h3 id="2-2-属性的获取机制（科普）"><a href="#2-2-属性的获取机制（科普）" class="headerlink" title="2.2 属性的获取机制（科普）"></a>2.2 属性的获取机制（科普）</h3><ul>
<li><p>在 <code>Python</code> 中 <strong>属性的获取</strong> 存在一个 <strong>向上查找机制</strong></p>
  <img src="/2022/02/28/14-8-Python%E5%86%85%E7%BD%AE%E8%A3%85%E9%A5%B0%E5%99%A8/019_通过对象访问类属性.png" alt="img" style="zoom: 50%;">

<ul>
<li>因此，要访问类属性有两种方式：<ol>
<li><strong>类名.类属性</strong></li>
<li><strong>对象.类属性</strong> （不推荐）</li>
</ol>
</li>
</ul>
<p>  <strong>注意</strong></p>
<ul>
<li>如果使用 <code>对象.类属性 = 值</code> 赋值语句，只会 <strong>给对象添加一个属性</strong>，而不会影响到 <strong>类属性的值</strong></li>
</ul>
<p>  对于上文的例子，如果添加：<code>tool3.count = 99</code>，则输出结果变为：<code>工具类一共有99个</code>，而类属性的<code>count</code>仍然为3。</p>
</li>
</ul>
<h2 id="3-类方法和静态方法"><a href="#3-类方法和静态方法" class="headerlink" title="3. 类方法和静态方法"></a>3. 类方法和静态方法</h2><h3 id="3-1-类方法"><a href="#3-1-类方法" class="headerlink" title="3.1 类方法"></a>3.1 类方法</h3><ul>
<li><strong>类属性</strong>就是针对<strong>类对象</strong>定义的属性<ul>
<li>使用 <strong>赋值语句</strong> 在 <code>class</code> 关键字下方可以定义 <strong>类属性</strong></li>
<li><strong>类属性</strong> 用于记录 <strong>与这个类相关</strong> 的特征</li>
</ul>
</li>
<li><strong>类方法</strong>就是针对<strong>类对象</strong>定义的方法<ul>
<li>在 <strong>类方法</strong> 内部可以直接访问 <strong>类属性</strong> 或者调用其他的 <strong>类方法</strong></li>
</ul>
</li>
</ul>
<p><strong>语法如下</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">类方法名</span>(<span class="params">cls</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>类方法需要用 <strong>修饰器</strong> <code>@classmethod</code> 来标识，<strong>告诉解释器这是一个类方法</strong></p>
</li>
<li><p><strong>类方法</strong>的<strong>第一个参数</strong>应该是<code>cls</code></p>
<ul>
<li>由 <strong>哪一个类</strong> 调用的方法，方法内的 <code>cls</code> 就是 <strong>哪一个类的引用</strong></li>
<li>这个参数和 <strong>实例方法</strong> 的第一个参数是 <code>self</code> 类似</li>
<li><strong>提示</strong> 使用其他名称也可以，不过习惯使用 <code>cls</code></li>
</ul>
</li>
<li><p>通过 <strong>类名.</strong> 调用 <strong>类方法</strong>，<strong>调用方法时</strong>，不需要传递 <code>cls</code> 参数</p>
</li>
<li><p>在方法内部</p>
<ul>
<li>可以通过 <code>cls.</code> <strong>访问类的属性</strong></li>
<li>也可以通过 <code>cls.</code> <strong>调用其他的类方法</strong></li>
<li><strong>类方法内</strong>，不可以直接调用<strong>实例方法</strong>及<strong>实例变量</strong></li>
</ul>
</li>
<li><p>在调用时，<strong>类</strong>和实例都可以直接调用<strong>类方法</strong></p>
</li>
</ul>
<p><strong>示例需求</strong></p>
<ul>
<li><p>定义一个 <strong>工具类</strong></p>
</li>
<li><p>每件工具都有自己的 <code>name</code></p>
</li>
<li><p><strong>需求</strong> —— 在 <strong>类</strong> 封装一个 <code>show_tool_count</code> 的类方法，输出使用当前这个类，创建的对象个数</p>
  <img src="/2022/02/28/14-8-Python%E5%86%85%E7%BD%AE%E8%A3%85%E9%A5%B0%E5%99%A8/020_类方法案例.png" alt="img" style="zoom:50%;"></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Tool</span>:</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_tool_count</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;工具类的个数是：%d个&#x27;</span> % cls.count)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;工具的名称是：%s&#x27;</span> % name)</span><br><span class="line">        Tool.count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tool1 = Tool(<span class="string">&#x27;斧子&#x27;</span>)</span><br><span class="line">tool2 = Tool(<span class="string">&#x27;锤子&#x27;</span>)</span><br><span class="line">tool3 = Tool(<span class="string">&#x27;锯子&#x27;</span>)</span><br><span class="line">Tool.show_tool_count()</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">工具的名称是：斧子</span><br><span class="line">工具的名称是：锤子</span><br><span class="line">工具的名称是：锯子</span><br><span class="line">工具类的个数是：3个</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在类方法内部，可以直接使用 <code>cls</code> 访问 <strong>类属性</strong> 或者 <strong>调用类方法</strong></p>
</blockquote>
<h3 id="3-2-静态方法"><a href="#3-2-静态方法" class="headerlink" title="3.2 静态方法"></a>3.2 静态方法</h3><ul>
<li>在开发时，如果需要在 <strong>类</strong> 中封装一个方法，这个方法：<ul>
<li>既 <strong>不需要</strong> 访问 <strong>实例属性</strong> 或者调用 <strong>实例方法</strong></li>
<li>也 <strong>不需要</strong> 访问 <strong>类属性</strong> 或者调用 <strong>类方法</strong></li>
</ul>
</li>
<li>这个时候，可以把这个方法封装成一个 <strong>静态方法</strong></li>
</ul>
<p><strong>语法如下</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">静态方法名</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>静态方法</strong> 需要用 <strong>修饰器</strong> <code>@staticmethod</code> 来标识，<strong>告诉解释器这是一个静态方法</strong></li>
<li>通过 <strong><code>类名.</code></strong> 调用 <strong>静态方法</strong>（或者通过**<code>实例.方法名</code>**进行调用）</li>
<li>不需要<strong>实例化</strong>即可进行<strong>调用静态方法</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>:</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;跑跑跳跳&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Dog.run()</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">跑跑跳跳</span><br></pre></td></tr></table></figure>

<h3 id="3-3-方法综合案例"><a href="#3-3-方法综合案例" class="headerlink" title="3.3 方法综合案例"></a>3.3 方法综合案例</h3><p><strong>需求</strong></p>
<ul>
<li>设计一个 <code>Game</code> 类</li>
<li>属性：<ul>
<li>定义一个 <strong>类属性</strong> <code>top_score</code> 记录游戏的 <strong>历史最高分</strong></li>
<li>定义一个 <strong>实例属性</strong> <code>player_name</code> 记录 <strong>当前游戏的玩家姓名</strong></li>
</ul>
</li>
<li>方法：<ul>
<li><strong>静态方法</strong> <code>show_help</code> 显示游戏帮助信息</li>
<li><strong>类方法</strong> <code>show_top_score</code> 显示历史最高分</li>
<li><strong>实例方法</strong> <code>start_game</code> 开始当前玩家的游戏</li>
</ul>
</li>
<li>主程序步骤<ul>
<li>查看帮助信息</li>
<li>查看历史最高分</li>
<li>创建游戏对象，开始游戏</li>
</ul>
</li>
</ul>
<img src="/2022/02/28/14-8-Python%E5%86%85%E7%BD%AE%E8%A3%85%E9%A5%B0%E5%99%A8/021_方法综合案例.png" alt="img" style="zoom:50%;">

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Game</span>:</span><br><span class="line">    top_score = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, player_name</span>):</span><br><span class="line">        self.player_name = player_name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_help</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;本游戏很好玩，欢迎来玩&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_top_score</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;历史最高分是：<span class="subst">&#123;cls.top_score&#125;</span>！&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">start_game</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;玩家：<span class="subst">&#123;self.player_name&#125;</span>，现在要开始游戏了哦~&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Game.show_help()</span><br><span class="line">Game.show_top_score()</span><br><span class="line">xm = Game(<span class="string">&#x27;小明&#x27;</span>)</span><br><span class="line">xm.start_game()</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">本游戏很好玩，欢迎来玩</span><br><span class="line">历史最高分是：<span class="number">1000</span>！</span><br><span class="line">玩家：小明，现在要开始游戏了哦~</span><br></pre></td></tr></table></figure>

<h4 id="案例小结"><a href="#案例小结" class="headerlink" title="案例小结"></a>案例小结</h4><ol>
<li>实例方法—— 方法内部需要访问<strong>实例属性</strong><ul>
<li><strong>实例方法</strong> 内部可以使用 <strong>类名.</strong> 访问类属性</li>
</ul>
</li>
<li><strong>类方法</strong> —— 方法内部 <strong>只</strong> 需要访问 <strong>类属性</strong></li>
<li><strong>静态方法</strong> —— 方法内部，不需要访问 <strong>实例属性</strong> 和 <strong>类属性</strong></li>
</ol>
<p><strong>提问</strong></p>
<p>如果方法内部 即需要访问 <strong>实例属性</strong>，又需要访问 <strong>类属性</strong>，应该定义成什么方法？</p>
<p><strong>答案</strong></p>
<ul>
<li>应该定义 <strong>实例方法</strong></li>
<li>因为，<strong>类只有一个</strong>，在 <strong>实例方法</strong> 内部可以使用 <strong>类名.</strong> 访问类属性</li>
</ul>
<h1 id="普通方法、类方法、静态方法对比"><a href="#普通方法、类方法、静态方法对比" class="headerlink" title="普通方法、类方法、静态方法对比"></a>普通方法、类方法、静态方法对比</h1><table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">定义</th>
<th align="center">调用</th>
<th align="center">关键字</th>
<th align="center">使用场景</th>
<th align="center">代表</th>
</tr>
</thead>
<tbody><tr>
<td align="center">普通方法</td>
<td align="center">至少需要一个参数<code>self</code></td>
<td align="center"><code>实例名.方法名()</code></td>
<td align="center">无</td>
<td align="center">方法内部涉及到实例对象属性的操作</td>
<td align="center">第一个参数需要是<code>self</code>，它表示一个具体的实例本身。</td>
</tr>
<tr>
<td align="center">类方法</td>
<td align="center">至少需要一个<code>cls</code>参数</td>
<td align="center"><code>类名.方法名()</code>或者<code>实例名.方法名()</code></td>
<td align="center">@classmethod</td>
<td align="center">如果需要对类属性，即静态变量进行限制性操作</td>
<td align="center">它的第一个参数是<code>cls</code>，它表示这个类本身</td>
</tr>
<tr>
<td align="center">静态方法</td>
<td align="center">无默认参数</td>
<td align="center"><code>类名.方法名()</code>或者<code>实例名.方法名()</code></td>
<td align="center">@staticmethod</td>
<td align="center">无需类或实例参与</td>
<td align="center">可以无视这个<code>self</code>，而将这个方法当成一个普通的函数使用</td>
</tr>
</tbody></table>
<p>例1：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DateFormat</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, year, month, day</span>):</span><br><span class="line">        self.year = year</span><br><span class="line">        self.month = month</span><br><span class="line">        self.day = day</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">out_date</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;输入的时间为<span class="subst">&#123;self.year&#125;</span>年，<span class="subst">&#123;self.month&#125;</span>月，<span class="subst">&#123;self.day&#125;</span>日&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">json_format</span>(<span class="params">cls, js_data</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        输入一个字典格式的数据信息，返回一个对象</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 使用[key]访问键对应的值</span></span><br><span class="line">        <span class="comment"># result储存键对应的值，result是元组类型的</span></span><br><span class="line">        result = js_data[<span class="string">&#x27;year&#x27;</span>], js_data[<span class="string">&#x27;month&#x27;</span>], js_data[<span class="string">&#x27;day&#x27;</span>]</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">type</span>(result))</span><br><span class="line">        <span class="keyword">return</span> cls(result[<span class="number">0</span>], result[<span class="number">1</span>], result[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">json_data = &#123;<span class="string">&#x27;year&#x27;</span>: <span class="number">2021</span>, <span class="string">&#x27;month&#x27;</span>: <span class="number">12</span>, <span class="string">&#x27;day&#x27;</span>: <span class="number">7</span>&#125;</span><br><span class="line"><span class="comment"># 使用json格式化，生成想要的日期格式，返回一个DataFormat的实例</span></span><br><span class="line">demo = DateFormat.json_format(json_data)</span><br><span class="line"><span class="comment"># &lt;class &#x27;__main__.DateFormat&#x27;&gt; ----&gt;  指的是类DateFormat的一个实例</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(demo))</span><br><span class="line">demo.out_date()</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;tuple&#x27;</span>&gt;</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;__main__.DateFormat&#x27;</span>&gt;</span><br><span class="line">输入的时间为<span class="number">2021</span>年，<span class="number">12</span>月，<span class="number">7</span>日</span><br></pre></td></tr></table></figure>

<p>自己改写：因为我想试试用列表返回值（路走远了）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DateFormat</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, year, month, day</span>):</span><br><span class="line">        self.year = year</span><br><span class="line">        self.month = month</span><br><span class="line">        self.day = day</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">out_date</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;输入的时间为<span class="subst">&#123;self.year&#125;</span>年，<span class="subst">&#123;self.month&#125;</span>月，<span class="subst">&#123;self.day&#125;</span>日&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">json_format</span>(<span class="params">cls, js_data</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        输入一个字典格式的数据信息，返回一个d&#x27;x</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 使用[key]访问键对应的值</span></span><br><span class="line">        year, month, day = js_data[<span class="string">&#x27;year&#x27;</span>], js_data[<span class="string">&#x27;month&#x27;</span>], js_data[<span class="string">&#x27;day&#x27;</span>]</span><br><span class="line">        <span class="comment"># 把得到的year, month, day组合成列表</span></span><br><span class="line">        result = [year, month, day]</span><br><span class="line">        <span class="built_in">print</span>(result)</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">type</span>(result))</span><br><span class="line">        <span class="comment"># 列表索引值的0，1，2位分别对应year, month, day</span></span><br><span class="line">        <span class="keyword">return</span> cls(result[<span class="number">0</span>], result[<span class="number">1</span>], result[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">json_data = &#123;<span class="string">&#x27;year&#x27;</span>: <span class="number">2021</span>, <span class="string">&#x27;month&#x27;</span>: <span class="number">12</span>, <span class="string">&#x27;day&#x27;</span>: <span class="number">7</span>&#125;</span><br><span class="line"><span class="comment"># 使用json格式化，生成想要的日期格式，返回一个DataFormat的实例</span></span><br><span class="line">demo = DateFormat.json_format(json_data)</span><br><span class="line"><span class="comment"># &lt;class &#x27;__main__.DateFormat&#x27;&gt; ----&gt;  指的是类DateFormat的一个实例</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(demo))</span><br><span class="line">demo.out_date()</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">2021</span>, <span class="number">12</span>, <span class="number">7</span>]</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;list&#x27;</span>&gt;</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;__main__.DateFormat&#x27;</span>&gt;</span><br><span class="line">输入的时间为<span class="number">2021</span>年，<span class="number">12</span>月，<span class="number">7</span>日</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>测试学习</category>
      </categories>
      <tags>
        <tag>python编程语言</tag>
      </tags>
  </entry>
  <entry>
    <title>15.3 内置库os</title>
    <url>/2022/03/06/15-3-%E5%86%85%E7%BD%AE%E5%BA%93os/</url>
    <content><![CDATA[<h1 id="1-内置库os"><a href="#1-内置库os" class="headerlink" title="1 内置库os"></a>1 内置库os</h1><h2 id="1-1-os概述"><a href="#1-1-os概述" class="headerlink" title="1.1 os概述"></a>1.1 os概述</h2><ul>
<li>os: Operating System</li>
<li>os 模块的常用功能</li>
<li>跨平台的差异</li>
</ul>
<h2 id="1-2-os-使用"><a href="#1-2-os-使用" class="headerlink" title="1.2 os 使用"></a>1.2 os 使用</h2><ul>
<li>导入 os 模块</li>
<li>查看 os 模块使用文档<ul>
<li>help(os)</li>
<li>dir(os)</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看os模块说明文档</span></span><br><span class="line"><span class="built_in">help</span>(os)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看os模块的属性和方法</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(os))</span><br></pre></td></tr></table></figure>

<h2 id="1-3-os常用方法"><a href="#1-3-os常用方法" class="headerlink" title="1.3 os常用方法"></a>1.3 os常用方法</h2><h3 id="1-3-1-系统相关"><a href="#1-3-1-系统相关" class="headerlink" title="1.3.1 系统相关"></a>1.3.1 系统相关</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># os.name：获取系统名称 nt代表window，posix代表linux</span></span><br><span class="line"><span class="built_in">print</span>(os.name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># os.environ：获取系统环境变量信息</span></span><br><span class="line"><span class="built_in">print</span>(os.environ)</span><br><span class="line"></span><br><span class="line"><span class="comment"># os.getenv()：获取指定名称的环境变量信息</span></span><br><span class="line"><span class="built_in">print</span>(os.getenv(<span class="string">&#x27;PATH&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># os.system()：执行系统指令</span></span><br><span class="line">os.system(<span class="string">&#x27;pwd&#x27;</span>)  <span class="comment"># linux系统</span></span><br><span class="line"><span class="built_in">print</span>(os.system(<span class="string">&#x27;dir&#x27;</span>))  <span class="comment"># windows系统</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>执行 <code>print(os.system(&#39;dir&#39;))</code>时，显示当前文件夹以及所有文件，如果出现乱码，需要手动将编码格式改为<code>GBK</code></p>
<img src="/2022/03/06/15-3-%E5%86%85%E7%BD%AE%E5%BA%93os/image-20220307103547383.png" alt="image-20220307103547383">
</blockquote>
<h3 id="1-3-2-操作目录"><a href="#1-3-2-操作目录" class="headerlink" title="1.3.2 操作目录"></a>1.3.2 操作目录</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># os.getcwd()：获取当前目录</span></span><br><span class="line"><span class="built_in">print</span>(os.getcwd())</span><br><span class="line"></span><br><span class="line"><span class="comment"># os.chdir()：切换目录</span></span><br><span class="line">os.chdir(<span class="string">&#x27;..&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># os.listdir()：列出当前目录内容</span></span><br><span class="line"><span class="built_in">print</span>(os.listdir())</span><br><span class="line"></span><br><span class="line"><span class="comment"># os.mkdir()：创建空目录</span></span><br><span class="line">os.mkdir(<span class="string">&#x27;new&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># os.makedirs()：递归创建多级目录</span></span><br><span class="line">os.makedirs(<span class="string">&#x27;a/b/c&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># os.rmdir()：删除空目录</span></span><br><span class="line">os.rmdir(<span class="string">&#x27;new&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># os.rename()：重命名目录</span></span><br><span class="line">os.rename(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># os.remove()：删除文件</span></span><br><span class="line">os.remove(<span class="string">&#x27;demo.txt&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h3 id="1-3-3-操作路径"><a href="#1-3-3-操作路径" class="headerlink" title="1.3.3 操作路径"></a>1.3.3 操作路径</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os.path.abspath(path)	<span class="comment">#返回绝对路径</span></span><br><span class="line">os.path.basename(path)	<span class="comment">#返回文件名</span></span><br><span class="line">os.path.dirname(path)	<span class="comment">#返回文件路径</span></span><br><span class="line">os.path.split(path)	<span class="comment">#分割路径</span></span><br><span class="line">os.path.join(path)	<span class="comment">#拼接路径</span></span><br><span class="line">os.path.exists(path)	<span class="comment">#判断路径是否存在</span></span><br><span class="line">os.path.isdir(path)	<span class="comment">#判断是否是目录</span></span><br><span class="line">os.path.isfile(path)	<span class="comment">#判断是否是文件</span></span><br><span class="line">os.path.getsize(path)	<span class="comment">#获取文件大小</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>测试学习</category>
      </categories>
      <tags>
        <tag>python编程语言</tag>
      </tags>
  </entry>
  <entry>
    <title>15.4 内置库sys</title>
    <url>/2022/03/07/15-4-%E5%86%85%E7%BD%AE%E5%BA%93sys/</url>
    <content><![CDATA[<h1 id="1-内置库sys"><a href="#1-内置库sys" class="headerlink" title="1 内置库sys"></a>1 内置库sys</h1><h2 id="1-1-sys概述"><a href="#1-1-sys概述" class="headerlink" title="1.1 sys概述"></a>1.1 sys概述</h2><ul>
<li>是 Python 自带的内置模块</li>
<li>是与 Python 解释器交互的桥梁</li>
</ul>
<h2 id="1-2-sys使用"><a href="#1-2-sys使用" class="headerlink" title="1.2 sys使用"></a>1.2 sys使用</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=gbk</span></span><br><span class="line"><span class="comment"># 导入sys模块</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看sys模块帮助文档</span></span><br><span class="line"><span class="built_in">help</span>(sys)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看sys模块的属性和方法</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(sys))</span><br></pre></td></tr></table></figure>

<blockquote>
<p>文件首行要进行定义：<code># coding=gbk</code>，不然会报错：<code>SyntaxError: Non-UTF-8 code starting with &#39;\xb5&#39; in file D:\PycharmProject\sys_demo.py on line 3, but no encoding declared; see https://python.org/dev/peps/pep-0263/ for details</code></p>
</blockquote>
<h3 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sys.version    <span class="comment"># 返回 Python 解释器版本</span></span><br><span class="line">sys.platform    <span class="comment"># 返回操作系统平台名称</span></span><br><span class="line">sys.argv    <span class="comment"># 返回外部向程序传递的参数——</span></span><br><span class="line">sys.modules    <span class="comment"># 返回已导入的模块信息</span></span><br><span class="line">sys.path    <span class="comment"># 返回导包的搜索路径列表</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>1.<code>argv</code>可以动态收集命令行传递给参数的列表：</p>
<img src="/2022/03/07/15-4-%E5%86%85%E7%BD%AE%E5%BA%93sys/image-20220307110412839.png" alt="image-20220307110412839" style="zoom: 50%;">

<p>2.<code>sys.modules</code>返回的模块信息是<strong>字典</strong>格式的，可以通过字典的<code>keys()</code>方法，返回一个模块名称组成的一个新视图对象。</p>
<p>3.<code>sys.path</code>展示导包的搜罗路径，返回一个<strong>列表</strong>，因此可以手动添加路径，利用列表的<code>append()</code>方法。<code>PycharProject</code>下有一个<code>hello</code>文件夹内有<code>baidu.py</code>，而现在的<code>.py</code>文件位于<code>PycharProject</code>下，因此在<code>.py</code>文件要引用<code>baidu.py</code>中的方法时，如果想要手动添加路径，需要做以下处理：</p>
<img src="/2022/03/07/15-4-%E5%86%85%E7%BD%AE%E5%BA%93sys/image-20220307143133629.png" alt="image-20220307143133629" style="zoom:50%;">

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_dir = os.path.dirname(os.path.abspath(__file__)) + <span class="string">&quot;/hello&quot;</span></span><br><span class="line">sys.path.append(my_dir)</span><br><span class="line"><span class="keyword">from</span> baidu <span class="keyword">import</span> search</span><br><span class="line">search()</span><br></pre></td></tr></table></figure>

<p>输入<code>print(sys.path)</code>，可以找到刚才手动添加的搜索路径。</p>
<p>PS：手动添加路径只有在代码运行时生效，脚本结束后不会生效。</p>
</blockquote>
<h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取系统当前编码——python3为 UTF-8</span></span><br><span class="line">sys.getdefaultencoding()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行时退出</span></span><br><span class="line">sys.exit()</span><br></pre></td></tr></table></figure>

<blockquote>
<p>用一个例子来说明<code>sys.exit()</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">6</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;exiting.......&quot;</span>)</span><br><span class="line">        sys.exit(<span class="string">&quot;退出&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;running：<span class="subst">&#123;i&#125;</span>&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">running：<span class="number">0</span></span><br><span class="line">running：<span class="number">1</span></span><br><span class="line">running：<span class="number">2</span></span><br><span class="line">running：<span class="number">3</span></span><br><span class="line">running：<span class="number">4</span></span><br><span class="line">running：<span class="number">5</span></span><br><span class="line">exiting.......</span><br><span class="line">退出</span><br></pre></td></tr></table></figure>
</blockquote>
]]></content>
      <categories>
        <category>测试学习</category>
      </categories>
      <tags>
        <tag>python编程语言</tag>
      </tags>
  </entry>
  <entry>
    <title>15.5 内置库-文件处理</title>
    <url>/2022/03/07/15-5-%E5%86%85%E7%BD%AE%E5%BA%93-%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h1 id="1-IO操作"><a href="#1-IO操作" class="headerlink" title="1 IO操作"></a>1 IO操作</h1><img src="/2022/03/07/15-5-%E5%86%85%E7%BD%AE%E5%BA%93-%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/image-20220307145425826.png" alt="image-20220307145425826" style="zoom: 43%;">



<h1 id="2-文件操作步骤"><a href="#2-文件操作步骤" class="headerlink" title="2 文件操作步骤"></a>2 文件操作步骤</h1><ol>
<li><p>打开文件</p>
</li>
<li><p>操作文件</p>
<p> 读&#x2F;写内容</p>
</li>
<li><p>关闭文件<br> （读写完成，要及时的关闭）</p>
</li>
</ol>
<h2 id="2-1-open方法"><a href="#2-1-open方法" class="headerlink" title="2.1 open方法"></a>2.1 <code>open</code>方法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># file参数必填</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">open</span>(<span class="params">file, mode=<span class="string">&#x27;r&#x27;</span>, buffering=<span class="literal">None</span>, encoding=<span class="literal">None</span>,errors=<span class="literal">None</span>, newline=<span class="literal">None</span>, closefd=<span class="literal">True</span></span>):</span><br></pre></td></tr></table></figure>

<p>如有一个<code>test.txt</code>文件如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1234</span><br><span class="line">testtesttesttesttest</span><br></pre></td></tr></table></figure>

<h2 id="2-2-文件读写方式"><a href="#2-2-文件读写方式" class="headerlink" title="2.2 文件读写方式"></a>2.2 文件读写方式</h2><table>
<thead>
<tr>
<th align="center">文件打开模式</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>r</code></td>
<td>以只读模式打开文件，并将文件指针指向文件头；如果文件不存在会报错</td>
</tr>
<tr>
<td align="center"><code>w</code></td>
<td>以只写模式打开文件，并将文件指针指向文件头；如果文件存在则将其内容清空，如果文件不存在则创建</td>
</tr>
<tr>
<td align="center"><code>a</code></td>
<td>以只追加可写模式打开文件，并将文件指针指向文件尾部；如果文件不存在则创建</td>
</tr>
<tr>
<td align="center"><code>r+</code></td>
<td>在<code>r</code>的基础上增加了可写功能</td>
</tr>
<tr>
<td align="center"><code>w+</code></td>
<td>在<code>w</code>的基础上增加了可读功能</td>
</tr>
<tr>
<td align="center"><code>a+</code></td>
<td>在a的基础上增加了可读功能</td>
</tr>
<tr>
<td align="center"><code>b</code></td>
<td>读写二进制文件（默认是<code>t</code>，表示文本），需要与上面几种模式搭配使用，如<code>ab</code>，<code>wb</code>，<code>ab+</code>（<code>POSIX</code>系统，包括<code>Linux</code>都会忽略该字符）</td>
</tr>
</tbody></table>
<h2 id="2-3-读操作"><a href="#2-3-读操作" class="headerlink" title="2.3 读操作"></a>2.3 读操作</h2><table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>read()</code></td>
<td>一次读取文件所有内容，返回一个<code>str</code></td>
</tr>
<tr>
<td><code>read(size)</code></td>
<td>每次最多读取指定长度的内容，返回一个<code>str</code>；在<code>Python2</code>中<code>size</code>指定的是<strong>字节</strong>长度，在<code>Python3</code>中<code>size</code>指定的是<strong>字符</strong>长度</td>
</tr>
<tr>
<td><code>readlines()</code></td>
<td>一次读取文件所有内容，按行返回一个<code>list</code></td>
</tr>
<tr>
<td><code>readline()</code></td>
<td>每次只读取一行内容</td>
</tr>
</tbody></table>
<p>例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;python/test.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取10位字符，换行符也算一个字符</span></span><br><span class="line"><span class="built_in">print</span>(f.read(<span class="number">10</span>))</span><br><span class="line"><span class="comment"># 光标移动到读取十位字符后位置，接下来读取剩下的全部内容</span></span><br><span class="line"><span class="built_in">print</span>(f.readlines())</span><br><span class="line"></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1234</span><br><span class="line">testt</span><br><span class="line">[&#x27;esttesttesttest&#x27;]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>读完一次之后，再次读取文件，内容将不是完整的，需要重新设置游标位置，使用<code>f.seek(0)</code></p>
</blockquote>
<p>在第5行后添加代码：<code>f.seek(0)</code>，再次运行代码，输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1234</span><br><span class="line">testt</span><br><span class="line">[&#x27;1234\n&#x27;, &#x27;testtesttesttesttest&#x27;]</span><br></pre></td></tr></table></figure>

<p>输入：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(f.readline())</span><br><span class="line"><span class="built_in">print</span>(f.readline())</span><br></pre></td></tr></table></figure>

<p>得到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1234</span><br><span class="line"></span><br><span class="line">testtesttesttesttest</span><br></pre></td></tr></table></figure>

<blockquote>
<p>由于文件本身在第一行后就有一个换行符，且<code>print()</code>自带一个换行符所以在<code>readline()</code>两次时，输出的内容之间有一行空行。</p>
</blockquote>
<h2 id="2-4-忘记关闭文件的危害"><a href="#2-4-忘记关闭文件的危害" class="headerlink" title="2.4 忘记关闭文件的危害"></a>2.4 忘记关闭文件的危害</h2><ul>
<li>打开文件达到一定数量，将会导致打开失败</li>
<li>占用系统空间，非常浪费资源</li>
<li>会导致系统自动回收资源，从而丢失数据</li>
</ul>
<h2 id="2-5-with用法"><a href="#2-5-with用法" class="headerlink" title="2.5 with用法"></a>2.5 <code>with</code>用法</h2><p><code>with</code> 可以自动完成关闭文件的操作，建议使用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;python/test.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">print</span>(f.read())</span><br><span class="line"><span class="comment"># 查看文件关闭状态</span></span><br><span class="line"><span class="built_in">print</span>(f.closed)</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1234</span><br><span class="line">testtesttesttesttest</span><br><span class="line">True</span><br></pre></td></tr></table></figure>

<h2 id="2-6-写操作"><a href="#2-6-写操作" class="headerlink" title="2.6 写操作"></a>2.6 写操作</h2><ul>
<li>mode &#x3D; <code>w+</code>，读写权限，清空内容再写入，如果没有文件，会新建文件</li>
<li>mode &#x3D; <code>r+</code>，读写权限，替换原来的内容</li>
<li>mode &#x3D; <code>a+</code>，读写权限，追加内容，不会清空原来的内容</li>
</ul>
<h3 id="1-w"><a href="#1-w" class="headerlink" title="1. w+"></a>1. <code>w+</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;python/test.txt&#x27;</span>, <span class="string">&#x27;w+&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">print</span>(f.write(<span class="string">&#x27;yyly\n&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yyly</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-r"><a href="#2-r" class="headerlink" title="2. r+"></a>2. <code>r+</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;python/test.txt&#x27;</span>, <span class="string">&#x27;r+&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">print</span>(f.write(<span class="string">&#x27;yyly\n&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yyly</span><br><span class="line">testtesttesttesttest</span><br></pre></td></tr></table></figure>

<h3 id="3-a"><a href="#3-a" class="headerlink" title="3. a+"></a>3. <code>a+</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;python/test.txt&#x27;</span>, <span class="string">&#x27;a+&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">print</span>(f.write(<span class="string">&#x27;yyly\n&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1234</span><br><span class="line">testtesttesttesttestyyly</span><br><span class="line">yyly</span><br></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol>
<li>使用<code>with</code>方法，会<strong>自动完成关闭操作</strong></li>
<li>通过<code>python</code>封装的API，可以实现读、写、追加操作</li>
<li>文件打开要使用的<code>utf-8</code>的编码格式（避免中文出现乱码）</li>
</ol>
]]></content>
      <categories>
        <category>测试学习</category>
      </categories>
      <tags>
        <tag>python编程语言</tag>
      </tags>
  </entry>
  <entry>
    <title>15.1 错误与异常</title>
    <url>/2022/03/04/15-1-%E9%94%99%E8%AF%AF%E4%B8%8E%E5%BC%82%E5%B8%B8/</url>
    <content><![CDATA[<h1 id="1-语法错误与定位"><a href="#1-语法错误与定位" class="headerlink" title="1 语法错误与定位"></a>1 语法错误与定位</h1><h2 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h2><ul>
<li>语法错误</li>
<li>逻辑错误</li>
<li>系统错误</li>
</ul>
<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><ul>
<li>程序执行过程中出现的未知错误</li>
<li>语法和逻辑都是正常的</li>
<li>程序业务逻辑不完善引起的程序漏洞（bug）</li>
</ul>
<h2 id="错误与异常的区别？"><a href="#错误与异常的区别？" class="headerlink" title="错误与异常的区别？"></a><strong>错误与异常的区别？</strong></h2><ul>
<li>异常可以被捕获和处理</li>
<li>错误一般是编码错误，逻辑错误，系统错误</li>
</ul>
<h2 id="异常-x2F-错误处理流程"><a href="#异常-x2F-错误处理流程" class="headerlink" title="异常&#x2F;错误处理流程"></a>异常&#x2F;错误处理流程</h2><img src="/2022/03/04/15-1-%E9%94%99%E8%AF%AF%E4%B8%8E%E5%BC%82%E5%B8%B8/image-20220304192005145.png" alt="image-20220304192005145" style="zoom:50%;">

<ul>
<li>如果是拼写、配置等引起的错误，根据出错信息排查错误出现的位置进行解决</li>
<li>如果是程序设计不完善引起的漏洞，根据漏洞的情况进行设计处理漏洞的逻辑</li>
</ul>
<h2 id="常见的异常类型"><a href="#常见的异常类型" class="headerlink" title="常见的异常类型"></a>常见的异常类型</h2><ul>
<li><p>异常类型：<a href="https://docs.python.org/3/library/exceptions.html#bltin-exceptions">https://docs.python.org/3/library/exceptions.html#bltin-exceptions</a></p>
</li>
<li><p>常见的异常类型：</p>
<ul>
<li><p>除零类型</p>
<p>  ​    除数为0</p>
</li>
<li><p>名称异常</p>
<p>  ​    例如：参数未定义</p>
</li>
<li><p>索引异常</p>
<p>  ​    例如：列表或元组索引超出范围</p>
</li>
<li><p>键异常</p>
<p>  ​    例如：字典取值时没有键</p>
</li>
<li><p>值异常</p>
<p>  ​    例如：传入和输出的类型不一致</p>
</li>
<li><p>属性异常</p>
<p>  ​    例如：在python中有一些常量属性值，更新时发生的异常</p>
</li>
</ul>
</li>
</ul>
<h1 id="2-异常捕获-amp-异常处理"><a href="#2-异常捕获-amp-异常处理" class="headerlink" title="2 异常捕获&amp;异常处理"></a>2 异常捕获&amp;异常处理</h1><p><code>try/except</code>语句用来检测<code>try</code>语句块中的错误，从而让<code>except</code>语句捕获异常信息并处理。</p>
<p>如果不想在异常发生时结束程序，只需在<code>try</code>里捕获它。</p>
<p>例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">js</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> a / b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(js(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">    list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">    <span class="built_in">print</span>(list1[<span class="number">3</span>])</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;这里有一个异常&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> IndexError <span class="keyword">as</span> c:</span><br><span class="line">    <span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.0</span></span><br><span class="line"><span class="built_in">list</span> index out of <span class="built_in">range</span></span><br></pre></td></tr></table></figure>

<p>当然一个一个异常去处理比较麻烦，可以改写程序：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> exception:</span><br><span class="line">    <span class="built_in">print</span>(exception)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Exception是大多数异常的父类，BaseException是所有异常的父类。</p>
</blockquote>
<h2 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">	执行代码</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">	发生异常时执行的代码</span><br></pre></td></tr></table></figure>

<h2 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">	执行代码</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">	发生异常时执行的代码</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    没有异常时执行的代码</span><br></pre></td></tr></table></figure>

<h2 id="方法3"><a href="#方法3" class="headerlink" title="方法3"></a>方法3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">	执行代码</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">	发生异常时执行的代码</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    没有异常时执行的代码</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    不管有没有异常都会执行的代码</span><br></pre></td></tr></table></figure>

<h2 id="方法4-手动引发异常raise"><a href="#方法4-手动引发异常raise" class="headerlink" title="方法4 手动引发异常raise"></a>方法4 手动引发异常<code>raise</code></h2><p>系统的自带的异常只要触发会自动抛出，比如<code>NameError</code>，但用户自定义的异常需要用户自己决定什么时候抛出。 <code>raise</code> 唯一的一个参数指定了要被抛出的异常。它必须是一个异常的实例或者是异常的类（也就是 <code>Exception</code> 的子类）。大多数的异常的名字都以”<code>Error</code>“结尾，所以实际命名时尽量跟标准的异常命名一样。</p>
<p>raise 语句的基本语法格式为：<code>raise [exceptionName [(reason)]]</code></p>
<p>其中，用 <code>[]</code> 括起来的为可选参数，其作用是指定抛出的异常名称，以及异常信息的相关描述。如果可选参数全部省略，则 raise 会把当前错误原样抛出；如果仅省略 <code>(reason)</code>，则在抛出异常时，将不附带任何的异常描述信息。</p>
<p>也就是说，raise 语句有如下三种常用的用法：</p>
<ul>
<li><code>raise</code>：单独一个 raise。该语句引发当前上下文中捕获的异常（比如在 except 块中），或默认引发 RuntimeError 异常。</li>
<li><code>raise 异常类名称</code>：raise 后带一个异常类名称，表示引发执行类型的异常。</li>
<li><code>raise 异常类名称(描述信息)</code>：在引发指定类型的异常的同时，附带异常的描述信息。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    a = <span class="built_in">input</span>(<span class="string">&quot;输入一个数：&quot;</span>)</span><br><span class="line">    <span class="comment"># 判断用户输入的是否为数字</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> a.isdigit():</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;a 必须是数字&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="comment"># repr函数，返回对象的规范字符串表示</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;引发异常：&quot;</span>, <span class="built_in">repr</span>(e))</span><br></pre></td></tr></table></figure>

<p>输入<code>a</code>，结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">输入一个数：a</span><br><span class="line">引发异常： ValueError(<span class="string">&#x27;a 必须是数字&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>可以看到，当用户输入的不是数字时，程序会进入 <code>if</code> 判断语句，并执行 <code>raise</code> 引发 <code>ValueError</code> 异常。但由于其位于 try 块中，因为 <code>raise</code> 抛出的异常会被 <code>try</code> 捕获，并由 <code>except</code> 块进行处理。</p>
<p>因此，虽然程序中使用了 <code>raise</code> 语句引发异常，但程序的执行是正常的，手动抛出的异常并不会导致程序崩溃。</p>
<h1 id="3-自定义异常"><a href="#3-自定义异常" class="headerlink" title="3 自定义异常"></a>3 自定义异常</h1><p>通过创建一个新的异常类，程序可以命名它们自己的异常。异常应该是典型的继承自<font color="red">Exception</font>类，通过直接或间接的方式。</p>
<h2 id="3-1-手动抛出异常"><a href="#3-1-手动抛出异常" class="headerlink" title="3.1 手动抛出异常"></a>3.1 手动抛出异常</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.用户自定义异常类型，继承自Exception类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TooLongException</span>(<span class="title class_ inherited__">Exception</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, le</span>):</span><br><span class="line">        self.le = le</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;姓名长度是<span class="subst">&#123;self.le&#125;</span>，超过长度了&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.手动抛出用户自定义类型异常</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">nameTest</span>():</span><br><span class="line">    name = <span class="built_in">input</span>(<span class="string">&quot;enter your name:&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(name) &gt; <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">raise</span> TooLongException(<span class="built_in">len</span>(name))  <span class="comment"># 抛出异常很简单，使用raise即可,但是没有处理，即捕捉</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数，执行</span></span><br><span class="line">nameTest()</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">enter your name:t43rtfdvcx</span><br><span class="line">姓名长度是<span class="number">10</span>，超过长度了</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;D:\PycharmProject\error.py&quot;</span>, line <span class="number">74</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    nameTest()</span><br><span class="line">  File <span class="string">&quot;D:\PycharmProject\error.py&quot;</span>, line <span class="number">68</span>, <span class="keyword">in</span> nameTest</span><br><span class="line">    <span class="keyword">raise</span> TooLongException(<span class="built_in">len</span>(name))  <span class="comment"># 抛出异常很简单，使用raise即可,但是没有处理，即捕捉</span></span><br><span class="line">__main__.TooLongException: &lt;exception <span class="built_in">str</span>() failed&gt;</span><br></pre></td></tr></table></figure>

<h2 id="3-2-捕捉用户手动抛出的异常"><a href="#3-2-捕捉用户手动抛出的异常" class="headerlink" title="3.2 捕捉用户手动抛出的异常"></a>3.2 捕捉用户手动抛出的异常</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.用户自定义异常类型，继承自Exception类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TooLongException</span>(<span class="title class_ inherited__">Exception</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, le</span>):</span><br><span class="line">        self.le = le</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;姓名长度是<span class="subst">&#123;self.le&#125;</span>，超过长度了&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.捕捉用户手动抛出的异常，跟捕捉系统异常方式一样</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">nameTest</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        name = <span class="built_in">input</span>(<span class="string">&quot;enter your name:&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(name) &gt; <span class="number">4</span>:</span><br><span class="line">            <span class="keyword">raise</span> TooLongException(<span class="built_in">len</span>(name))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(name)</span><br><span class="line">    <span class="keyword">except</span> TooLongException <span class="keyword">as</span> e_result:  <span class="comment"># 这里异常类型是用户自定义的</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;捕捉到异常了&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;打印异常信息：&quot;</span>, e_result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数，执行</span></span><br><span class="line">nameTest()</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">enter your name:rytgfd2q345</span><br><span class="line">捕捉到异常了</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;D:\PycharmProject\error.py&quot;</span>, line <span class="number">93</span>, <span class="keyword">in</span> nameTest</span><br><span class="line">    <span class="keyword">raise</span> TooLongException(<span class="built_in">len</span>(name))</span><br><span class="line">__main__.TooLongException: &lt;exception <span class="built_in">str</span>() failed&gt;</span><br><span class="line"></span><br><span class="line">During handling of the above exception, another exception occurred:</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;D:\PycharmProject\error.py&quot;</span>, line <span class="number">102</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    nameTest()</span><br><span class="line">  File <span class="string">&quot;D:\PycharmProject\error.py&quot;</span>, line <span class="number">98</span>, <span class="keyword">in</span> nameTest</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;打印异常信息：&quot;</span>, e_result)</span><br><span class="line">TypeError: __str__ returned non-string (<span class="built_in">type</span> NoneType)</span><br><span class="line">打印异常信息： 姓名长度是<span class="number">11</span>，超过长度了</span><br><span class="line">姓名长度是<span class="number">11</span>，超过长度了</span><br><span class="line"></span><br><span class="line">进程已结束,退出代码<span class="number">1</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>测试学习</category>
      </categories>
      <tags>
        <tag>python编程语言</tag>
      </tags>
  </entry>
  <entry>
    <title>15.7 内置库-科学计算</title>
    <url>/2022/03/09/15-7-%E5%86%85%E7%BD%AE%E5%BA%93-%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97/</url>
    <content><![CDATA[<h1 id="科学计算"><a href="#科学计算" class="headerlink" title="科学计算"></a>科学计算</h1><h2 id="1-math函数"><a href="#1-math函数" class="headerlink" title="1 math函数"></a>1 <code>math</code>函数</h2><p><code>math</code>函数，<code>python</code>提供的内置数学类函数库，包含了很多数学公式。<br>比如幂函数运算，三角函数，高等函数运算等。</p>
<h3 id="1-1-math函数操作"><a href="#1-1-math函数操作" class="headerlink" title="1.1 math函数操作"></a>1.1 <code>math</code>函数操作</h3><ul>
<li>数字常数</li>
<li>数论与表示函数</li>
<li>幂对数函数</li>
<li>三角对数函数</li>
<li>高等特殊函数</li>
</ul>
<h3 id="1-2-数字常量"><a href="#1-2-数字常量" class="headerlink" title="1.2 数字常量"></a>1.2 数字常量</h3><table>
<thead>
<tr>
<th>常数</th>
<th><code>数学表示</code></th>
<th><code>描述</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>math.pi</code></td>
<td>∏</td>
<td>圆周率，值为3.1415925·········</td>
</tr>
<tr>
<td><code>math.e</code></td>
<td>e</td>
<td>自然对数，值为2.7182818········</td>
</tr>
<tr>
<td><code>math.inf</code></td>
<td>∞</td>
<td>正无穷大，负无穷<code>-math.inf</code></td>
</tr>
<tr>
<td><code>math.nan</code></td>
<td>NAN</td>
<td>非数字 <code>NAN</code>（Not a number）</td>
</tr>
</tbody></table>
<h3 id="1-3-数论与表示函数（了解）"><a href="#1-3-数论与表示函数（了解）" class="headerlink" title="1.3 数论与表示函数（了解）"></a>1.3 数论与表示函数（了解）</h3><table>
<thead>
<tr>
<th>函数</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td><code>math.ceil(x)</code></td>
<td>返回 &gt;&#x3D; x 的最小整数 (int)</td>
<td>&gt;&gt;&gt; math.ceil(2.2) 3</td>
</tr>
<tr>
<td><code>math.floor(x)</code></td>
<td>返回 &lt;&#x3D; x 的最大整数 (int)</td>
<td>&gt;&gt;&gt; math.floor(3.6) 3</td>
</tr>
<tr>
<td><code>math.modf</code>(x)</td>
<td>返回 x 的小数部分和整数部分，两个结果都带有 x 的符号并且是浮点数。注意：Python 浮点数通常不超过 53 位的精度（与 C double 相同），任何 abs(x) &gt;&#x3D; 2**52 的浮点数 x 必然没有小数位。</td>
<td>&gt;&gt;&gt; math.modf(3.4) (0.3999999999999999, 3.0) &gt;&gt;&gt;math.modf(2**52+0.55) (0.0, 4503599627370497.0)</td>
</tr>
<tr>
<td><code>math.comb</code>(n, k)</td>
<td>返回从 n 个项目中选出 k 个项目的方法数，不重复且无顺序，也称为二项式系数。当 k &lt;&#x3D; n 时，n! &#x2F; (k! * (n - k)!)当 k &gt; n 时，为 0</td>
<td>&gt;&gt;&gt; math.comb(3, 2) 3 &gt;&gt;&gt; math.comb(2, 3) 0</td>
</tr>
<tr>
<td><code>math.perm(n,k=None)</code></td>
<td>返回从 n 个项目中选择 k 个项目的方法数，不重复且有顺序。当 k &lt;&#x3D; n 时，n! &#x2F; (n - k)!当 k &gt; n 时，为 0当 k &#x3D; None 时，k 默认为 n ，函数返回 n！</td>
<td>&gt;&gt;&gt; math.perm(3, 2) 6 &gt;&gt;&gt; math.perm(2, 3) 0</td>
</tr>
<tr>
<td><code>math.copysign(x, y)</code></td>
<td>返回一个大小为 x 的绝对值，符号同 y 的浮点数</td>
<td>&gt;&gt;&gt; math.copysign(1.2, -3) -1.2 &gt;&gt;&gt; math.copysign(-1, 3) 1.0</td>
</tr>
<tr>
<td><code>math.fabs(x)</code></td>
<td>返回 x 的绝对值</td>
<td>&gt;&gt;&gt; math.fabs(-2) 2.0</td>
</tr>
<tr>
<td><code>math.factorial(x)</code></td>
<td>返回 x 的阶乘 (int)</td>
<td>&gt;&gt;&gt; math.factorial(4) 24</td>
</tr>
<tr>
<td><code>math.fmod(x, y)</code></td>
<td>取余，与 x % y 可能会返回不同的结果math.fmod(x, y) 符号同 x，x % y 符号同 y在处理 float 时，通常首选函数 fmod()，而在处理 int 时，首选 x % y。</td>
<td>&gt;&gt;&gt; math.fmod(7, -2) 1.0 &gt;&gt;&gt; 7 % -2 -1</td>
</tr>
<tr>
<td><code>math.remainder(x, y)</code></td>
<td>取余（遵循 IEEE 754），若 x &#x2F; y 正好位于两个连续整数的中间，则商使用最近的偶数</td>
<td>&gt;&gt;&gt; math.remainder(5, 2) 1.0 &gt;&gt;&gt; math.remainder(7, 2) -1.0</td>
</tr>
<tr>
<td><code>math.frexp(x)</code></td>
<td>用以获得浮点数的内部表示，返回 x 的尾数和指数 (m, e)，m 为 float，e 为 int，x &#x3D;&#x3D; m * 2**e。若 x 为 0，则返回 (0.0, 0)，否则 0.5 &lt;&#x3D; abs(m) &lt; 1</td>
<td>&gt;&gt;&gt; math.frexp(3.4) (0.85, 2)</td>
</tr>
<tr>
<td><code>math.ldexp(x, i)</code></td>
<td>返回 x * (2**i)，本质上是函数 frexp() 的反函数</td>
<td>&gt;&gt;&gt; math.ldexp(0.85, 2) 3.4</td>
</tr>
<tr>
<td><code>math.fsum(iterable)</code></td>
<td>返回可迭代对象中值的准确浮点总和，通过跟踪多个中间部分的总和来避免精度损失</td>
<td>&gt;&gt;&gt; sum([.1]*10) 0.9999999999999999 &gt;&gt;&gt; math.fsum([.1]*10) 1.0</td>
</tr>
<tr>
<td><code>math.gcd(*integers)</code></td>
<td>GCD: Greatest Common Divisor 返回所有参数 (int) 的最大公约数</td>
<td>&gt;&gt;&gt;math.gcd(4, 6, 8) 2</td>
</tr>
<tr>
<td><code>math.lcm(*integers)</code></td>
<td>LCM: Least Common Multiple 返回所有参数 (int) 的最小公倍数</td>
<td>&gt;&gt;&gt;math.lcm(3, 5) 15</td>
</tr>
<tr>
<td><code>math.isclose(a,b,*,rel_tol=1e09,abs_tol=0.0)</code></td>
<td>根据给定的 rel_tol 和 abs_tol 确定 a, b 是否接近，rel_tol 是相对容差，abs_tol 是最小绝对容差。若 abs(a-b) &lt;&#x3D; max(rel_tol * max(abs(a), abs(b)), abs_tol)，返回 True</td>
<td>&gt;&gt;&gt; math.isclose(3.4, 3.4) True</td>
</tr>
<tr>
<td><code>math.isfinite(x)</code></td>
<td>若 x 既不是无穷大也不是 NaN，则返回 True，否则返回 False</td>
<td>&gt;&gt;&gt; math.isfinite(3.4) True</td>
</tr>
<tr>
<td><code>math.isinf(x)</code></td>
<td>若 x 是正无穷大或负无穷大，则返回 True，否则返回 False。</td>
<td>&gt;&gt;&gt; math.isinf(float(‘inf’)) True</td>
</tr>
<tr>
<td><code>math.isnan(x)</code></td>
<td>若 x 是 NaN（非数），则返回 True，否则返回 False。</td>
<td>&gt;&gt;&gt; math.isnan(float(‘nan’)) True</td>
</tr>
<tr>
<td><code>math.isqrt(n)</code></td>
<td>ISqRt: Integer Square Root返回非负整数 n 的整数平方根 a ，使得 a²≤n</td>
<td>&gt;&gt;&gt; math.isqrt(5) 2</td>
</tr>
<tr>
<td><code>math.nextafter(x, y)</code></td>
<td>返回 x 之后朝向 y 的下一个浮点值</td>
<td>&gt;&gt;&gt; math.nextafter(3, math.inf) 3.0000000000000004 &gt;&gt;&gt; math.nextafter(3, 0.0) 2.9999999999999996</td>
</tr>
<tr>
<td><code>math.ulp(x)</code></td>
<td>ULP: Unit in the Last Place返回浮点数 x 的最低有效位的值,这样第一个大于 x 的浮点数是 x + ulp(x)。</td>
<td>&gt;&gt;&gt; math.ulp(3.4) 4.440892098500626e-16</td>
</tr>
<tr>
<td><code>math.prod(iterable, *, start=1)</code></td>
<td>prod : product 返回 start 与 iterable 中各元素的乘积，若 iterable为空，则返回start</td>
<td>&gt;&gt;&gt; math.prod((2, 3)) 6 &gt;&gt;&gt; math.prod((2, 3), start&#x3D;2) 12</td>
</tr>
<tr>
<td><code>math.trunc(x)</code></td>
<td>trunc : truncate 将实数 x 截断为int (通常为 int)</td>
<td>&gt;&gt;&gt; math.trunc(3.4) 3</td>
</tr>
</tbody></table>
<h3 id="1-4-幂函数和对数函数（了解）"><a href="#1-4-幂函数和对数函数（了解）" class="headerlink" title="1.4 幂函数和对数函数（了解）"></a>1.4 幂函数和对数函数（了解）</h3><table>
<thead>
<tr>
<th>函数</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td><code>math.exp(x)</code></td>
<td>返回 e 的 x 次幂，其中 e &#x3D; 2.718281……是自然对数的底。这通常比 math.e ** x 或 pow(math.e, x) 更准确</td>
<td>&gt;&gt;&gt; math.exp(2) 7.38905609893065</td>
</tr>
<tr>
<td><code>math.expm1(x)</code></td>
<td>expm1: exp, minus 1 返回 e 的 x 次幂，减去 1。对于小浮点数 x，exp(x) - 1 会导致精度的显着损失；exp.m1() 函数提供了一种方法来计算到全精度</td>
<td>&gt;&gt;&gt; math.exp(1e-5) - 1 1.0000050000069649e-05 &gt;&gt;&gt; math.expm1(1e-5) 1.0000050000166667e-05</td>
</tr>
<tr>
<td><code>math.log(x[,base])</code></td>
<td>返回以base为底，x 的对数，计算为 log(x)&#x2F;log(base)。若未指定base，默认为e</td>
<td>&gt;&gt;&gt; math.log(2) 0.6931471805599453 &gt;&gt;&gt; math.log(2, 2) 1.0</td>
</tr>
<tr>
<td><code>math.log1p(x)</code></td>
<td>返回 1+x（以 e 为底）的自然对数。结果的计算方式对于接近零的 x 是准确的</td>
<td>&gt;&gt;&gt; math.log1p(2) 1.0986122886681098</td>
</tr>
<tr>
<td><code>math.log2(x)</code></td>
<td>返回 x 的以 2 为底的对数。这通常比 log(x, 2) 更准确</td>
<td>&gt;&gt;&gt; math.log2(2) 1.0</td>
</tr>
<tr>
<td><code>math.log10(x)</code></td>
<td>返回 x 的以 10 为底的对数。这通常比 log(x, 10) 更准确</td>
<td>&gt;&gt;&gt; math.log10(100) 2.0</td>
</tr>
<tr>
<td><code>math.pow(x, y)</code></td>
<td>返回 x 的 y 次幂。与内置的 ** 运算符不同，math.pow() 将其两个参数都转换为 float 类型。使用 ** 或内置的 pow() 函数计算精确的整数幂。</td>
<td>&gt;&gt;&gt; math.pow(2, 3) 8.0 &gt;&gt;&gt; pow(2, 3) 8</td>
</tr>
<tr>
<td><code>math.sqrt((x)</code></td>
<td>返回 x 的平方根 (square root)</td>
<td>&gt;&gt;&gt; math.sqrt(4) 2.0</td>
</tr>
</tbody></table>
<h3 id="1-5-三角函数（了解）"><a href="#1-5-三角函数（了解）" class="headerlink" title="1.5 三角函数（了解）"></a>1.5 三角函数（了解）</h3><table>
<thead>
<tr>
<th>函数</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td><code>math.sin(x)</code></td>
<td>sin : sine 返回 x 弧度的正弦值</td>
<td>&gt;&gt;&gt; math.sin(math.pi&#x2F;2) 1.0</td>
</tr>
<tr>
<td><code>math.asin(x)</code></td>
<td>asin : arc sine 返回 x 的反正弦，单位：弧度。结果在 -pi&#x2F;2 和 pi&#x2F;2 之间</td>
<td>&gt;&gt;&gt; math.asin(1) 1.5707963267948966</td>
</tr>
<tr>
<td><code>math.cos(x)</code></td>
<td>cos : cosine 返回 x 弧度的余弦值</td>
<td>&gt;&gt;&gt; math.cos(math.pi) -1.0</td>
</tr>
<tr>
<td><code>math.acos(x)</code></td>
<td>acos : arc cosine 返回 x 的反余弦值，单位：弧度。结果在 0 和 pi 之间</td>
<td>&gt;&gt;&gt; math.acos(-1) 3.141592653589793</td>
</tr>
<tr>
<td><code>math.tan(x)</code></td>
<td>tan : tangent 返回 x 弧度的切线</td>
<td>&gt;&gt;&gt; math.tan(math.pi&#x2F;4) 0.9999999999999999</td>
</tr>
<tr>
<td><code>math.atan(x)</code></td>
<td>atan : arc tangent 返回 x 的反正切，单位：弧度。结果介于 -pi&#x2F;2 和 pi&#x2F;2 之间。</td>
<td>&gt;&gt;&gt; math.atan(1) 0.7853981633974483</td>
</tr>
<tr>
<td><code>math.atan2(y, x)</code></td>
<td>返回平面中从原点到点 (x, y) 的向量与正 X 轴形成的角度 atan(y &#x2F; x)，单位：弧度。结果介于 -pi 和 pi 之间。</td>
<td>&gt;&gt;&gt; math.atan2(1, 1) 0.7853981633974483</td>
</tr>
<tr>
<td><code>math.dist(p, q)</code></td>
<td>dist : distance 返回两点 p 和 q 之间的欧几里得距离，每个点都作为坐标序列（或可迭代）给出。这两个点必须具有相同的维度。大致相当于：sqrt(sum((px - qx) ** 2.0 for px, qx in zip(p, q)))</td>
<td>&gt;&gt;&gt; math.dist((1, 1), (2, 2)) 1.4142135623730951</td>
</tr>
<tr>
<td><code>math.hypot(*coordinates)</code></td>
<td>hypot : hypotenuse （斜边） 返回欧几里得范数，sqrt(sum(x*<em>2 for x in coordinates))。这是从原点到坐标给定点的向量的长度。对于二维点 (x, y)，这等效于使用勾股定理 sqrt(x</em>x + y*y) 计算直角三角形的斜边。3.8 版之前仅支持二维，之后添加了对n维点的支持。</td>
<td>&gt;&gt;&gt; math.hypot(1, 1) 1.4142135623730951</td>
</tr>
</tbody></table>
<p>例子：1年365天，以第1天的能力值为基数，记为1.0，当努力学习时，能力值相比前一天提高1%，当没有学习时能力值相比前一天下降1%。那么每天努力和每天放任，一年下来的能力值相差多少呢？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">power_up = math.<span class="built_in">pow</span>(<span class="number">1.01</span>, <span class="number">365</span>)</span><br><span class="line"><span class="built_in">print</span>(power_up)</span><br><span class="line">power_down = math.<span class="built_in">pow</span>(<span class="number">0.99</span>, <span class="number">365</span>)</span><br><span class="line"><span class="built_in">print</span>(power_down)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">37.78343433288728</span><br><span class="line">0.025517964452291125</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>测试学习</category>
      </categories>
      <tags>
        <tag>python编程语言</tag>
      </tags>
  </entry>
  <entry>
    <title>15.8 内置库json</title>
    <url>/2022/03/08/15-8-%E5%86%85%E7%BD%AE%E5%BA%93json/</url>
    <content><![CDATA[<h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><ul>
<li><code>JSON</code> 是用于存储和交换数据的语法，是一种轻量级的数据交换格式。</li>
<li>使用场景<ul>
<li>接口数据传输</li>
<li>序列化</li>
<li>配置文件</li>
</ul>
</li>
</ul>
<h2 id="JSON-结构"><a href="#JSON-结构" class="headerlink" title="JSON 结构"></a>JSON 结构</h2><h3 id="1-键值对形式"><a href="#1-键值对形式" class="headerlink" title="1. 键值对形式"></a>1. 键值对形式</h3><p>是一个无序的<code>键:值</code>对集合。一个对象以<code>&#123;</code>开始，<code>&#125;</code>结束。每个键后跟一个<code>:</code>，<code>键:值</code>对之间使用<code>,</code>分隔。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">12</span><span class="punctuation">,</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;张三&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;sheng&quot;</span><span class="punctuation">:</span><span class="string">&quot;湖南&quot;</span><span class="punctuation">,</span><span class="attr">&quot;shi&quot;</span><span class="punctuation">:</span><span class="string">&quot;张家界&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-数组形式"><a href="#2-数组形式" class="headerlink" title="2. 数组形式"></a>2. 数组形式</h3><p>是<code>值</code>的有序集合。一个数组以 <code>[</code> 开始，<code>]</code> 结束。值之间使用 <code>,</code> 分隔。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span><span class="string">&quot;a&quot;</span><span class="punctuation">,</span><span class="string">&quot;b&quot;</span><span class="punctuation">,</span><span class="string">&quot;c&quot;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>

<h4 id="Json格式嵌套"><a href="#Json格式嵌套" class="headerlink" title="Json格式嵌套"></a>Json格式嵌套</h4><p><code>值</code>可以是双引号括起来的字符串（string）、数值（number）、true、false、null、对象（object）或者数组（array）。这些结构可以嵌套。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;吃饭&quot;</span><span class="punctuation">,</span><span class="string">&quot;睡觉&quot;</span><span class="punctuation">,</span><span class="string">&quot;打豆豆&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">15</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;李四&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;哈哈&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;ss&quot;</span><span class="punctuation">,</span><span class="string">&quot;sa&quot;</span><span class="punctuation">]</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;喜欢悠哉悠哉独自在&quot;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>



<h2 id="Python-与-JSON-数据类型对应-转换表"><a href="#Python-与-JSON-数据类型对应-转换表" class="headerlink" title="Python 与 JSON 数据类型对应 转换表"></a>Python 与 JSON 数据类型对应 <a href="https://docs.python.org/zh-cn/3.10/library/json.html#py-to-json-table">转换表</a></h2><table>
<thead>
<tr>
<th align="center">Python</th>
<th align="center">JSON</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">dict</td>
<td align="center">object</td>
<td align="center">字典</td>
</tr>
<tr>
<td align="center">list ，tuple</td>
<td align="center">array</td>
<td align="center">序列</td>
</tr>
<tr>
<td align="center">str</td>
<td align="center">string</td>
<td align="center">字符串</td>
</tr>
<tr>
<td align="center">int ，float</td>
<td align="center">number</td>
<td align="center">数字类型</td>
</tr>
<tr>
<td align="center">True</td>
<td align="center">true</td>
<td align="center">布尔值True</td>
</tr>
<tr>
<td align="center">False</td>
<td align="center">false</td>
<td align="center">布尔值False</td>
</tr>
<tr>
<td align="center">None</td>
<td align="center">null</td>
<td align="center">空值</td>
</tr>
</tbody></table>
<h2 id="json-库"><a href="#json-库" class="headerlink" title="json 库"></a>json 库</h2><ul>
<li>可以从字符串或文件中解析 <code>JSON</code></li>
<li>该库解析 <code>JSON</code> 后将其转为 <code>Python</code> 字典或者列表</li>
</ul>
<h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><h3 id="1-dump"><a href="#1-dump" class="headerlink" title="1.dump()"></a>1.<code>dump()</code></h3><p> 将Python 对象编码，并将数据写入 json 文件中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">json.dump(obj, fp, *, skipkeys=<span class="literal">False</span>, ensure_ascii=<span class="literal">True</span>, check_circular=<span class="literal">True</span>, allow_nan=<span class="literal">True</span>, cls=<span class="literal">None</span>, indent=<span class="literal">None</span>, separators=<span class="literal">None</span>, default=<span class="literal">None</span>, sort_keys=<span class="literal">False</span>, **kw)</span><br></pre></td></tr></table></figure>

<p>使用这个 <code>转换表</code> 将 <em>obj</em> 序列化为 JSON 格式化流形式的 <em>fp</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 写入 JSON 数据，在代码当前目录生成一个 data.json 的文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump(data, f, ensure_ascii=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<p>结果：<code>data.json</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span><span class="string">&quot;吃饭&quot;</span><span class="punctuation">,</span> <span class="string">&quot;睡觉&quot;</span><span class="punctuation">,</span> <span class="string">&quot;打豆豆&quot;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">15</span><span class="punctuation">,</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;李四&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;哈哈&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;ss&quot;</span><span class="punctuation">,</span> <span class="string">&quot;sa&quot;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="string">&quot;喜欢悠哉悠哉独自在&quot;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>

<h3 id="2-dumps"><a href="#2-dumps" class="headerlink" title="2.dumps()"></a>2.<code>dumps()</code></h3><p>将 Python 对象编码成 JSON <strong>字符串</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">json.dumps(obj, *, skipkeys=<span class="literal">False</span>, ensure_ascii=<span class="literal">True</span>, check_circular=<span class="literal">True</span>, allow_nan=<span class="literal">True</span>, cls=<span class="literal">None</span>, indent=<span class="literal">None</span>, separators=<span class="literal">None</span>, default=<span class="literal">None</span>, sort_keys=<span class="literal">False</span>, **kw)</span><br></pre></td></tr></table></figure>

<p>使用这个  <code>转换表</code>将 <em>obj</em> 序列化为 JSON 格式的 <a href="https://docs.python.org/zh-cn/3.10/library/stdtypes.html#str"><code>str</code></a>。 其参数的含义与 <a href="https://docs.python.org/zh-cn/3.10/library/json.html#json.dump"><code>dump()</code></a> 中的相同。</p>
<blockquote>
<p>JSON 中的键-值对中的键永远是 <a href="https://docs.python.org/zh-cn/3.10/library/stdtypes.html#str"><code>str</code></a> 类型的。当一个对象被转化为 JSON 时，字典中所有的键都会被强制转换为字符串。这所造成的结果是字典被转换为 JSON 然后转换回字典时可能和原来的不相等。换句话说，如果 <code>x</code> 具有非字符串的键，则有 <code>loads(dumps(x)) != x</code>。</p>
</blockquote>
<h4 id="dumps-常用参数"><a href="#dumps-常用参数" class="headerlink" title="dumps 常用参数"></a>dumps 常用参数</h4><ul>
<li><code>indent</code>：根据数据格式缩进显示，默认为 <code>None</code>，没有缩进</li>
<li><code>ensure_ascii</code>：对中文使用 <code>ASCII</code> 编码，默认为 &#96;True</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 python 结构</span></span><br><span class="line">data = [<span class="string">&quot;吃饭&quot;</span>, <span class="string">&quot;睡觉&quot;</span>, <span class="string">&quot;打豆豆&quot;</span>, &#123;<span class="string">&quot;age&quot;</span>: <span class="number">15</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;哈哈&quot;</span>: [<span class="string">&quot;ss&quot;</span>, <span class="string">&quot;sa&quot;</span>]&#125;, <span class="string">&quot;喜欢悠哉悠哉独自在&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 python 对象编码为 JSON 字符串，indent——缩进格数，ensure_ascii——是否用ASCII编码(有中文时选择False)</span></span><br><span class="line">json_data = json.dumps(data, indent=<span class="number">4</span>, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(json_data)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(json_data))</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &quot;吃饭&quot;,</span><br><span class="line">    &quot;睡觉&quot;,</span><br><span class="line">    &quot;打豆豆&quot;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;age&quot;: 15,</span><br><span class="line">        &quot;name&quot;: &quot;李四&quot;,</span><br><span class="line">        &quot;哈哈&quot;: [</span><br><span class="line">            &quot;ss&quot;,</span><br><span class="line">            &quot;sa&quot;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;喜欢悠哉悠哉独自在&quot;</span><br><span class="line">]</span><br><span class="line">&lt;class &#x27;str&#x27;&gt;</span><br></pre></td></tr></table></figure>



<h3 id="3-load"><a href="#3-load" class="headerlink" title="3.load()"></a>3.<code>load()</code></h3><p>从 json 文件中读取数据并解码为 Python 对象</p>
<p>使用这个  <code>转换表</code>将 <em>fp</em> (一个支持 <code>.read()</code> 并包含一个 JSON 文档的 <a href="https://docs.python.org/zh-cn/3.10/glossary.html#term-text-file">text file</a> 或者 <a href="https://docs.python.org/zh-cn/3.10/glossary.html#term-binary-file">binary file</a> 反序列化为一个 Python 对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">json.load(fp, *, cls=<span class="literal">None</span>, object_hook=<span class="literal">None</span>, parse_float=<span class="literal">None</span>, parse_int=<span class="literal">None</span>, parse_constant=<span class="literal">None</span>, object_pairs_hook=<span class="literal">None</span>, **kw)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.json&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = json.load(f)</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(data))</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span>&#x27;吃饭&#x27;<span class="punctuation">,</span> &#x27;睡觉&#x27;<span class="punctuation">,</span> &#x27;打豆豆&#x27;<span class="punctuation">,</span> <span class="punctuation">&#123;</span>&#x27;age&#x27;<span class="punctuation">:</span> <span class="number">15</span><span class="punctuation">,</span> &#x27;name&#x27;<span class="punctuation">:</span> &#x27;李四&#x27;<span class="punctuation">,</span> &#x27;哈哈&#x27;<span class="punctuation">:</span> <span class="punctuation">[</span>&#x27;ss&#x27;<span class="punctuation">,</span> &#x27;sa&#x27;<span class="punctuation">]</span><span class="punctuation">&#125;</span><span class="punctuation">,</span> &#x27;喜欢悠哉悠哉独自在&#x27;<span class="punctuation">]</span></span><br><span class="line">&lt;class &#x27;list&#x27;&gt;</span><br></pre></td></tr></table></figure>



<h3 id="4-loads"><a href="#4-loads" class="headerlink" title="4.loads()"></a>4.<code>loads()</code></h3><p>解码 JSON 数据（字符串），该函数返回 <strong>Python 对象</strong></p>
<p>使用这个  <code>转换表</code> 将 <em>s</em> (一个包含 JSON 文档的 <a href="https://docs.python.org/zh-cn/3.10/library/stdtypes.html#str"><code>str</code></a>, <a href="https://docs.python.org/zh-cn/3.10/library/stdtypes.html#bytes"><code>bytes</code></a> 或 <a href="https://docs.python.org/zh-cn/3.10/library/stdtypes.html#bytearray"><code>bytearray</code></a> 实例) 反序列化为 Python 对象。其他参数的含义与 <a href="https://docs.python.org/zh-cn/3.10/library/json.html#json.load"><code>load()</code></a> 中的相同。</p>
<p>如果反序列化的数据不是有效 JSON 文档，引发 <a href="https://docs.python.org/zh-cn/3.10/library/json.html#json.JSONDecodeError"><code>JSONDecodeError</code></a> 错误。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">json.loads(s, *, cls=<span class="literal">None</span>, object_hook=<span class="literal">None</span>, parse_float=<span class="literal">None</span>, parse_int=<span class="literal">None</span>, parse_constant=<span class="literal">None</span>, object_pairs_hook=<span class="literal">None</span>, **kw)</span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>测试学习</category>
      </categories>
      <tags>
        <tag>python编程语言</tag>
      </tags>
  </entry>
  <entry>
    <title>15.9 内置库-正则表达式re</title>
    <url>/2022/03/09/15-9-%E5%86%85%E7%BD%AE%E5%BA%93-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8Fre/</url>
    <content><![CDATA[<h1 id="内置库re"><a href="#内置库re" class="headerlink" title="内置库re"></a>内置库re</h1><h2 id="1-正则表达式"><a href="#1-正则表达式" class="headerlink" title="1 正则表达式"></a>1 正则表达式</h2><h3 id="1-1什么是正则表达式？"><a href="#1-1什么是正则表达式？" class="headerlink" title="1.1什么是正则表达式？"></a>1.1什么是正则表达式？</h3><ul>
<li>正则表达式就是记录文本规则的代码</li>
<li>可以查找操作符合某些复杂规则的字符串</li>
</ul>
<h3 id="1-2-使用场景"><a href="#1-2-使用场景" class="headerlink" title="1.2 使用场景"></a>1.2 使用场景</h3><ul>
<li>处理字符串</li>
<li>处理日志</li>
</ul>
<h3 id="1-3-在python中使用正则表达式"><a href="#1-3-在python中使用正则表达式" class="headerlink" title="1.3 在python中使用正则表达式"></a>1.3 在python中使用正则表达式</h3><ul>
<li>把正则表达式作为模式字符串</li>
<li>正则表达式可以使用原生字符串来表示</li>
<li>原生字符串需要在字符串前方加上<code>r</code>（<code>r&#39;string&#39;</code>）</li>
</ul>
<h2 id="2-使用re模块实现正则表达式操作"><a href="#2-使用re模块实现正则表达式操作" class="headerlink" title="2 使用re模块实现正则表达式操作"></a>2 使用re模块实现正则表达式操作</h2><h3 id="2-1-正则表达式对象转换"><a href="#2-1-正则表达式对象转换" class="headerlink" title="2.1 正则表达式对象转换"></a>2.1 正则表达式对象转换</h3><ul>
<li><p><code>re.compile(pattern[, flags])</code>：用于编译正则表达式，生成一个正则表达式（ Pattern ）对象，供 <code>match()</code> 和 <code>search()</code> 这两个函数使用。</p>
<p>  参数：</p>
<ul>
<li><code>pattern</code> : 一个字符串形式的正则表达式</li>
<li><code>flags</code> : 可选，表示匹配模式，比如忽略大小写，多行模式等，具体参数为：<ol>
<li><code>re.I</code> 忽略大小写</li>
<li><code>re.L</code> 表示特殊字符集 \w, \W, \b, \B, \s, \S 依赖于当前环境</li>
<li><code>re.M</code> 多行模式</li>
<li><code>re.S</code> 即为 <code>.</code> 并且包括换行符在内的任意字符（**.** 不包括换行符）</li>
<li><code>re.U</code> 表示特殊字符集 \w, \W, \b, \B, \d, \D, \s, \S 依赖于 Unicode 字符属性数据库</li>
<li><code>re.X</code> 为了增加可读性，忽略空格和 <strong>#</strong> 后面的注释</li>
</ol>
</li>
</ul>
</li>
</ul>
<p>当匹配成功时返回一个 Match 对象，其中：</p>
<ul>
<li><code>group([group1, …])</code> 方法用于获得一个或多个分组匹配的字符串，当要获得整个匹配的子串时，可直接使用 <code>group()</code> 或 <code>group(0)</code></li>
<li><code>start([group])</code> 方法用于获取分组匹配的子串在整个字符串中的起始位置（子串第一个字符的索引），参数默认值为 0</li>
<li><code>end([group])</code> 方法用于获取分组匹配的子串在整个字符串中的结束位置（子串最后一个字符的索引+1），参数默认值为 0</li>
<li><code>span([group])</code> 方法返回 <code>(start(group), end(group))</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-2-匹配字符串"><a href="#2-2-匹配字符串" class="headerlink" title="2.2 匹配字符串"></a>2.2 匹配字符串</h3><h4 id="2-2-1-match"><a href="#2-2-1-match" class="headerlink" title="2.2.1 match()"></a>2.2.1 <code>match()</code></h4><p><code>match(pattern, string, flags=0)</code>：从字符串的<strong>开始处</strong>进行匹配，如果不是起始位置匹配成功的话，<code>match()</code> 就返回 <code>None</code>。</p>
<p>参数说明：</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">pattern</td>
<td align="left">匹配的正则表达式</td>
</tr>
<tr>
<td align="left">string</td>
<td align="left">要匹配的字符串。</td>
</tr>
<tr>
<td align="left">flags</td>
<td align="left">标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。（参见：正则表达式修饰符 - 可选标志）</td>
</tr>
</tbody></table>
<h5 id="1-正则表达式修饰符-可选标志"><a href="#1-正则表达式修饰符-可选标志" class="headerlink" title="[1] 正则表达式修饰符 - 可选标志"></a>[1] 正则表达式修饰符 - 可选标志</h5><p>正则表达式可以包含一些可选标志修饰符来控制匹配的模式。修饰符被指定为一个可选的标志。多个标志可以通过按位 <code>OR(|)</code> 它们来指定。如 <code>re.I | re.M</code> 被设置成 <code>I</code> 和 <code>M</code> 标志：</p>
<table>
<thead>
<tr>
<th>修饰符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>re.I</td>
<td>使匹配对大小写不敏感</td>
</tr>
<tr>
<td>re.L</td>
<td>做本地化识别（locale-aware）匹配</td>
</tr>
<tr>
<td>re.M</td>
<td>多行匹配，影响 ^ 和 $</td>
</tr>
<tr>
<td>re.S</td>
<td>使 . 匹配包括换行在内的所有字符</td>
</tr>
<tr>
<td>re.U</td>
<td>根据Unicode字符集解析字符。这个标志影响 \w, \W, \b, \B.</td>
</tr>
<tr>
<td>re.X</td>
<td>该标志通过给予你更灵活的格式以便你将正则表达式写得更易于理解。</td>
</tr>
<tr>
<td>re.A</td>
<td>只进行ASCII匹配</td>
</tr>
</tbody></table>
<h5 id="2-正则表达式模式"><a href="#2-正则表达式模式" class="headerlink" title="[2] 正则表达式模式"></a>[2] 正则表达式模式</h5><p>模式字符串使用特殊的语法来表示一个正则表达式：</p>
<ul>
<li>字母和数字表示他们自身。一个正则表达式模式中的字母和数字匹配同样的字符串。</li>
<li>多数字母和数字前加一个反斜杠时会拥有不同的含义。</li>
<li>标点符号只有被转义时才匹配自身，否则它们表示特殊的含义。</li>
<li>反斜杠本身需要使用反斜杠转义。</li>
<li>由于正则表达式通常都包含反斜杠，所以你最好使用原始字符串来表示它们。模式元素(如 <code>r&#39;\t&#39;</code>，等价于 <code>&#39;\\t&#39;</code>)匹配相应的特殊字符。</li>
</ul>
<p>下表列出了正则表达式模式语法中的特殊元素。如果使用模式的同时提供了可选的标志参数，某些模式元素的含义会改变。</p>
<table>
<thead>
<tr>
<th align="left">模式</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">^</td>
<td align="left">匹配字符串的开头</td>
</tr>
<tr>
<td align="left">$</td>
<td align="left">匹配字符串的末尾。</td>
</tr>
<tr>
<td align="left">.</td>
<td align="left">匹配任意字符，除了换行符，当re.DOTALL标记被指定时，则可以匹配包括换行符的任意字符。</td>
</tr>
<tr>
<td align="left">[…]</td>
<td align="left">用来表示一组字符,单独列出：[amk] 匹配 ‘a’，’m’或’k’</td>
</tr>
<tr>
<td align="left">[^…]</td>
<td align="left">不在[]中的字符：[^abc] 匹配除了a,b,c之外的字符。</td>
</tr>
<tr>
<td align="left">re*</td>
<td align="left">匹配0个或多个的表达式。</td>
</tr>
<tr>
<td align="left">re+</td>
<td align="left">匹配1个或多个的表达式。</td>
</tr>
<tr>
<td align="left">re?</td>
<td align="left">匹配0个或1个由前面的正则表达式定义的片段，非贪婪方式</td>
</tr>
<tr>
<td align="left">re{ n}</td>
<td align="left">精确匹配 n 个前面表达式。例如， <strong>o{2}</strong> 不能匹配 “Bob” 中的 “o”，但是能匹配 “food” 中的两个 o。</td>
</tr>
<tr>
<td align="left">re{n,}</td>
<td align="left">匹配 n 个前面表达式。例如， o{2,} 不能匹配”Bob”中的”o”，但能匹配 “foooood”中的所有 o。”o{1,}” 等价于 “o+”。”o{0,}” 则等价于 “o*”。</td>
</tr>
<tr>
<td align="left">re{n,m}</td>
<td align="left">匹配 n 到 m 次由前面的正则表达式定义的片段，贪婪方式</td>
</tr>
<tr>
<td align="left">a| b</td>
<td align="left">匹配a或b</td>
</tr>
<tr>
<td align="left">(re)</td>
<td align="left">对正则表达式分组并记住匹配的文本</td>
</tr>
<tr>
<td align="left">(?imx)</td>
<td align="left">正则表达式包含三种可选标志：i, m, 或 x 。只影响括号中的区域。</td>
</tr>
<tr>
<td align="left">(?-imx)</td>
<td align="left">正则表达式关闭 i, m, 或 x 可选标志。只影响括号中的区域。</td>
</tr>
<tr>
<td align="left">(?: re)</td>
<td align="left">类似 (…), 但是不表示一个组</td>
</tr>
<tr>
<td align="left">(?imx:re)</td>
<td align="left">在括号中使用i, m, 或 x 可选标志</td>
</tr>
<tr>
<td align="left">(?-imx:re)</td>
<td align="left">在括号中不使用i, m, 或 x 可选标志</td>
</tr>
<tr>
<td align="left">(?#…)</td>
<td align="left">注释.</td>
</tr>
<tr>
<td align="left">(?&#x3D; re)</td>
<td align="left">前向肯定界定符。如果所含正则表达式，以 … 表示，在当前位置成功匹配时成功，否则失败。但一旦所含表达式已经尝试，匹配引擎根本没有提高；模式的剩余部分还要尝试界定符的右边。</td>
</tr>
<tr>
<td align="left">(?! re)</td>
<td align="left">前向否定界定符。与肯定界定符相反；当所含表达式不能在字符串当前位置匹配时成功</td>
</tr>
<tr>
<td align="left">(?&gt; re)</td>
<td align="left">匹配的独立模式，省去回溯。</td>
</tr>
<tr>
<td align="left">\w</td>
<td align="left">匹配字母数字及下划线</td>
</tr>
<tr>
<td align="left">\W</td>
<td align="left">匹配非字母数字及下划线</td>
</tr>
<tr>
<td align="left">\s</td>
<td align="left">匹配任意空白字符，等价于 **[ \t\n\r\f]**。</td>
</tr>
<tr>
<td align="left">\S</td>
<td align="left">匹配任意非空字符</td>
</tr>
<tr>
<td align="left">\d</td>
<td align="left">匹配任意数字，等价于 [0-9].</td>
</tr>
<tr>
<td align="left">\D</td>
<td align="left">匹配任意非数字</td>
</tr>
<tr>
<td align="left">\A</td>
<td align="left">匹配字符串开始</td>
</tr>
<tr>
<td align="left">\Z</td>
<td align="left">匹配字符串结束，如果是存在换行，只匹配到换行前的结束字符串。</td>
</tr>
<tr>
<td align="left">\z</td>
<td align="left">匹配字符串结束</td>
</tr>
<tr>
<td align="left">\G</td>
<td align="left">匹配最后匹配完成的位置。</td>
</tr>
<tr>
<td align="left">\b</td>
<td align="left">匹配一个单词边界，也就是指单词和空格间的位置。例如， ‘er\b’ 可以匹配”never” 中的 ‘er’，但不能匹配 “verb” 中的 ‘er’。</td>
</tr>
<tr>
<td align="left">\B</td>
<td align="left">匹配非单词边界。’er\B’ 能匹配 “verb” 中的 ‘er’，但不能匹配 “never” 中的 ‘er’。</td>
</tr>
<tr>
<td align="left">\n, \t, 等.</td>
<td align="left">匹配一个换行符。匹配一个制表符。等</td>
</tr>
<tr>
<td align="left">\1…\9</td>
<td align="left">匹配第n个分组的内容。</td>
</tr>
<tr>
<td align="left">\10</td>
<td align="left">匹配第n个分组的内容，如果它经匹配。否则指的是八进制字符码的表达式。</td>
</tr>
</tbody></table>
<blockquote>
<p><code>+</code>匹配一个或多个，如<code>\d+</code>就是匹配一个或多个数字：0，11，234。</p>
</blockquote>
<h5 id="3-获取匹配表达式"><a href="#3-获取匹配表达式" class="headerlink" title="[3] 获取匹配表达式"></a>[3] 获取匹配表达式</h5><p>可以使用 group(num) 或 groups() 匹配对象函数来获取匹配表达式。</p>
<table>
<thead>
<tr>
<th align="left">匹配对象方法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">group(num&#x3D;0)</td>
<td align="left">匹配的整个表达式的字符串，group() 可以一次输入多个组号，在这种情况下它将返回一个包含那些组所对应值的元组。</td>
</tr>
<tr>
<td align="left">groups()</td>
<td align="left">返回一个包含所有小组字符串的元组，从 1 到 所含的小组号。</td>
</tr>
</tbody></table>
<p>例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">pattern = <span class="string">r&#x27;yyl&#x27;</span></span><br><span class="line"></span><br><span class="line">s1 = <span class="string">&#x27;yyldsiphdkd123jksnyylsfkd45f&#x27;</span></span><br><span class="line">match1 = re.match(pattern, s1, re.I)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;pattern与s1的匹配状况为：<span class="subst">&#123;match1&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;匹配值的起始位置为：<span class="subst">&#123;match1.start()&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;匹配值的结束位置为：<span class="subst">&#123;match1.end()&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;匹配位置的元组为：<span class="subst">&#123;match1.span()&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;要匹配的字符串为：<span class="subst">&#123;match1.string&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;匹配的数据为：<span class="subst">&#123;match1.group()&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s2 = <span class="string">&#x27;d3k4jfnklh&lt;jCOPyyl&#x27;</span></span><br><span class="line">match2 = re.match(pattern, s2,re.I)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;pattern与s2的匹配状况为：<span class="subst">&#123;match2&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pattern与s1的匹配状况为：&lt;re.Match object; span=(0, 3), match=&#x27;yyl&#x27;&gt;</span><br><span class="line">匹配值的起始位置为：0</span><br><span class="line">匹配值的结束位置为：3</span><br><span class="line">匹配位置的元组为：(0, 3)</span><br><span class="line">要匹配的字符串为：yyldsiphdkd123jksnyylsfkd45f</span><br><span class="line">匹配的数据为：yyl</span><br><span class="line">pattern与s2的匹配状况为：None</span><br></pre></td></tr></table></figure>



<h4 id="2-2-2-search"><a href="#2-2-2-search" class="headerlink" title="2.2.2 search()"></a>2.2.2 search()</h4><p><code>re.search(pattern, string, flags=0)</code>：在整个字符串中搜索第一个匹配的值，匹配成功<code>re.search</code>方法返回一个匹配的对象，否则返回<code>None</code>。</p>
<p>其余方法同<code>match()</code></p>
<p>例子： </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s3 = <span class="string">&#x27;d3k4jfnklh&lt;jCOPyyl&#x27;</span></span><br><span class="line">match3 = re.search(pattern, s3,re.I)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;pattern与s2的匹配状况为：<span class="subst">&#123;match3&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;匹配值的起始位置为：<span class="subst">&#123;match3.start()&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;匹配值的结束位置为：<span class="subst">&#123;match3.end()&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;匹配位置的元组为：<span class="subst">&#123;match3.span()&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;要匹配的字符串为：<span class="subst">&#123;match3.string&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;匹配的数据为：<span class="subst">&#123;match3.group()&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pattern与s2的匹配状况为：&lt;re.Match object; span=(15, 18), match=&#x27;yyl&#x27;&gt;</span><br><span class="line">匹配值的起始位置为：15</span><br><span class="line">匹配值的结束位置为：18</span><br><span class="line">匹配位置的元组为：(15, 18)</span><br><span class="line">要匹配的字符串为：d3k4jfnklh&lt;jCOPyyl</span><br><span class="line">匹配的数据为：yyl</span><br></pre></td></tr></table></figure>



<h4 id="2-2-3-findall"><a href="#2-2-3-findall" class="headerlink" title="2.2.3 findall()"></a>2.2.3 findall()</h4><p><code>findall(string[, pos[, endpos]])</code>：在整个字符串中搜索所有符合正则表达式的字符串，返回列表。</p>
<p>参数：</p>
<ul>
<li>string : 待匹配的字符串。</li>
<li>pos : 可选参数，指定字符串的起始位置，默认为 0。</li>
<li>endpos : 可选参数，指定字符串的结束位置，默认为字符串的长度</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 匹配正则表达式:yyl</span></span><br><span class="line">pattern = <span class="string">r&#x27;yyl&#x27;</span></span><br><span class="line">s4 = <span class="string">&#x27;d3k42jfyylnklh&lt;jCOPyyl&#x27;</span></span><br><span class="line">match4 = re.findall(pattern, s4)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;pattern与s4的匹配结果为：<span class="subst">&#123;match4&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配正则表达式:一个任意数字</span></span><br><span class="line">pattern1 = <span class="string">r&#x27;\d&#x27;</span></span><br><span class="line">match5 = re.findall(pattern1, s4)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;pattern1与s4的匹配结果为：<span class="subst">&#123;match5&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配正则表达式:一个或多个任意数字</span></span><br><span class="line">pattern2 = <span class="string">r&#x27;\d+&#x27;</span></span><br><span class="line">match6 = re.findall(pattern2, s4)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;pattern2与s4的匹配结果为：<span class="subst">&#123;match6&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pattern与s4的匹配结果为：[&#x27;yyl&#x27;, &#x27;yyl&#x27;]</span><br><span class="line">pattern1与s4的匹配结果为：[&#x27;3&#x27;, &#x27;4&#x27;, &#x27;2&#x27;]</span><br><span class="line">pattern2与s4的匹配结果为：[&#x27;3&#x27;, &#x27;42&#x27;]</span><br></pre></td></tr></table></figure>



<h3 id="2-3-替换字符串sub"><a href="#2-3-替换字符串sub" class="headerlink" title="2.3 替换字符串sub()"></a>2.3 替换字符串<code>sub()</code></h3><p><code>re.sub(pattern, repl, string, count=0, flags=0)</code>：实现字符串替换中的匹配项。</p>
<p>参数：</p>
<ul>
<li>pattern : 正则中的模式字符串。</li>
<li>repl : 替换的字符串，也可为一个函数。</li>
<li>string : 要被查找替换的原始字符串。</li>
<li>count : 模式匹配后替换的最大次数，默认 0 表示替换所有的匹配。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">phone = <span class="string">&quot;2004-959-559 # 这是一个国外电话号码&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除字符串中的 Python注释</span></span><br><span class="line">num = re.sub(<span class="string">r&#x27;#.*$&#x27;</span>, <span class="string">&quot;&quot;</span>, phone)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;电话号码是: &quot;</span>, num)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除非数字(-)的字符串</span></span><br><span class="line">num = re.sub(<span class="string">r&#x27;\D&#x27;</span>, <span class="string">&quot;&quot;</span>, phone)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;电话号码是 : &quot;</span>, num)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">电话号码是:  2004-959-559 </span><br><span class="line">电话号码是 :  2004959559</span><br></pre></td></tr></table></figure>



<h3 id="2-4-分割字符串split"><a href="#2-4-分割字符串split" class="headerlink" title="2.4 分割字符串split()"></a>2.4 分割字符串<code>split()</code></h3><p><code>re.split(pattern, string[, maxsplit=0, flags=0])</code>：根据匹配的子串将字符串分割后返回列表</p>
<p>参数：</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">pattern</td>
<td align="left">匹配的正则表达式</td>
</tr>
<tr>
<td align="left">string</td>
<td align="left">要匹配的字符串。</td>
</tr>
<tr>
<td align="left">maxsplit</td>
<td align="left">分隔次数，maxsplit&#x3D;1 分隔一次，默认为 0，不限制次数。</td>
</tr>
<tr>
<td align="left">flags</td>
<td align="left">标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。（参见：正则表达式修饰符 - 可选标志）</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pattern = <span class="string">r&#x27;[?|&amp;]&#x27;</span></span><br><span class="line">url = <span class="string">&#x27;https://space.bilibili.com/3063235/favlist?spm_id_from=333.1007.0.0&#x27;</span></span><br><span class="line">r = re.split(pattern, url)</span><br><span class="line"><span class="built_in">print</span>(r)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[&#x27;https://space.bilibili.com/3063235/favlist&#x27;,&#x27;spm_id_from=333.1007.0.0&#x27;]</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>测试学习</category>
      </categories>
      <tags>
        <tag>python编程语言</tag>
      </tags>
  </entry>
  <entry>
    <title>16.1 内置库-logging</title>
    <url>/2022/03/10/16-1-%E5%86%85%E7%BD%AE%E5%BA%93-logging/</url>
    <content><![CDATA[<h1 id="日志logging"><a href="#日志logging" class="headerlink" title="日志logging"></a>日志logging</h1><h2 id="1-日志作用"><a href="#1-日志作用" class="headerlink" title="1. 日志作用"></a>1. 日志作用</h2><ul>
<li>调试</li>
<li>复制定位问题</li>
<li>数据分析</li>
</ul>
<h2 id="1-1-日志的级别"><a href="#1-1-日志的级别" class="headerlink" title="1.1 日志的级别"></a>1.1 日志的级别</h2><table>
<thead>
<tr>
<th>级别</th>
<th>何时使用</th>
<th>级别数值</th>
</tr>
</thead>
<tbody><tr>
<td><code>DEBUG</code></td>
<td>细节信息，仅当诊断问题时适用</td>
<td>10</td>
</tr>
<tr>
<td><code>INFO</code></td>
<td>确认程序按预期运行</td>
<td>20</td>
</tr>
<tr>
<td><code>WARNING</code></td>
<td>表明有已经或即将发生的意外（例如：磁盘空间不足）程序仍按预期进行</td>
<td>30</td>
</tr>
<tr>
<td><code>ERROR</code></td>
<td>由于严重的问题，程序的某些功能已经不能正常执行</td>
<td>40</td>
</tr>
<tr>
<td><code>CRITICAL</code></td>
<td>严重的错误，表明程序已不能继续执行</td>
<td>50</td>
</tr>
</tbody></table>
<blockquote>
<p>默认的日志级别是<code>warning</code></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logging.debug(<span class="string">&quot;debug_msg&quot;</span>)</span><br><span class="line">logging.info(<span class="string">&quot;info_msg&quot;</span>)</span><br><span class="line">logging.warning(<span class="string">&quot;warning_msg&quot;</span>)</span><br><span class="line">logging.error(<span class="string">&quot;error_msg&quot;</span>)</span><br><span class="line">logging.critical(<span class="string">&quot;critical_msg&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">WARNING:root:warning_msg</span><br><span class="line">ERROR:root:error_msg</span><br><span class="line">CRITICAL:root:critical_msg</span><br></pre></td></tr></table></figure>

<h2 id="1-2-日志的用法"><a href="#1-2-日志的用法" class="headerlink" title="1.2 日志的用法"></a>1.2 日志的用法</h2><p><a href="https://docs.python.org/zh-cn/3/howto/logging.html">https://docs.python.org/zh-cn/3/howto/logging.html</a></p>
<table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>logging.debug(msg, *args, **kwargs)</code></td>
<td>创建一条严重级别为<code>DEBUG</code>的日志记录</td>
</tr>
<tr>
<td><code>logging.info(msg, *args, **kwargs)</code></td>
<td>创建一条严重级别为<code>INFO</code>的日志记录</td>
</tr>
<tr>
<td><code>logging.warning(msg, *args, **kwargs)</code></td>
<td>创建一条严重级别为<code>WARNING</code>的日志记录</td>
</tr>
<tr>
<td><code>logging.error(msg, *args, **kwargs)</code></td>
<td>创建一条严重级别为<code>ERROR</code>的日志记录</td>
</tr>
<tr>
<td><code>logging.critical(msg, *args, **kwargs)</code></td>
<td>创建一条严重级别为<code>CRITICAL</code>的日志记录</td>
</tr>
<tr>
<td><code>logging.log(level, *args, **kwargs)</code></td>
<td>创建一条严重级别为<code>level</code>的日志记录</td>
</tr>
<tr>
<td><strong><code>logging.basicConfig(**kwargs)</code></strong></td>
<td>对**<code>root logger</code>**进行一次性配置</td>
</tr>
</tbody></table>
<p>日志的输出：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">logging.basicConfig(level=logging.DEBUG)<span class="comment">#将日志的输出级别调节为debug</span></span><br><span class="line">logging.basicConfig(filename=<span class="string">&#x27;demo.log&#x27;</span>,level=logging.DEBUG)<span class="comment">#将日志的输出到demo.log文件中</span></span><br><span class="line">logging.basicConfig(filename=<span class="string">&#x27;demo.log&#x27;</span>,filemote=<span class="string">&#x27;w&#x27;</span>,level=logging.DEBUG)<span class="comment">#先清空再写入，也可以设置为继续写</span></span><br></pre></td></tr></table></figure>

<p>常用的输出（字符串格式化输出）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">logging.debug(<span class="string">&quot;姓名 %s, 年龄%d&quot;</span>,name,age)</span><br><span class="line">logging.debug(<span class="string">&quot;姓名 %s, 年龄%d&quot;</span>,% (name,age))</span><br><span class="line">logging.debug(<span class="string">&quot;姓名 &#123;&#125;, 年龄&#123;&#125;&quot;</span>.<span class="built_in">format</span>(name,age))</span><br><span class="line">logging.debug(<span class="string">f&quot;姓名<span class="subst">&#123;name&#125;</span>, 年龄<span class="subst">&#123;age&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>直接输入上面的代码并不会打印，因为logging的默认级别是WARNING，而此处的日志级别是DEBUG，需要手动设置日志级别，用下面的方法。</p>
<h3 id="1-2-1-logging-basicConfig-函数说明"><a href="#1-2-1-logging-basicConfig-函数说明" class="headerlink" title="1.2.1 logging.basicConfig()函数说明"></a>1.2.1 logging.basicConfig()函数说明</h3><p>该方法用于为logging日志系统做一些基本配置，方法定义如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">logging.basicConfig(**kwargs)</span><br></pre></td></tr></table></figure>

<p>该函数可接收的关键字参数如下：</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>filename</td>
<td>指定日志输出目标文件的文件名，指定该设置项后日志信息就不会被输出到控制台了，日志文件会在python代码文件的相同目录下会生成</td>
</tr>
<tr>
<td>filemode</td>
<td>指定日志文件的打开模式，默认为<code>&#39;a&#39;</code>。需要注意的是，该选项要在filename指定时才有效。<strong>如果希望每次清空再写入，设置为<code>&#39;w&#39;</code></strong></td>
</tr>
<tr>
<td>format</td>
<td>指定日志格式字符串，即指定日志输出时所包含的字段信息以及它们的顺序。logging模块定义的格式字段下面会列出。</td>
</tr>
<tr>
<td><strong>datefmt</strong></td>
<td>指定日期&#x2F;时间格式。需要注意的是，该选项要在format中包含时间字段%(asctime)s时才有效</td>
</tr>
<tr>
<td>level</td>
<td>指定日志器的日志级别。设置哪个级别，就会打印<strong>哪个级别以上</strong>的日志</td>
</tr>
<tr>
<td>stream</td>
<td>指定日志输出目标stream，如<code>sys.stdout</code>、<code>sys.stderr</code>以及网络<code>stream</code>。需要说明的是，stream和filename不能同时提供，否则会引发 <code>ValueError</code>异常</td>
</tr>
<tr>
<td>style</td>
<td>Python 3.2中新添加的配置项。指定format格式字符串的风格，可取值为’%’、’{‘和’$’，默认为’%’</td>
</tr>
<tr>
<td>handlers</td>
<td>Python 3.3中新添加的配置项。该选项如果被指定，它应该是一个创建了多个Handler的可迭代对象，这些handler将会被添加到root logger。需要说明的是：filename、stream和handlers这三个配置项只能有一个存在，不能同时出现2个或3个，否则会引发ValueError异常。</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">logging.basicConfig(filename=<span class="string">&#x27;demo.log&#x27;</span>, filemode=<span class="string">&#x27;w&#x27;</span>, level=logging.DEBUG, <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s | %(levelname)-8s | **%(filename)s | %(message)s&#x27;</span>)</span><br><span class="line">logging.debug(<span class="string">&quot;debug_msg&quot;</span>)</span><br><span class="line">logging.info(<span class="string">&quot;info_msg&quot;</span>)</span><br><span class="line">logging.warning(<span class="string">&quot;warning_msg&quot;</span>)</span><br><span class="line">logging.error(<span class="string">&quot;error_msg&quot;</span>)</span><br><span class="line">logging.critical(<span class="string">&quot;critical_msg&quot;</span>)</span><br><span class="line">name = <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">age = <span class="number">18</span></span><br><span class="line">logging.debug(<span class="string">f&quot;姓名<span class="subst">&#123;name&#125;</span>, 年龄<span class="subst">&#123;age&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>在与该文件相同目录下，生成的<code>demo.log</code>，输出：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">2022</span><span class="number">-03</span><span class="number">-11</span> <span class="number">16</span>:<span class="number">00</span>:<span class="number">23</span>,<span class="number">030</span> | DEBUG    | **logging_demo.py | debug_msg</span><br><span class="line"><span class="number">2022</span><span class="number">-03</span><span class="number">-11</span> <span class="number">16</span>:<span class="number">00</span>:<span class="number">23</span>,<span class="number">030</span> | INFO     | **logging_demo.py | info_msg</span><br><span class="line"><span class="number">2022</span><span class="number">-03</span><span class="number">-11</span> <span class="number">16</span>:<span class="number">00</span>:<span class="number">23</span>,<span class="number">030</span> | WARNING  | **logging_demo.py | warning_msg</span><br><span class="line"><span class="number">2022</span><span class="number">-03</span><span class="number">-11</span> <span class="number">16</span>:<span class="number">00</span>:<span class="number">23</span>,<span class="number">030</span> | ERROR    | **logging_demo.py | error_msg</span><br><span class="line"><span class="number">2022</span><span class="number">-03</span><span class="number">-11</span> <span class="number">16</span>:<span class="number">00</span>:<span class="number">23</span>,<span class="number">030</span> | CRITICAL | **logging_demo.py | critical_msg</span><br><span class="line"><span class="number">2022</span><span class="number">-03</span><span class="number">-11</span> <span class="number">16</span>:<span class="number">00</span>:<span class="number">23</span>,<span class="number">030</span> | DEBUG    | **logging_demo.py | 姓名张三, 年龄<span class="number">18</span></span><br></pre></td></tr></table></figure>

<p><code>datefmt</code> 参数的格式：</p>
<table>
<thead>
<tr>
<th align="left">指令</th>
<th align="left">含意</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>%a</code></td>
<td align="left">本地化的缩写星期中每日的名称。</td>
</tr>
<tr>
<td align="left"><code>%A</code></td>
<td align="left">本地化的星期中每日的完整名称。</td>
</tr>
<tr>
<td align="left"><code>%b</code></td>
<td align="left">本地化的月缩写名称。</td>
</tr>
<tr>
<td align="left"><code>%B</code></td>
<td align="left">本地化的月完整名称。</td>
</tr>
<tr>
<td align="left"><code>%c</code></td>
<td align="left">本地化的适当日期和时间表示。</td>
</tr>
<tr>
<td align="left"><strong><code>%d</code></strong></td>
<td align="left">十进制数 [01,31] 表示的月中日。</td>
</tr>
<tr>
<td align="left"><strong><code>%H</code></strong></td>
<td align="left">十进制数 [00,23] 表示的小时（24小时制）。</td>
</tr>
<tr>
<td align="left"><code>%I</code></td>
<td align="left">十进制数 [01,12] 表示的小时（12小时制）。</td>
</tr>
<tr>
<td align="left"><code>%j</code></td>
<td align="left">十进制数 [001,366] 表示的年中日。</td>
</tr>
<tr>
<td align="left"><strong><code>%m</code></strong></td>
<td align="left">十进制数 [01,12] 表示的月。</td>
</tr>
<tr>
<td align="left"><strong><code>%M</code></strong></td>
<td align="left">十进制数 [00,59] 表示的分钟。</td>
</tr>
<tr>
<td align="left"><code>%p</code></td>
<td align="left">本地化的 AM 或 PM 。</td>
</tr>
<tr>
<td align="left"><strong><code>%S</code></strong></td>
<td align="left">十进制数 [00,61] 表示的秒。</td>
</tr>
<tr>
<td align="left"><code>%U</code></td>
<td align="left">十进制数 [00,53] 表示的一年中的周数（星期日作为一周的第一天）。 在第一个星期日之前的新年中的所有日子都被认为是在第 0 周。</td>
</tr>
<tr>
<td align="left"><code>%w</code></td>
<td align="left">十进制数 [0(星期日),6] 表示的周中日。</td>
</tr>
<tr>
<td align="left"><code>%W</code></td>
<td align="left">十进制数 [00,53] 表示的一年中的周数（星期一作为一周的第一天）。 在第一个星期一之前的新年中的所有日子被认为是在第 0 周。</td>
</tr>
<tr>
<td align="left"><code>%x</code></td>
<td align="left">本地化的适当日期表示。</td>
</tr>
<tr>
<td align="left"><code>%X</code></td>
<td align="left">本地化的适当时间表示。</td>
</tr>
<tr>
<td align="left"><code>%y</code></td>
<td align="left">十进制数 [00,99] 表示的没有世纪的年份。</td>
</tr>
<tr>
<td align="left"><strong><code>%Y</code></strong></td>
<td align="left">十进制数表示的带世纪的年份。</td>
</tr>
<tr>
<td align="left"><code>%z</code></td>
<td align="left">Time zone offset indicating a positive or negative time difference from UTC&#x2F;GMT of the form +HHMM or -HHMM, where H represents decimal hour digits and M represents decimal minute digits [-23:59, +23:59]. <a href="https://docs.python.org/zh-cn/3/library/time.html#id4">1</a></td>
</tr>
<tr>
<td align="left"><code>%Z</code></td>
<td align="left">Time zone name (no characters if no time zone exists). Deprecated. <a href="https://docs.python.org/zh-cn/3/library/time.html#id4">1</a></td>
</tr>
<tr>
<td align="left"><code>%%</code></td>
<td align="left">字面的 <code>&#39;%&#39;</code> 字符。</td>
</tr>
</tbody></table>
<h3 id="1-2-2-logging模块定义的格式字符串字段"><a href="#1-2-2-logging模块定义的格式字符串字段" class="headerlink" title="1.2.2 logging模块定义的格式字符串字段"></a>1.2.2 logging模块定义的格式字符串字段</h3><p>logging模块中定义好的可以用于format格式字符串中的字段：</p>
<table>
<thead>
<tr>
<th>字段&#x2F;属性名称</th>
<th>使用格式</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><strong>asctime</strong></td>
<td>%(asctime)s</td>
<td>日志事件发生的时间–人类可读时间，如：2003-07-08 16:49:45,896</td>
</tr>
<tr>
<td>created</td>
<td>%(created)f</td>
<td>日志事件发生的时间–时间戳，就是当时调用time.time()函数返回的值</td>
</tr>
<tr>
<td>relativeCreated</td>
<td>%(relativeCreated)d</td>
<td>日志事件发生的时间相对于logging模块加载时间的相对毫秒数（目前还不知道干嘛用的）</td>
</tr>
<tr>
<td>msecs</td>
<td>%(msecs)d</td>
<td>日志事件发生事件的毫秒部分</td>
</tr>
<tr>
<td><strong>levelname</strong></td>
<td>%(levelname)s</td>
<td>该日志记录的文字形式的日志级别（’DEBUG’, ‘INFO’, ‘WARNING’, ‘ERROR’, ‘CRITICAL’）</td>
</tr>
<tr>
<td>levelno</td>
<td>%(levelno)s</td>
<td>该日志记录的数字形式的日志级别（10, 20, 30, 40, 50）</td>
</tr>
<tr>
<td>name</td>
<td>%(name)s</td>
<td>所使用的日志器名称，默认是’root’，因为默认使用的是 rootLogger</td>
</tr>
<tr>
<td><strong>message</strong></td>
<td>%(message)s</td>
<td>日志记录的文本内容，通过 <code>msg % args</code>计算得到的</td>
</tr>
<tr>
<td>pathname</td>
<td>%(pathname)s</td>
<td>调用日志记录函数的源码文件的全路径</td>
</tr>
<tr>
<td><strong>filename</strong></td>
<td>%(filename)s</td>
<td>pathname的文件名部分，包含文件后缀</td>
</tr>
<tr>
<td>module</td>
<td>%(module)s</td>
<td>filename的名称部分，不包含后缀</td>
</tr>
<tr>
<td>lineno</td>
<td>%(lineno)d</td>
<td>调用日志记录函数的源代码所在的行号</td>
</tr>
<tr>
<td>funcName</td>
<td>%(funcName)s</td>
<td>调用日志记录函数的函数名</td>
</tr>
<tr>
<td>process</td>
<td>%(process)d</td>
<td>进程ID</td>
</tr>
<tr>
<td>processName</td>
<td>%(processName)s</td>
<td>进程名称，Python 3.1新增</td>
</tr>
<tr>
<td>thread</td>
<td>%(thread)d</td>
<td>线程ID</td>
</tr>
<tr>
<td>threadName</td>
<td>%(thread)s</td>
<td>线程名称</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>测试学习</category>
      </categories>
      <tags>
        <tag>python编程语言</tag>
      </tags>
  </entry>
  <entry>
    <title>16.2 内置库-logging高级使用</title>
    <url>/2022/03/10/16-2-%E5%86%85%E7%BD%AE%E5%BA%93-logging%E9%AB%98%E7%BA%A7%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="logging进阶"><a href="#logging进阶" class="headerlink" title="logging进阶"></a>logging进阶</h1><table>
<thead>
<tr>
<th>组件</th>
<th>说明</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>loggers</code></td>
<td>提供应用程序代码直接使用的接口</td>
<td>记录器</td>
</tr>
<tr>
<td><code>handlers</code></td>
<td>用于将日志记录发送到指定的目的位置</td>
<td>处理器</td>
</tr>
<tr>
<td><code>filters</code></td>
<td>提供更细粒度的日志过滤功能，用于决定哪些日志记录将会被输出（其他的日志记录将会被忽略）</td>
<td>过滤器</td>
</tr>
<tr>
<td><code>formatters</code></td>
<td>用于控制日志信息的最终输出格式</td>
<td>格式化器</td>
</tr>
</tbody></table>
<ul>
<li>日志器（logger）需要通过处理器（handler）将日志信息输出到目标位置，如：文件、sys.stdout、网络等；</li>
<li>不同的处理器（handler）可以将日志输出到不同的位置；</li>
<li>日志器（logger）可以设置多个处理器（handler）将同一条日志记录输出到不同的位置；</li>
<li>每个处理器（handler）都可以设置自己的过滤器（filter）实现日志过滤，从而只保留感兴趣的日志；</li>
<li>每个处理器（handler）都可以设置自己的格式器（formatter）实现同一条日志以不同的格式输出到不同的地方。</li>
</ul>
<p>简单点说就是：日志器（logger）是入口，真正干活儿的是处理器（handler），处理器（handler）还可以通过过滤器（filter）和格式器（formatter）对要输出的日志内容做过滤和格式化等处理操作。</p>
<h2 id="1-日志记录的流程"><a href="#1-日志记录的流程" class="headerlink" title="1. 日志记录的流程"></a>1. 日志记录的流程</h2><p><img src="/2022/03/10/16-2-%E5%86%85%E7%BD%AE%E5%BA%93-logging%E9%AB%98%E7%BA%A7%E4%BD%BF%E7%94%A8/image-20220311114150750.png" alt="image-20220311114150750"></p>
<h3 id="1-1-loggers记录器"><a href="#1-1-loggers记录器" class="headerlink" title="1.1 loggers记录器"></a>1.1 loggers记录器</h3><p><code>Logger</code>是一个树形层级结构，在使用接口<code>debug</code>，<code>info</code>，<code>warn</code>，<code>error</code>，<code>critical</code>之前必须创建<code>Logger</code>实例，即创建一个记录器，如果没有显式的进行创建，则默认创建一个<code>root logger</code>，并应用默认的日志级别<code>WARNING</code>，处理器<code>Handler</code>(<code>StreamHandler</code>，即将日志信息打印输出在标准输出上)，和格式化器<code>Formatter</code>(默认的格式即为第一个简单使用程序中输出的格式)。</p>
<p>1.提供应用程序的调用接口</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">logger = logging.getLogger(__name__)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>logger</code>是单例的</p>
</blockquote>
<p>2.决定日志记录的级别</p>
<p><img src="/2022/03/10/16-2-%E5%86%85%E7%BD%AE%E5%BA%93-logging%E9%AB%98%E7%BA%A7%E4%BD%BF%E7%94%A8/image-20220311181121432.png" alt="image-20220311181121432"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">logger.setLevel(logging.ERROR)</span><br></pre></td></tr></table></figure>

<p>3.将日志内容传递到相关联的<code>handlers</code>中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">logger.addHandler()</span><br><span class="line">logger.removeHandler()</span><br></pre></td></tr></table></figure>

<h3 id="1-2-Handlers处理器"><a href="#1-2-Handlers处理器" class="headerlink" title="1.2 Handlers处理器"></a>1.2 Handlers处理器</h3><p>它们将日志分发到不同的目的地，可以是文件、标准输出、邮件，或者通过<code>socke</code>、<code>http</code>等协议发送到任何地方。</p>
<p>1.<code>StreamHandler</code></p>
<p>标准输出<code>stout</code>（如显示器）分发器。</p>
<p>创建方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sh = logging.StreamHandler(strem = <span class="literal">None</span>)</span><br></pre></td></tr></table></figure>

<p>2.<code>FileHandler</code></p>
<p>将日志保存到磁盘文件的处理器</p>
<p>创建方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fh = logging.FileHandler(filename, mode = <span class="string">&#x27;a&#x27;</span>, encoding = <span class="literal">None</span>, delay = <span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<p><code>setFormatter()</code>：设置当前<code>handler</code>对象使用的消息格式。</p>
<p>其他的Handler：</p>
<ul>
<li><code>BaseRotatingHandler</code></li>
<li><code>Rotating Filehandler</code><br>  滚动的多日志输出，按照时间&#x2F;其他方式去生成多个日志</li>
<li><code>TimedRotatingfilehandler</code></li>
</ul>
<p>以下的使用较少：</p>
<ul>
<li><code>Sockethandler</code></li>
<li><code>Dataaramhandler</code></li>
<li><code>Smtphandler</code></li>
<li><code>Sysloghandler</code></li>
<li><code>Nteventloghandler</code></li>
<li><code>Httphandler</code></li>
<li><code>WatchedFilehandler</code></li>
<li><code>Qutelehandler</code></li>
<li><code>Nullhandler</code></li>
</ul>
<h2 id="Formatters格式"><a href="#Formatters格式" class="headerlink" title="Formatters格式"></a>Formatters格式</h2><p><code>Formatter()</code>对象用来最终设置日志信息的顺序、结构和内容。<br>其构造方法为</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ft = logging.Formatter(fmt = <span class="literal">None</span>, datefmt = <span class="literal">None</span>, style = <span class="string">&#x27; %&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><code>datefmt</code>默认是<code>%Y-%m-%d  %H:%M:%S</code>样式的<br><code>style</code>参数默认为百分符<code>%</code>，这表示<code>%(&lt;dictionary key&gt;:)s</code>格式的字符串。</p>
<p>同上一节<em>1.2.2 logging模块定义的格式字符串字段</em></p>
<p>例子：在一个python文件中设置日志。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="comment"># 记录器</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">logger = logging.getLogger(<span class="string">&#x27;applog&#x27;</span>)</span><br><span class="line">logger.setLevel(logging.DEBUG)</span><br><span class="line"><span class="comment"># 必须设置为两个handler中级别更低的</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理器handler</span></span><br><span class="line">consoleHandler = logging.StreamHandler()</span><br><span class="line">consoleHandler.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 没有给handler指定日志级别，将使用logger的级别</span></span><br><span class="line">fileHandler = logging.FileHandler(filename=<span class="string">&#x27;addDemo.log&#x27;</span>)</span><br><span class="line">consoleHandler.setLevel(logging.INFO)</span><br><span class="line"></span><br><span class="line"><span class="comment"># formatter格式</span></span><br><span class="line">formatter = logging.Formatter(<span class="string">&#x27;%(asctime)s - %(name)s - %(levelname)s - %(message)s&#x27;</span>)</span><br><span class="line"><span class="comment"># 里面的8，10实现了占位对齐</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 给处理器设置格式</span></span><br><span class="line">consoleHandler.setFormatter(formatter)</span><br><span class="line">fileHandler.setFormatter(formatter)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 记录器要设置处理器</span></span><br><span class="line">logger.addHandler(consoleHandler)</span><br><span class="line">logger.addHandler(fileHandler)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个过滤器</span></span><br><span class="line">flt = logging.Filter(<span class="string">&quot;applog&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关联过滤器</span></span><br><span class="line">logger.addFilter(flt)</span><br><span class="line">fileHandler.addFilter(flt)</span><br><span class="line">name = <span class="string">&#x27;yyl&#x27;</span></span><br><span class="line">age = <span class="number">30</span></span><br><span class="line"><span class="comment"># 打印日志的代码</span></span><br><span class="line"><span class="comment"># logging.debug()#不能使用这个了！！！会使用WARNING的版本，不会用之前的记录器</span></span><br><span class="line">logger.debug(<span class="string">&#x27;name:%s,age:%s&#x27;</span> % (name, age))</span><br></pre></td></tr></table></figure>

<p><code>addDemo.log</code>文件中：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">2022</span><span class="number">-03</span><span class="number">-14</span> <span class="number">10</span>:<span class="number">32</span>:<span class="number">48</span>,<span class="number">631</span> - applog - DEBUG - name:yyl,age:<span class="number">30</span></span><br></pre></td></tr></table></figure>

<p>但是如果多个文件都需要设置日志，可以采用封装的方法。</p>
<h2 id="封装日志公共模块"><a href="#封装日志公共模块" class="headerlink" title="封装日志公共模块"></a>封装日志公共模块</h2><p>定义获取 logger 的公共方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_logger</span>():</span><br><span class="line">    <span class="comment"># create logger</span></span><br><span class="line">    logger = logging.getLogger(os.path.basename(__file__))</span><br><span class="line">    logger.setLevel(logging.DEBUG)</span><br><span class="line">    <span class="comment"># create console handler and set level to debug</span></span><br><span class="line">    ch = logging.FileHandler(filename=<span class="string">&#x27;mylog.log&#x27;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    ch.setLevel(logging.DEBUG)</span><br><span class="line">    <span class="comment"># create formatter</span></span><br><span class="line">    formatter = logging.Formatter(<span class="string">&#x27;%(asctime)s - %(name)s - %(levelname)s - %(message)s&#x27;</span>)</span><br><span class="line">    <span class="comment"># add formatter to ch</span></span><br><span class="line">    ch.setFormatter(formatter)</span><br><span class="line">    <span class="comment"># add ch to logger</span></span><br><span class="line">    logger.addHandler(ch)</span><br><span class="line">    <span class="keyword">return</span>  logger</span><br></pre></td></tr></table></figure>

<p>在需要日志的文件中导入这个方法即可。</p>
<h2 id="日志配置文件"><a href="#日志配置文件" class="headerlink" title="日志配置文件"></a>日志配置文件</h2><p>或者可以使用日志配置，更方便简洁。</p>
<ul>
<li>创建log_util.py 文件</li>
<li>使用的地方导入 logger对象，调用对应的日志输出方法</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> logging.handlers <span class="keyword">import</span> RotatingFileHandler</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绑定绑定句柄到logger对象</span></span><br><span class="line">logger = logging.getLogger(__name__)</span><br><span class="line"><span class="comment"># 获取当前工具文件所在的路径</span></span><br><span class="line">root_path = os.path.dirname(os.path.abspath(__file__))</span><br><span class="line"><span class="comment"># 拼接当前要输出日志的路径</span></span><br><span class="line">log_dir_path = os.sep.join([root_path, <span class="string">f&#x27;/logs&#x27;</span>])</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(log_dir_path):</span><br><span class="line">    os.mkdir(log_dir_path)</span><br><span class="line"><span class="comment"># 创建日志记录器，指明日志保存路径,每个日志的大小，保存日志的上限</span></span><br><span class="line">file_log_handler = RotatingFileHandler(os.sep.join([log_dir_path, <span class="string">&#x27;log.log&#x27;</span>]), maxBytes=<span class="number">1024</span> * <span class="number">1024</span>, backupCount=<span class="number">10</span>)</span><br><span class="line"><span class="comment"># 设置日志的格式</span></span><br><span class="line">date_string = <span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span></span><br><span class="line">formatter = logging.Formatter(</span><br><span class="line">    <span class="string">&#x27;[%(asctime)s] [%(levelname)s] [%(filename)s]/[line: %(lineno)d]/[%(funcName)s] %(message)s &#x27;</span>, date_string)</span><br><span class="line"><span class="comment"># 日志输出到控制台的句柄</span></span><br><span class="line">stream_handler = logging.StreamHandler()</span><br><span class="line"><span class="comment"># 将日志记录器指定日志的格式</span></span><br><span class="line">file_log_handler.setFormatter(formatter)</span><br><span class="line">stream_handler.setFormatter(formatter)</span><br><span class="line"><span class="comment"># 为全局的日志工具对象添加日志记录器</span></span><br><span class="line"><span class="comment"># 绑定绑定句柄到logger对象</span></span><br><span class="line">logger.addHandler(stream_handler)</span><br><span class="line">logger.addHandler(file_log_handler)</span><br><span class="line"><span class="comment"># 设置日志输出级别</span></span><br><span class="line">logger.setLevel(level=logging.INFO)</span><br></pre></td></tr></table></figure>

<p>配置文件 <code>logging.conf</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">[loggers] <span class="meta"># loggers 对象列表</span></span><br><span class="line">        keys=root,main</span><br><span class="line"></span><br><span class="line">[handlers] <span class="meta"># handlers 对象列表</span></span><br><span class="line">        keys=consoleHandlers,fileHandlers</span><br><span class="line"></span><br><span class="line">[formatters] <span class="meta"># formatters 列表</span></span><br><span class="line">        keys=fmt</span><br><span class="line"></span><br><span class="line">[logger_root]</span><br><span class="line">        level=DEBUG</span><br><span class="line">        handlers=consoleHandlers,fileHandlers</span><br><span class="line"></span><br><span class="line">[logger_main] <span class="meta"># main logger</span></span><br><span class="line">        level = DEBUG</span><br><span class="line">        handlers = fileHandlers</span><br><span class="line">        qualname=main</span><br><span class="line">        propagate=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">[handler_consoleHandlers] # consoleHandlers 指定控制器的输出方向、级别、输出格式、参数</span><br><span class="line">        <span class="keyword">class</span> = StreamHandler</span><br><span class="line">        level = DEBUG</span><br><span class="line">        formatter = fmt</span><br><span class="line">        args = (sys.stdout,)</span><br><span class="line"></span><br><span class="line">[handler_fileHandlers] # 循环日志文件 以文件大小来 分割# 每隔 <span class="number">1000</span> Byte 划分一个日志文件，备份文件为 <span class="number">3</span> 个</span><br><span class="line">        <span class="keyword">class</span> = logging.handlers.RotatingFileHandler</span><br><span class="line">        level = DEBUG</span><br><span class="line">        formatter = fmt</span><br><span class="line">        args = (<span class="string">&#x27;./log/test.log&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">10000</span>, <span class="number">3</span>, <span class="string">&#x27;UTF-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">[formatter_fmt] <span class="meta"># fmt 格式</span></span><br><span class="line">        format=%(asctime)s - %(name)s - %(levelname)s - %(message)s</span><br><span class="line">        datefmt=</span><br></pre></td></tr></table></figure>

<p> python文件 <code>logging_demo.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging.config</span><br><span class="line"><span class="comment"># 读取配置文件 # 采用配置文件</span></span><br><span class="line">logging.config.fileConfig(<span class="string">&quot;logging.conf&quot;</span>)</span><br><span class="line"><span class="comment"># 创建logger</span></span><br><span class="line">logger = logging.getLogger(<span class="string">&#x27;main&#x27;</span>)</span><br><span class="line"><span class="comment"># 日志生成</span></span><br><span class="line">logger.debug(<span class="string">&#x27; Hello tom&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>文件目录如下：<br><img src="/2022/03/10/16-2-%E5%86%85%E7%BD%AE%E5%BA%93-logging%E9%AB%98%E7%BA%A7%E4%BD%BF%E7%94%A8/image-20220314135523837.png" alt="image-20220314135523837" style="zoom:50%;"></p>
]]></content>
      <categories>
        <category>测试学习</category>
      </categories>
      <tags>
        <tag>python编程语言</tag>
      </tags>
  </entry>
  <entry>
    <title>17.1&amp;17.2 Python脚本编写实战</title>
    <url>/2022/02/24/17-1-17-2-Python%E8%84%9A%E6%9C%AC%E7%BC%96%E5%86%99%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<h4 id="pycharm-常用快捷键"><a href="#pycharm-常用快捷键" class="headerlink" title="pycharm 常用快捷键"></a>pycharm 常用快捷键</h4><ul>
<li>快速导包：alt + enter</li>
<li>注释：ctrl + &#x2F;</li>
<li>代码格式化：ctrl + alt + L</li>
<li>复制一行代码：ctrl + d</li>
</ul>
<h4 id="入口函数"><a href="#入口函数" class="headerlink" title="入口函数"></a>入口函数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span></span><br></pre></td></tr></table></figure>

<p>单独执行一个文件的时候效果一样。但是在外部模块调用的时候效果就不一样了。外部模块调用的时候，入口函数中的代码不会被执行。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Bicycle</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, model, color</span>):</span><br><span class="line">        self.model = model</span><br><span class="line">        self.color = color</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self, km</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;自行车骑行距离：%dkm&#x27;</span>% km)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EBicycle</span>(<span class="title class_ inherited__">Bicycle</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, model, color, volume</span>):</span><br><span class="line">        self.volume = <span class="built_in">int</span>(volume)</span><br><span class="line">        <span class="built_in">super</span>().__init__(model, color)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">look_style</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;车辆信息如下：&#x27;</span></span><br><span class="line">              <span class="string">&#x27;1.型号：%s；&#x27;</span></span><br><span class="line">              <span class="string">&#x27;2.颜色：%s；&#x27;</span></span><br><span class="line">              <span class="string">&#x27;3.电量：%d&#x27;</span></span><br><span class="line">              % (self.model, self.color, self.volume))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fill_charge</span>(<span class="params">self, vol</span>):</span><br><span class="line">        self.volume += vol</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;充电%d度，当前电量为%d&#x27;</span> % (vol, self.volume))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self, km, bike</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;需要骑行%dkm&#x27;</span> % km)</span><br><span class="line">        <span class="keyword">if</span> self.volume &gt; <span class="number">0</span> &amp; <span class="built_in">int</span>(km/<span class="number">10</span>) &gt;= self.volume:</span><br><span class="line">            self.volume -= <span class="built_in">int</span>(km / <span class="number">10</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;骑行%dkm，还剩%d度电&#x27;</span> % (km, self.volume))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            km -= <span class="built_in">int</span>(self.volume * <span class="number">10</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;电不多了，还需骑行%dkm&#x27;</span> % km)</span><br><span class="line">            <span class="built_in">super</span>().run(km)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    bike = Bicycle(<span class="string">&#x27;自行车&#x27;</span>, <span class="string">&#x27;蓝色&#x27;</span>)</span><br><span class="line">    eb = EBicycle(<span class="string">&#x27;电动车&#x27;</span>, <span class="string">&#x27;白色&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">    eb.look_style()</span><br><span class="line">    eb.fill_charge(<span class="number">3</span>)</span><br><span class="line">    eb.run(<span class="number">70</span>, bike)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">车辆信息如下：<span class="number">1.</span>型号：电动车；<span class="number">2.</span>颜色：白色；<span class="number">3.</span>电量：<span class="number">2</span></span><br><span class="line">充电<span class="number">3</span>度，当前电量为<span class="number">5</span></span><br><span class="line">需要骑行70km</span><br><span class="line">电不多了，还需骑行20km</span><br><span class="line">自行车骑行距离：20km</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>测试学习</category>
      </categories>
      <tags>
        <tag>python编程语言</tag>
      </tags>
  </entry>
  <entry>
    <title>2.1 软件开发流程</title>
    <url>/2022/02/18/2-1-%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="2-1-软件开发流程"><a href="#2-1-软件开发流程" class="headerlink" title="2-1 软件开发流程"></a>2-1 软件开发流程</h1><h2 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h2><p>​        与计算机系统操作有关的计算机程序、可能有的文件、文档及数据。</p>
<h2 id="软件开发流程的演变"><a href="#软件开发流程的演变" class="headerlink" title="软件开发流程的演变"></a>软件开发流程的演变</h2><img src="/2022/02/18/2-1-%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/image-20220213215429575.png" alt="image-20220213215429575" style="zoom:50%;">

<h2 id="瀑布模型"><a href="#瀑布模型" class="headerlink" title="瀑布模型"></a>瀑布模型</h2><ol>
<li>软件开发的各项活动严格按照线性方式进行</li>
<li>当前活动接受上一项活动的工作结果</li>
<li>当前活动的工作结果需要进行验证</li>
</ol>
<p>​    <strong>优点</strong></p>
<ul>
<li><p>开发的各个阶段比较清晰</p>
</li>
<li><p>强调早期计划及需求调查</p>
</li>
<li><p>适合需求稳定的产品开发</p>
</li>
</ul>
<p>​    <strong>缺点</strong></p>
<ul>
<li>由于开发模型是线性的，增加了开发的风险</li>
<li>早期的错误可能要等到开发后期的阶段才能发现</li>
</ul>
<h2 id="敏捷开发模型"><a href="#敏捷开发模型" class="headerlink" title="敏捷开发模型"></a>敏捷开发模型</h2><p>XP</p>
<img src="/2022/02/18/2-1-%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/57a1c7db-ee18-4377-9ce6-917b0cfb52d1-16332047-16451977726628.jpg" alt="img" style="zoom:67%;">

<p>编程方法：从简单设计开始，顺时针开始<br>小组实践：从代码集体所有开始，顺时针开始<br>交付和管理：从小规模发布开始，逆时针进行</p>
<p>SCEUM</p>
<img src="/2022/02/18/2-1-%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/37f263f6-25f8-46b0-9373-2da1775b163a-16332047-16451977830819.jpg" alt="img" style="zoom: 67%;">

<p>sprint冲刺（迭代周期)<br>产品BACKLOG：产品需求列表<br>SPRINT计划会议：按优先级进行<br>​SPRINT BACKLOG：周期内要去实现的需求</p>
<p>敏捷模型总结</p>
<ul>
<li><p>增量迭代</p>
</li>
<li><p>小步快跑</p>
</li>
</ul>
<h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><p>可以把DevOps看作开发（<a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/25279">软件工程</a>）、技术运营和质量保障（QA）三者的交集。</p>
<ul>
<li><p>DevOps生命周期</p>
<ul>
<li><p>持续开发</p>
</li>
<li><p>持续测试</p>
</li>
<li><p>持续集成</p>
</li>
<li><p>持续部署</p>
</li>
<li><p>持续监控</p>
</li>
</ul>
</li>
<li><p>DevOps对发布的影响</p>
<ul>
<li><p>减少变更范围</p>
</li>
<li><p>加强发布协调</p>
</li>
<li><p>自动化</p>
</li>
</ul>
</li>
<li><p>CI&#x2F;CD</p>
<ul>
<li><p>持续集成（Continuous integration，缩写为CI）是一种软件开发实践，即团队开发成员经常集成他们的工作，通常每个成员每天至少集成一次，也就意味着每天可能会发生多次集成，每次集成都通过自动化的构建（包括编译，发布，自动化测试）来验证，根据测试结果，我们可以确定新代码和原有代码能否正确地集成在一起。</p>
</li>
<li><p>持续交付（Continuous delivery，缩写为CD），是一种软件工程手法，让软件产品的产出过程在一个短周期内完成，以保证软件可以稳定、持续的保持在随时可以发布的状况。它的目标在于让软件的构建、测试与发布变得更快以及更频繁。这种方式可以减少软件开发的成本与时间，减少风险。</p>
</li>
</ul>
</li>
<li><p>CD与DevOps的关系</p>
<ul>
<li><p>DevOps的范围更广，是软件交付过程所涉及的多个团队之间的合作，并且将软件交付的过程自动化。</p>
</li>
<li><p>持续交付是一种自动化交付的手段，关注点在于将不同的过程集中起来，并且更快、更频繁地执行这些过程。</p>
</li>
<li><p>DevOps可以是持续交付下的一个产物，持续交付的成果直接汇入DevOps模型。</p>
</li>
</ul>
<h2 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h2><ul>
<li><p>敏捷开发模型</p>
</li>
<li><p>DevOps</p>
</li>
</ul>
<h2 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h2><ul>
<li>DevOps</li>
</ul>
</li>
</ul>
<h2 id="笔记总结"><a href="#笔记总结" class="headerlink" title="笔记总结"></a>笔记总结</h2><ul>
<li>现在的公司大多是进行自动化测试。</li>
</ul>
]]></content>
      <categories>
        <category>测试学习</category>
      </categories>
      <tags>
        <tag>测试方法与理论</tag>
      </tags>
  </entry>
  <entry>
    <title>2.10 黑盒测试方法论——边界值</title>
    <url>/2022/02/19/2-10-%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95%E8%AE%BA%E2%80%94%E2%80%94%E8%BE%B9%E7%95%8C%E5%80%BC/</url>
    <content><![CDATA[<h1 id="边界值分析法"><a href="#边界值分析法" class="headerlink" title="边界值分析法"></a>边界值分析法</h1><ul>
<li><p>大量的软件测试实践表明，故障往往出现在定义域或值域的边界上，而不是在其内部</p>
</li>
<li><p>为检测边界附近的处理专门设计测试用例，通常都会取得很好的测试效果</p>
</li>
<li><p>边界值分析法是一种很实用的黑盒测试用例方法，它具有很强的发现故障的能力</p>
</li>
<li><p>边界值分析法是作为对等价类划分法的补充，测试用例来自等价类的边界</p>
</li>
</ul>
<h1 id="边界值确定"><a href="#边界值确定" class="headerlink" title="边界值确定"></a>边界值确定</h1><ul>
<li><p>上点：边界上的点</p>
</li>
<li><p>离点：离上点最近的点</p>
<p>  输入域闭区间：离点在区域外选 </p>
<p>  输入域开区间：离点在区内选</p>
</li>
<li><p>内点：在输入域内任意一个点</p>
</li>
<li><p>选取正好等于、刚好大于或刚好小于边界值作为测试数据</p>
</li>
</ul>
<h1 id="边界点划分规则"><a href="#边界点划分规则" class="headerlink" title="边界点划分规则"></a>边界点划分规则</h1><p>选点时考虑数据类型及精度</p>
<ul>
<li><p>如果规定了输入域的取值范围</p>
<ul>
<li><p>选取刚好在范围边界的点</p>
</li>
<li><p>刚好超过边界的点</p>
</li>
</ul>
</li>
<li><p>如果规定了输入值的个数</p>
<ul>
<li><p>最大个数</p>
</li>
<li><p>最小个数</p>
</li>
<li><p>比最小个数少1</p>
</li>
<li><p>比最大个数多1</p>
</li>
</ul>
</li>
<li><p>如果规定了输入是一个有序的集合</p>
<ul>
<li><p>选取集合的第一个元素</p>
</li>
<li><p>选取集合的最后一个元素</p>
</li>
</ul>
</li>
</ul>
<h1 id="边界值总结"><a href="#边界值总结" class="headerlink" title="边界值总结"></a>边界值总结</h1><ul>
<li><p>确定边界情况</p>
</li>
<li><p>选取正好等于、刚刚好大于或刚刚好小于边界值作为测试数据</p>
</li>
<li><p>确定各个值的等价类</p>
</li>
</ul>
]]></content>
      <categories>
        <category>测试学习</category>
      </categories>
      <tags>
        <tag>测试方法与理论</tag>
      </tags>
  </entry>
  <entry>
    <title>2.2 被测系统架构与数据流分析</title>
    <url>/2022/02/18/2-2-%E8%A2%AB%E6%B5%8B%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E4%B8%8E%E6%95%B0%E6%8D%AE%E6%B5%81%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="开源项目Litemall系统架构"><a href="#开源项目Litemall系统架构" class="headerlink" title="开源项目Litemall系统架构"></a>开源项目Litemall系统架构</h1><img src="/2022/02/18/2-2-%E8%A2%AB%E6%B5%8B%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E4%B8%8E%E6%95%B0%E6%8D%AE%E6%B5%81%E5%88%86%E6%9E%90/image-20220213221031951.png" alt="image-20220213221031951" style="zoom: 45%;">

<p><a href="https://linlinjava.gitbook.io/litemall/">https://linlinjava.gitbook.io/litemall/</a></p>
<ul>
<li><p>角色与数据</p>
</li>
<li><p>用户产品</p>
</li>
<li><p>前端技术栈</p>
</li>
<li><p>后端技术栈</p>
</li>
<li><p>数据存储</p>
</li>
</ul>
<h1 id="开源项目Mall的系统架构"><a href="#开源项目Mall的系统架构" class="headerlink" title="开源项目Mall的系统架构"></a>开源项目Mall的系统架构</h1><img src="/2022/02/18/2-2-%E8%A2%AB%E6%B5%8B%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E4%B8%8E%E6%95%B0%E6%8D%AE%E6%B5%81%E5%88%86%E6%9E%90/image-20220213221049909.png" alt="image-20220213221049909" style="zoom:175%;">

<p><a href="https://gitee.com/macrozheng/mall">https://gitee.com/macrozheng/mall</a></p>
<ul>
<li><p>角色与数据</p>
</li>
<li><p>用户产品</p>
</li>
<li><p>前端技术栈</p>
</li>
<li><p>后端技术栈</p>
</li>
<li><p>服务治理技术栈</p>
</li>
<li><p>监控技术栈</p>
</li>
<li><p>大数据处理技术栈</p>
</li>
<li><p>数据存储</p>
</li>
<li><p>持续集成&#x2F;持续交付&#x2F;DevOps</p>
</li>
</ul>
<h1 id="如何快速了解一家公司的架构"><a href="#如何快速了解一家公司的架构" class="headerlink" title="如何快速了解一家公司的架构"></a>如何快速了解一家公司的架构</h1><ul>
<li><p>业务流程：</p>
<ul>
<li><p>商业模式</p>
</li>
<li><p>业务数据：角色、资源、数据</p>
</li>
<li><p>业务流程：角色、行为、数据的集成关系</p>
</li>
</ul>
</li>
<li><p>系统架构：</p>
<ul>
<li><p>架构角色与技术栈：</p>
<ul>
<li><p>网关：apache&#x2F;nginx&#x2F;f5&#x2F;</p>
</li>
<li><p>应用开发：spring boot&#x2F;spring cloud&#x2F;</p>
</li>
<li><p>通讯协议：dubbo&#x2F;http&#x2F;pb </p>
</li>
<li><p>数据处理：hadoop&#x2F;spark&#x2F;flink </p>
</li>
<li><p>数据存储：redis&#x2F;mysql&#x2F;oracle&#x2F;redis&#x2F;es</p>
</li>
<li><p>文档存储：mongodb&#x2F;hbase&#x2F;neo4j</p>
</li>
</ul>
</li>
<li><p>部署架构：架构角色的集成关系</p>
</li>
</ul>
</li>
</ul>
<h1 id="统一建模语言UML"><a href="#统一建模语言UML" class="headerlink" title="统一建模语言UML"></a>统一建模语言UML</h1><ul>
<li><p>用例图：商业模式、业务角色</p>
</li>
<li><p>时序图：业务流程、调用关系</p>
</li>
<li><p>部署图：系统架构与集成关系</p>
</li>
<li><p>活动图：业务逻辑分析</p>
</li>
</ul>
<h1 id="推荐工具"><a href="#推荐工具" class="headerlink" title="推荐工具"></a>推荐工具</h1><ul>
<li><p>plantuml</p>
</li>
<li><p>yed</p>
</li>
<li><p><a href="http://draw.io/">draw.io</a></p>
</li>
<li><p>processon</p>
</li>
<li><p>visio</p>
</li>
</ul>
<h1 id="梳理业务流程"><a href="#梳理业务流程" class="headerlink" title="梳理业务流程"></a>梳理业务流程</h1><img src="/2022/02/18/2-2-%E8%A2%AB%E6%B5%8B%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E4%B8%8E%E6%95%B0%E6%8D%AE%E6%B5%81%E5%88%86%E6%9E%90/16e6b94f-58c1-4ae8-b8a1-e8840a3651c4-16332047.jpg" alt="img" style="zoom:50%;">

<h1 id="用例图"><a href="#用例图" class="headerlink" title="用例图"></a>用例图</h1><ul>
<li><p>使用思维导图分析功能点</p>
<ul>
<li><p>业务流程</p>
</li>
<li><p>数据分类</p>
</li>
</ul>
</li>
<li><p>使用时序图分析数据流</p>
  <img src="/2022/02/18/2-2-%E8%A2%AB%E6%B5%8B%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E4%B8%8E%E6%95%B0%E6%8D%AE%E6%B5%81%E5%88%86%E6%9E%90/0d644760-7dac-4d64-9a0e-dd375fbbf974-16332047.jpg" alt="img" style="zoom:67%;">
</li>
<li><p>使用活动图分析测试用例</p>
  <img src="/2022/02/18/2-2-%E8%A2%AB%E6%B5%8B%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E4%B8%8E%E6%95%B0%E6%8D%AE%E6%B5%81%E5%88%86%E6%9E%90/01c7c66e-bb7a-49e4-944e-b6f2e601a519-16332047.jpg" alt="img" style="zoom:50%;"></li>
</ul>
<h1 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h1><ul>
<li>UML</li>
</ul>
<h1 id="笔记总结"><a href="#笔记总结" class="headerlink" title="笔记总结"></a>笔记总结</h1><ul>
<li><p>测试用例分析总结</p>
<ul>
<li><p>使用用例图分析角色与资源</p>
</li>
<li><p>使用思维导图分析功能点</p>
</li>
<li><p>使用时序图分析数据流</p>
</li>
<li><p>使用活动图分析业务逻辑</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>测试学习</category>
      </categories>
      <tags>
        <tag>测试方法与理论</tag>
      </tags>
  </entry>
  <entry>
    <title>2.3 被测需求理解</title>
    <url>/2022/02/19/2-3-%E8%A2%AB%E6%B5%8B%E9%9C%80%E6%B1%82%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="需求文档"><a href="#需求文档" class="headerlink" title="需求文档"></a>需求文档</h1><ul>
<li><p>功能性需求</p>
</li>
<li><p>非功能性需求</p>
</li>
<li><p>安全性需求</p>
</li>
<li><p>······</p>
</li>
</ul>
<h1 id="需求评审"><a href="#需求评审" class="headerlink" title="需求评审"></a>需求评审</h1><ul>
<li><p>业务场景角度</p>
<ul>
<li>用户故事</li>
<li>业务流程图</li>
</ul>
</li>
<li><p>功能点角度</p>
<ul>
<li>数据约束是否全面、合理</li>
<li>存在分支的逻辑、描述是否覆盖所有路径</li>
<li>多状态流程，状态流转描述是否合理且完整</li>
<li>权限描述是否明确</li>
</ul>
</li>
</ul>
<h1 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h1><ul>
<li>明确测试范围</li>
<li>明确功能点</li>
<li>明确业务流程</li>
<li>明确输出结果</li>
<li>分析异常流程</li>
<li>预估测试需要的时间和资源</li>
</ul>
]]></content>
      <categories>
        <category>测试学习</category>
      </categories>
      <tags>
        <tag>测试方法与理论</tag>
      </tags>
  </entry>
  <entry>
    <title>2.5 流程管理平台</title>
    <url>/2022/02/19/2-5-%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/</url>
    <content><![CDATA[<h1 id="JIRA流程管理平台"><a href="#JIRA流程管理平台" class="headerlink" title="JIRA流程管理平台"></a>JIRA流程管理平台</h1><ul>
<li><p>推荐方案</p>
</li>
<li><p>定制型强</p>
</li>
<li><p>基本概念</p>
<ul>
<li>Project项目</li>
<li>Issue问题<ul>
<li>预设好的任务</li>
</ul>
</li>
<li>Field字段<ul>
<li>属性</li>
</ul>
</li>
<li>Workflow工作流<ul>
<li>描述Issue状态</li>
</ul>
</li>
<li>Screen视图<ul>
<li>展示字段的合集</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="JIRA平台管理测试流程"><a href="#JIRA平台管理测试流程" class="headerlink" title="JIRA平台管理测试流程"></a>JIRA平台管理测试流程</h1><h2 id="JIRA平台管理测试用例流程"><a href="#JIRA平台管理测试用例流程" class="headerlink" title="JIRA平台管理测试用例流程"></a>JIRA平台管理测试用例流程</h2><ul>
<li><p>创建测试用例管理项目</p>
</li>
<li><p>录入用例</p>
</li>
<li><p>测试用例状态转化</p>
</li>
</ul>
<h2 id="JIRA管理Bug流程"><a href="#JIRA管理Bug流程" class="headerlink" title="JIRA管理Bug流程"></a>JIRA管理Bug流程</h2><ul>
<li><p>创建Bug管理项目</p>
</li>
<li><p>从用例关联到Bug</p>
</li>
<li><p>在项目中录入Bug</p>
</li>
<li><p>Bug状态转化</p>
</li>
</ul>
]]></content>
      <categories>
        <category>测试学习</category>
      </categories>
      <tags>
        <tag>测试方法与理论</tag>
      </tags>
  </entry>
  <entry>
    <title>2.4 项目管理与跨部门沟通协作</title>
    <url>/2022/02/19/2-4-%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E4%B8%8E%E8%B7%A8%E9%83%A8%E9%97%A8%E6%B2%9F%E9%80%9A%E5%8D%8F%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="项目管理"><a href="#项目管理" class="headerlink" title="项目管理"></a>项目管理</h1><img src="/2022/02/19/2-4-%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E4%B8%8E%E8%B7%A8%E9%83%A8%E9%97%A8%E6%B2%9F%E9%80%9A%E5%8D%8F%E4%BD%9C/image-20220213221807348.png" alt="image-20220213221807348" style="zoom:67%;">

<h2 id="需求阶段"><a href="#需求阶段" class="headerlink" title="需求阶段"></a>需求阶段</h2><img src="/2022/02/19/2-4-%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E4%B8%8E%E8%B7%A8%E9%83%A8%E9%97%A8%E6%B2%9F%E9%80%9A%E5%8D%8F%E4%BD%9C/image-20220213221815362.png" alt="image-20220213221815362" style="zoom: 50%;">

<h2 id="设计阶段"><a href="#设计阶段" class="headerlink" title="设计阶段"></a>设计阶段</h2><img src="/2022/02/19/2-4-%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E4%B8%8E%E8%B7%A8%E9%83%A8%E9%97%A8%E6%B2%9F%E9%80%9A%E5%8D%8F%E4%BD%9C/image-20220213221833477.png" alt="image-20220213221833477" style="zoom:50%;">

<h2 id="开发阶段"><a href="#开发阶段" class="headerlink" title="开发阶段"></a>开发阶段</h2><img src="/2022/02/19/2-4-%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E4%B8%8E%E8%B7%A8%E9%83%A8%E9%97%A8%E6%B2%9F%E9%80%9A%E5%8D%8F%E4%BD%9C/image-20220213221847044.png" alt="image-20220213221847044" style="zoom:50%;">

<h2 id="集成测试阶段"><a href="#集成测试阶段" class="headerlink" title="集成测试阶段"></a>集成测试阶段</h2><img src="/2022/02/19/2-4-%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E4%B8%8E%E8%B7%A8%E9%83%A8%E9%97%A8%E6%B2%9F%E9%80%9A%E5%8D%8F%E4%BD%9C/image-20220213221859237.png" alt="image-20220213221859237" style="zoom:50%;">

<h2 id="系统测试阶段"><a href="#系统测试阶段" class="headerlink" title="系统测试阶段"></a>系统测试阶段</h2><img src="/2022/02/19/2-4-%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E4%B8%8E%E8%B7%A8%E9%83%A8%E9%97%A8%E6%B2%9F%E9%80%9A%E5%8D%8F%E4%BD%9C/image-20220213221914747.png" alt="image-20220213221914747" style="zoom:50%;">

<h2 id="软件项目管理的方法"><a href="#软件项目管理的方法" class="headerlink" title="软件项目管理的方法"></a>软件项目管理的方法</h2><ul>
<li>制定项目计划</li>
<li>执行该计划并监控跟踪管理</li>
<li>项目风险应对与问题解决</li>
<li>项目收尾</li>
</ul>
<h1 id="跨部门沟通协作"><a href="#跨部门沟通协作" class="headerlink" title="跨部门沟通协作"></a>跨部门沟通协作</h1><ul>
<li><p>与产品沟通</p>
<ul>
<li><p>需求评审会</p>
</li>
<li><p>在分析需求阶段</p>
</li>
<li><p>在测试用例编写阶段</p>
</li>
<li><p>在测试过程中</p>
</li>
</ul>
</li>
<li><p>与开发沟通</p>
<ul>
<li><p>在分析需求阶段</p>
</li>
<li><p>在测试用例编写阶段</p>
</li>
<li><p>在测试过程中</p>
</li>
<li><p>在线上监控发现bug时</p>
</li>
</ul>
</li>
<li><p>上下游配合测试</p>
<ul>
<li><p>测试计划沟通</p>
</li>
<li><p>环境对接</p>
</li>
<li><p>熟悉业务</p>
</li>
</ul>
</li>
</ul>
<h1 id="项目实例"><a href="#项目实例" class="headerlink" title="项目实例"></a>项目实例</h1><img src="/2022/02/19/2-4-%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E4%B8%8E%E8%B7%A8%E9%83%A8%E9%97%A8%E6%B2%9F%E9%80%9A%E5%8D%8F%E4%BD%9C/image-20220213222119994.png" alt="image-20220213222119994" style="zoom:50%;">

<p>集成测试：也叫联调</p>
]]></content>
      <categories>
        <category>测试学习</category>
      </categories>
      <tags>
        <tag>测试方法与理论</tag>
      </tags>
  </entry>
  <entry>
    <title>2.6 测试流程体系</title>
    <url>/2022/02/19/2-6-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E4%BD%93%E7%B3%BB/</url>
    <content><![CDATA[<h1 id="软件测试基本概念"><a href="#软件测试基本概念" class="headerlink" title="软件测试基本概念"></a>软件测试基本概念</h1><p>软件测试</p>
<ul>
<li><p>通过手工或者工具对”被测对象”进行测试</p>
</li>
<li><p>验证实际结果与预期结果之间是否存在差异</p>
</li>
</ul>
<p>软件测试作用</p>
<ul>
<li><p>通过测试工作可以发现并修复软件当中存在的缺陷，从而提高用户对产品的使用信心。</p>
</li>
<li><p>测试可以降低同类型产品开发遇到问题的风险。</p>
</li>
</ul>
<p>软件缺陷</p>
<ul>
<li><p>软件缺陷被测试工程师和开发工程师们称作bug</p>
</li>
<li><p>软件缺陷会导致软件不能正常运行，它的存在会在一定程度上导致软件不能满足用户的需求，甚至有可能破坏或泄漏用户的重要数据</p>
</li>
</ul>
<p>软件测试原则</p>
<ul>
<li><p>测试显示缺陷的存在</p>
</li>
<li><p>穷尽测试是不可能的</p>
</li>
<li><p>测试尽早介入</p>
</li>
<li><p>缺陷集群性（2&#x2F;8原则）</p>
</li>
<li><p>杀虫剂悖论</p>
</li>
<li><p>测试活动依赖于测试内容</p>
</li>
<li><p>没有错误是好是谬论</p>
</li>
</ul>
<p>软件测试对象</p>
<ul>
<li><p>需求分析阶段：需求文档、接口文档</p>
</li>
<li><p>编码实现阶段：源代码</p>
</li>
<li><p>系统功能使用：软件程序</p>
</li>
</ul>
<p>测试用例</p>
<ul>
<li>为特定的目的而设计的一组测试输入、执行步骤和预期的结果，以便测试产品否满足某个特定需求的文档</li>
</ul>
<h1 id="软件测试模型"><a href="#软件测试模型" class="headerlink" title="软件测试模型"></a>软件测试模型</h1><h2 id="V模型"><a href="#V模型" class="headerlink" title="V模型"></a>V模型</h2><img src="/2022/02/19/2-6-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E4%BD%93%E7%B3%BB/image-20220213223541145.png" alt="image-20220213223541145" style="zoom: 50%;">

<p>集成测试主要测试接口，系统测试前期测试功能，后期性能、兼容性做测试。</p>
<ul>
<li><p>V模型是瀑布模型的一种改进</p>
</li>
<li><p>V模型标明了测试过程中的不同阶段</p>
</li>
<li><p>V模型的优缺点</p>
</li>
<li><p>优点</p>
<ul>
<li>既有底层测试又有高层测试。</li>
<li>将开发阶段清楚的表现出来，便于控制开发的过程。</li>
</ul>
</li>
<li><p>缺点</p>
<ul>
<li>容易让人误解为测试是在开发完成之后的一个阶段。</li>
<li>由于它的顺序性，当编码完成之后，正式进入测试时，这时发现的一些bug可能不容易找到其根源，并且代码修改起来很困难。</li>
<li>如果需求变更较大，导致要重复变更需求、设计、编码、测试。返工量大。</li>
</ul>
</li>
</ul>
<h2 id="W模型"><a href="#W模型" class="headerlink" title="W模型"></a>W模型</h2><ul>
<li><p>W模型明确表示出了测试与开发的并行关系。</p>
</li>
<li><p>W模型中测试伴随着整个软件开发周期，并且测试的对象不仅仅是程序，需求和设计同样要测试。</p>
</li>
</ul>
<img src="/2022/02/19/2-6-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E4%BD%93%E7%B3%BB/image-20220213223706741.png" alt="image-20220213223706741" style="zoom:50%;">

<ul>
<li><p>优点</p>
<ul>
<li>将测试贯穿到整个软件的生命周期中，且除了代码要测试，需求、设计等都要测试。</li>
<li>更早的介入到软件开发中，能尽早的发现缺陷进行修复。</li>
<li>测试与开发独立起来，并与开发并行。</li>
</ul>
</li>
<li><p>缺点</p>
<ul>
<li>无法支持迭代的开发模型</li>
<li>对有些项目，开发过程中根本没有文档产生，故W模型无法使用。</li>
<li>对于需求和设计的测试技术要求很高，实践起来很困难。</li>
</ul>
</li>
</ul>
<h2 id="H模型"><a href="#H模型" class="headerlink" title="H模型"></a>H模型</h2><p>软件开发中需求、设计、编码等活动被分阶段执行、但是实践中，他们并不是完全串行的，它们之间更多时候是交叉进行的，更多的是迭代执行。</p>
<p>把测试活动完全独立出来，形成一个完全独立的流程，将测试准备活动和测试执行活动清晰地体现出来。</p>
<img src="/2022/02/19/2-6-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E4%BD%93%E7%B3%BB/image-20220213223749219.png" alt="image-20220213223749219" style="zoom:50%;">

<ul>
<li><p>优点</p>
<ul>
<li>软件测试完全独立，贯穿整个生命周期，且与其他流程并发进行</li>
<li>软件测试活动可以尽早准备、尽早执行，具有很强的灵活性</li>
</ul>
</li>
<li><p>缺点</p>
<ul>
<li><p>测试就绪点分析困难</p>
</li>
<li><p>对于整个项目组的人员要求非常高</p>
</li>
</ul>
</li>
</ul>
<h1 id="软件测试工作流程"><a href="#软件测试工作流程" class="headerlink" title="软件测试工作流程"></a>软件测试工作流程</h1><h4 id="传统测试流程"><a href="#传统测试流程" class="headerlink" title="传统测试流程"></a>传统测试流程</h4><img src="/2022/02/19/2-6-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E4%BD%93%E7%B3%BB/image-20220213223833069.png" alt="image-20220213223833069" style="zoom:50%;">

<p>冒烟测试：最基本的功能测试 </p>
<p>回归测试：新功能上线后需要对以前的功能也进行测试</p>
<h4 id="系统测试流程"><a href="#系统测试流程" class="headerlink" title="系统测试流程"></a>系统测试流程</h4><img src="/2022/02/19/2-6-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E4%BD%93%E7%B3%BB/image-20220213223920095.png" alt="image-20220213223920095" style="zoom:33%;">

<h4 id="bug管理流程"><a href="#bug管理流程" class="headerlink" title="bug管理流程"></a>bug管理流程</h4><img src="/2022/02/19/2-6-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E4%BD%93%E7%B3%BB/image-20220213223933831.png" alt="image-20220213223933831" style="zoom:50%;">

<h1 id="测试左移"><a href="#测试左移" class="headerlink" title="测试左移"></a>测试左移</h1><ul>
<li><p>左移是往测试之前的开发阶段移</p>
</li>
<li><p>测试团队在软件开发周期早期就开始介入</p>
</li>
<li><p>对代码进行测试</p>
</li>
<li><p>从发现bug 到预防bug</p>
</li>
<li><p>测试左移-质量保障手段</p>
<ul>
<li>代码评审（code review）</li>
<li>代码审计（自动化工具）</li>
<li>单元测试</li>
<li>自动化冒烟测试</li>
<li>研发自测</li>
</ul>
</li>
</ul>
<h1 id="测试右移"><a href="#测试右移" class="headerlink" title="测试右移"></a>测试右移</h1><ul>
<li><p>右移是往发布之后移</p>
</li>
<li><p>产品上线后进行线上监控</p>
</li>
<li><p>测试右移-线上监控</p>
<ul>
<li><p>闭环的线上问题反馈-检查-解决-更新流程</p>
</li>
<li><p>更便捷的日志查看、回传服务</p>
</li>
<li><p>丰富有效的log，便于问题的快速定位丰富的监控指标（例如业务异常点指标）</p>
</li>
<li><p>业务监控（例如短信发送等）</p>
</li>
<li><p>关键指标每日监控（服务器指标）</p>
</li>
<li><p>生产数据监控（警报）</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>测试学习</category>
      </categories>
      <tags>
        <tag>测试方法与理论</tag>
      </tags>
  </entry>
  <entry>
    <title>2.7 测试技术体系</title>
    <url>/2022/02/19/2-7-%E6%B5%8B%E8%AF%95%E6%8A%80%E6%9C%AF%E4%BD%93%E7%B3%BB/</url>
    <content><![CDATA[<h1 id="软件测试分类"><a href="#软件测试分类" class="headerlink" title="软件测试分类"></a>软件测试分类</h1><ul>
<li><p>按开发阶段分类</p>
<ul>
<li><p>集成测试</p>
</li>
<li><p>系统测试</p>
<ul>
<li><p>功能测试</p>
</li>
<li><p>兼容性测试</p>
</li>
<li><p>性能测试</p>
</li>
<li><p>安全测试</p>
</li>
</ul>
</li>
<li><p>验收测试</p>
<ul>
<li><p>α测试</p>
<p>  内侧、公司内部人员在开发环境下模拟用户进行测试</p>
</li>
<li><p>β测试</p>
<p>  公测、实际环境下让用户使用</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>按是否查看代码</p>
<ul>
<li><p>白盒测试：看源代码</p>
  <img src="/2022/02/19/2-7-%E6%B5%8B%E8%AF%95%E6%8A%80%E6%9C%AF%E4%BD%93%E7%B3%BB/image-20220213224751993.png" alt="image-20220213224751993" style="zoom:67%;"></li>
</ul>
</li>
<li><p>研究产品内部的源代码和程序结构</p>
</li>
<li><p>单元测试就是白盒测试的一种</p>
</li>
<li><p>黑盒测试：不看源代码、从用户角度考虑软件使用情况</p>
<ul>
<li>又称数据驱动测试</li>
<li>完全不考虑程序内部结构和内部特性</li>
<li>注重于测试软件的功能需求</li>
<li>只关心软件的输入数据和输出数据</li>
<li>灰盒测试：只看一部分源代码但是又不像黑盒测试那样看得仔细</li>
</ul>
</li>
<li><p>按测试执行方式</p>
<ul>
<li><p>静态测试</p>
<p>  没有运行程序，静态检查文件或代码</p>
</li>
<li><p>动态测试</p>
<p>  运行程序后进行测试，实际检查输出结果与预期结果是否一致</p>
</li>
<li><p>按是否手工执行划分</p>
<ul>
<li><p>手工测试</p>
</li>
<li><p>自动化测试</p>
<p>  使用编码方式运行测试程序</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>其它分类</p>
<ul>
<li><p>冒烟测试</p>
<p>  在正式测试开始之前，对软件基本功能完成快速的验证</p>
</li>
<li><p>回归测试</p>
<p>  开发更改代码之后，重新进行测试；产品验收之前，对老功能重新进行测试</p>
</li>
<li><p>随机测试</p>
<p>  所有测试操作都是随机生成的，一般放在测试最后进行</p>
</li>
<li><p><strong>探索性测试</strong></p>
<p>  随机测试升级版，应当掌握，什么功能会出问题之类的</p>
</li>
</ul>
</li>
</ul>
<h1 id="分层体系内容"><a href="#分层体系内容" class="headerlink" title="分层体系内容"></a>分层体系内容</h1><p>自动化分层测试体系</p>
<img src="/2022/02/19/2-7-%E6%B5%8B%E8%AF%95%E6%8A%80%E6%9C%AF%E4%BD%93%E7%B3%BB/image-20220213225016492.png" alt="image-20220213225016492" style="zoom: 40%;">

<ul>
<li><p>10%用户界面测试（页面测试）</p>
<ul>
<li><p>UI测试</p>
  <img src="/2022/02/19/2-7-%E6%B5%8B%E8%AF%95%E6%8A%80%E6%9C%AF%E4%BD%93%E7%B3%BB/image-20220213225232125.png" alt="image-20220213225232125" style="zoom: 27%;">
</li>
<li><p>手工方法：人工查看、操作</p>
</li>
<li><p>自动化方法</p>
<ul>
<li>web：selenium</li>
<li>apр：appium</li>
</ul>
</li>
</ul>
</li>
<li><p>20%服务测试（接口测试）</p>
<ul>
<li><p>接口测试</p>
<ul>
<li>接口全称Application Programming Interface，一般称作<u>API</u></li>
<li>是针对软件对外提供服务的接口的输入输出进行测试</li>
<li>检查接口参数传递的正确性，接口功能实现的正确性，输出结果的正确性，以及对各种异常情况的容错处理的完整性和合理性</li>
</ul>
</li>
<li><p>使用方法及工具</p>
<ul>
<li><p>Charles, Fiddler（接口数据抓包）</p>
</li>
<li><p>postman（流行）</p>
</li>
<li><p>Jmeter</p>
<blockquote>
<p>开源、接口功能性验证和性能验证</p>
</blockquote>
</li>
<li><p>loadRunner</p>
<blockquote>
<p>商业性工具</p>
</blockquote>
</li>
<li><p>python: Requests, HttpRunner</p>
</li>
<li><p>Java: HttpClient, RestAssured</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>70%单元测试</p>
<ul>
<li><p>单元测试框架</p>
<ul>
<li><p>Java</p>
<ul>
<li><p>JUnit</p>
</li>
<li><p>TestNG</p>
</li>
</ul>
</li>
<li><p>Python</p>
<ul>
<li><p>unittest</p>
</li>
<li><p>pytest</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>测试学习</category>
      </categories>
      <tags>
        <tag>测试方法与理论</tag>
      </tags>
  </entry>
  <entry>
    <title>2.9 黑盒测试方法论——等价类</title>
    <url>/2022/02/19/2-9-%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95%E8%AE%BA%E2%80%94%E2%80%94%E7%AD%89%E4%BB%B7%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="等价类划分法"><a href="#等价类划分法" class="headerlink" title="等价类划分法"></a>等价类划分法</h1><ul>
<li><p>等价类划分是一种重要的、常用的黑盒测试方法</p>
</li>
<li><p>不需要考虑程序的内部结构，只需要考虑程序的输入规格即可</p>
</li>
<li><p>它将不能穷举的测试过程进行合理分类，从而保证设计出来的测试用例具有完整性和代表性</p>
</li>
<li><p>用户所有可能输入的数据，划分成了若干个子集，然后从每一个子集当中选取少数具有代表性的数据作为测试用例</p>
</li>
<li><p>在有限的测试资源的情况下，用少量有代表性的数据得到比较好的测试效果</p>
</li>
</ul>
<h1 id="等价类划分"><a href="#等价类划分" class="headerlink" title="等价类划分"></a>等价类划分</h1><ul>
<li><p>有效等价类：指符合《需求文档》，输入合理的数据集合</p>
</li>
<li><p>无效等价类：指不符合《需求文档》，输入不合理的数据集合</p>
</li>
</ul>
<h1 id="等价类划分原则"><a href="#等价类划分原则" class="headerlink" title="等价类划分原则"></a>等价类划分原则</h1><ul>
<li><p>规定输入的取值范围或个数时，划分一个有效和两个无效</p>
</li>
<li><p>规定了输入的集合或规则必须要遵循的条件，则划分一个有效和一个无效</p>
</li>
<li><p>输入条件是一个布尔值，则划分为一个有效和一个无效</p>
</li>
<li><p>输入条件是一组数据，并且每一个输入的值做不同的处理，则划分若干个有效和一个无效</p>
</li>
<li><p>输入条件规定了必须要遵循的某些规则下，则划分为一个有效和若干个无效</p>
</li>
<li><p>不是所有的等价类都有无效等价类</p>
</li>
</ul>
<h1 id="等价类设计步骤"><a href="#等价类设计步骤" class="headerlink" title="等价类设计步骤"></a>等价类设计步骤</h1><ul>
<li><p>先划分等价类：找出所有可能的分类</p>
</li>
<li><p>确定有效等价类：需求中的条件</p>
</li>
<li><p>确定无效等价类：与条件相反的情况，再找到特殊情况</p>
</li>
<li><p>从各个分类中挑选测试用例数据</p>
</li>
</ul>
<h1 id="等价类划分方法"><a href="#等价类划分方法" class="headerlink" title="等价类划分方法"></a>等价类划分方法</h1><img src="/2022/02/19/2-9-%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95%E8%AE%BA%E2%80%94%E2%80%94%E7%AD%89%E4%BB%B7%E7%B1%BB/image-20220213230509016.png" alt="image-20220213230509016" style="zoom:67%;">

<p>等价类表一个测试用例要涵盖尽可能多的有效等价类，而每个无效等价类都需要一个测试用例。</p>
<p>在确立了等价类之后，可按上表的形式列出所有划分出的等价类表。</p>
<ul>
<li>例子：输入1~100所有整数的和</li>
</ul>
<img src="/2022/02/19/2-9-%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95%E8%AE%BA%E2%80%94%E2%80%94%E7%AD%89%E4%BB%B7%E7%B1%BB/image-20220213230604023.png" alt="image-20220213230604023" style="zoom:67%;">

<p>测试用例覆盖无效等价类时，另一个必须是有效等价类，便于定位到错误位置</p>
<ul>
<li>测试用例</li>
</ul>
<img src="/2022/02/19/2-9-%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95%E8%AE%BA%E2%80%94%E2%80%94%E7%AD%89%E4%BB%B7%E7%B1%BB/image-20220213230633318.png" alt="image-20220213230633318" style="zoom: 67%;">

<h1 id="等价类总结"><a href="#等价类总结" class="headerlink" title="等价类总结"></a>等价类总结</h1><ul>
<li><p>长度</p>
</li>
<li><p>类型</p>
</li>
<li><p>组成规则</p>
</li>
<li><p>是否为空</p>
</li>
<li><p>是否重复</p>
</li>
<li><p>是否去除空格</p>
</li>
</ul>
<h1 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h1><p>等价类设计步骤</p>
<p>等价类划分方法—等价类表</p>
<h1 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h1><p>等价类划分原则</p>
]]></content>
      <categories>
        <category>测试学习</category>
      </categories>
      <tags>
        <tag>测试方法与理论</tag>
      </tags>
  </entry>
  <entry>
    <title>24.2 Javascript讲解</title>
    <url>/2022/03/29/24-2-Javascript%E8%AE%B2%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h1><ul>
<li>JavaScript是脚本语言<ul>
<li>一种轻量级的编程语言</li>
<li>是可插入HTML页面的编程代码</li>
<li>插入HTML页面后，可由所有的现代浏览器执行</li>
</ul>
</li>
<li>作用：<ul>
<li>直接写入HTML输出流</li>
<li>对事件的反应</li>
<li>改变HTML内容</li>
<li>改变HTML图像</li>
<li>改变HTML样式</li>
<li>验证输入</li>
</ul>
</li>
</ul>
<h1 id="2-用法"><a href="#2-用法" class="headerlink" title="2. 用法"></a>2. 用法</h1><h2 id="2-1-位置"><a href="#2-1-位置" class="headerlink" title="2.1 位置"></a>2.1 位置</h2><ul>
<li>脚本必须位于<code>&lt;script&gt;&lt;/script&gt;</code>标签之间</li>
<li>可被放置在HTML页面的<code>&lt;body&gt;</code>和<code>&lt;head&gt;</code>部分中</li>
</ul>
<h2 id="2-2-引用方式"><a href="#2-2-引用方式" class="headerlink" title="2.2 引用方式"></a>2.2 引用方式</h2><ul>
<li><p>内部：</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&quot;我的第一个JavaScript&quot;</span>);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>外部：</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;myScript.js&#x27;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>外部的js脚本是不能包含<script>标签的</p>
</blockquote>
<img src="24-2-Javascript讲解/image-20220329161125310.png" alt="image-20220329161125310" style="zoom: 50%;" />

<p><img src="/24-2-Javascript%E8%AE%B2%E8%A7%A3/image-20220329161207170.png" alt="image-20220329161207170"></p>
<h1 id="3-输出"><a href="#3-输出" class="headerlink" title="3. 输出"></a>3. 输出</h1><h3 id="3-1-显示数据"><a href="#3-1-显示数据" class="headerlink" title="3.1 显示数据"></a>3.1 显示数据</h3><ul>
<li><p>弹出警告框：<code>window.alert()</code></p>
<p>  <img src="/24-2-Javascript%E8%AE%B2%E8%A7%A3/image-20220329162759272.png" alt="image-20220329162759272"></p>
</li>
<li><p>将内容写到HTML文档中：<code>document.write()</code></p>
<p>  <img src="/24-2-Javascript%E8%AE%B2%E8%A7%A3/image-20220329162925975.png" alt="image-20220329162925975"></p>
</li>
<li><p>写入到浏览器的控制台：<code>console.log()</code></p>
<p>  <img src="/24-2-Javascript%E8%AE%B2%E8%A7%A3/image-20220329163036843.png" alt="image-20220329163036843"></p>
</li>
</ul>
<h1 id="4-基础语法"><a href="#4-基础语法" class="headerlink" title="4. 基础语法"></a>4. 基础语法</h1><h3 id="4-1-字面量"><a href="#4-1-字面量" class="headerlink" title="4.1 字面量"></a>4.1 字面量</h3><ul>
<li>数字：整数、小数、科学计数（e）</li>
<li>字符串：单引号、双引号</li>
<li>数组：[ ]</li>
<li>对象：{ }</li>
<li>函数：function</li>
</ul>
<h2 id="4-2-变量"><a href="#4-2-变量" class="headerlink" title="4.2 变量"></a>4.2 变量</h2><ul>
<li>声明变量：var</li>
<li>赋值：=</li>
</ul>
<h2 id="4-3-操作符"><a href="#4-3-操作符" class="headerlink" title="4.3 操作符"></a>4.3 操作符</h2><ul>
<li>算术运算符：=    +    -    *    /</li>
<li>赋值运算符：=    +=    -=</li>
<li>比较运算符：<    >    ==    ===    !=</li>
</ul>
<h2 id="4-4-函数"><a href="#4-4-函数" class="headerlink" title="4.4 函数"></a>4.4 函数</h2><ul>
<li><p>关键字：function</p>
</li>
<li><p><code>function myFunction(a,b)&#123;return a*b;&#125;</code></p>
  <img src="24-2-Javascript讲解/image-20220329171307815.png" alt="image-20220329171307815" style="zoom:50%;" /></li>
</ul>
<h1 id="5-操作HTML-DOM"><a href="#5-操作HTML-DOM" class="headerlink" title="5. 操作HTML DOM"></a>5. 操作HTML DOM</h1><h2 id="5-1HTML-DOM"><a href="#5-1HTML-DOM" class="headerlink" title="5.1HTML DOM"></a>5.1HTML DOM</h2><p>HTML DOM：文档对象模型（Document Object Model）</p>
<img src="24-2-Javascript讲解/image-20220329171406930.png" alt="image-20220329171406930" style="zoom: 37%;" />

<h2 id="5-2-查找HTML元素"><a href="#5-2-查找HTML元素" class="headerlink" title="5.2 查找HTML元素"></a>5.2 查找HTML元素</h2><ul>
<li><p>通过id：<code>var x=document.getElementByld(&quot;xx&quot;);</code></p>
<p>  <img src="/24-2-Javascript%E8%AE%B2%E8%A7%A3/image-20220329173812722.png" alt="image-20220329173812722"></p>
</li>
<li><p>通过标签名：<code>var y=document.getElementsByTagName(&quot;p&quot;);</code></p>
</li>
<li><p>通过类名：<code>var x=document.getElementsByClassName(&quot;xx&quot;);</code></p>
</li>
</ul>
<h2 id="5-3-改变HTML"><a href="#5-3-改变HTML" class="headerlink" title="5.3 改变HTML"></a>5.3 改变HTML</h2><ul>
<li>内容：<code>document.getElementById(id).innerHTML=新的 HTML</code></li>
<li>属性：<code>document.getElementById(id).attribute=新属性值</code></li>
</ul>
<h2 id="5-4-Coojie"><a href="#5-4-Coojie" class="headerlink" title="5.4 Coojie"></a>5.4 Coojie</h2><p>读取：<code>var x=document.cookie;</code></p>
<h2 id="5-5-使用事件"><a href="#5-5-使用事件" class="headerlink" title="5.5 使用事件"></a>5.5 使用事件</h2><ul>
<li>当用户点击鼠标时：onclick=JavaScript</li>
<li>当网页已加载时：onload=JavaScript</li>
<li>当图像已加载时：onunload=JavaScript</li>
<li>当鼠标移动到元素上时：onmouseover=JavaScript</li>
<li>当输入字段被改变时：onchange=JavaScript</li>
<li>当用户触发按键时：onmousedown=JavaScript</li>
</ul>
<h1 id="6-操作浏览器BOM"><a href="#6-操作浏览器BOM" class="headerlink" title="6. 操作浏览器BOM"></a>6. 操作浏览器BOM</h1><h2 id="6-1-浏览器对象模型"><a href="#6-1-浏览器对象模型" class="headerlink" title="6.1 浏览器对象模型"></a>6.1 浏览器对象模型</h2><ul>
<li>Window 对象</li>
<li>所有浏览器都支持<code>window</code>对象。它表示浏览器窗口</li>
<li>所有JavaScript全局对象、函数以及变量均自动成为<code>window</code>对象的成员</li>
<li>HTML DOM 的<code>document</code>是<code>window</code> 对象的属性之一</li>
</ul>
<h2 id="6-2浏览器窗口"><a href="#6-2浏览器窗口" class="headerlink" title="6.2浏览器窗口"></a>6.2浏览器窗口</h2><ul>
<li>获取浏览器窗口尺寸：<ul>
<li><code>window.innerHeight</code>-浏览器窗口的内部高度（包括滚动条）</li>
<li><code>window.innerWidth</code>-浏览器窗口的内部宽度（包括滚动条）</li>
</ul>
</li>
<li>打开新窗口：<code>window.open()</code></li>
<li>关闭当前窗口：<code>window.close()</code></li>
</ul>
<h2 id="6-3-用户屏幕"><a href="#6-3-用户屏幕" class="headerlink" title="6.3 用户屏幕"></a>6.3 用户屏幕</h2><ul>
<li>可用的屏幕宽度：<code>screen.availWidth</code></li>
<li>可用的屏幕高度：<code>screen.availHeight</code></li>
</ul>
<h2 id="6-4-当前页面的地址"><a href="#6-4-当前页面的地址" class="headerlink" title="6.4 当前页面的地址"></a>6.4 当前页面的地址</h2><ul>
<li>返回wep主机的域名：<code>location.hostname</code></li>
<li>返回当前页面的路径和文件名：<code>location.pathname</code></li>
<li>返回所使用的web 协议：<code>location.protocol</code></li>
</ul>
<h2 id="6-5-浏览器的历史"><a href="#6-5-浏览器的历史" class="headerlink" title="6.5 浏览器的历史"></a>6.5 浏览器的历史</h2><ul>
<li>与在浏览器点击后退按钮相同：<code>history.back()</code></li>
<li>与在浏览器中点击向前按钮相同：<code>history.forward()</code></li>
</ul>
</script></p></blockquote>]]></content>
  </entry>
  <entry>
    <title>2.8 常用测试平台</title>
    <url>/2022/02/19/2-8-%E5%B8%B8%E7%94%A8%E6%B5%8B%E8%AF%95%E5%B9%B3%E5%8F%B0/</url>
    <content><![CDATA[<h1 id="测试用例管理与bug管理平台"><a href="#测试用例管理与bug管理平台" class="headerlink" title="测试用例管理与bug管理平台"></a>测试用例管理与bug管理平台</h1><h2 id="测试用例管理"><a href="#测试用例管理" class="headerlink" title="测试用例管理"></a>测试用例管理</h2><ul>
<li><p>jira：推荐方案，定制性很强（大公司）</p>
<ul>
<li><p>Jira测试用例管理</p>
<ul>
<li><p>尽管Jira软件不是设计用来作为测试用例管理的，但它可以通过几种不同的方式配置为支持测试用例管理。</p>
</li>
<li><p>Jira插件推荐（付费）</p>
<ul>
<li>Xray Test management</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>redmine：推荐方案，开源，活跃，定制性很强（中小型公司）</p>
</li>
<li><p>testlink：流行的测试用例管理平台，体验不太好</p>
</li>
<li><p>其他：tapd、云效、禅道、gitlab、在线协作文档</p>
</li>
<li><p>无协作模式：excel、思维导图</p>
</li>
<li><p>bug管理平台</p>
<ul>
<li><p>通常与用例管理平台一致</p>
</li>
<li><p>测试用例、bug都可以使用isse表达</p>
</li>
<li><p>关联关系设定</p>
</li>
<li><p>测试用例与bug的属性设定</p>
</li>
</ul>
</li>
</ul>
<h1 id="代码管理平台"><a href="#代码管理平台" class="headerlink" title="代码管理平台"></a>代码管理平台</h1><ul>
<li><p>gitlab：可本地部署的gt代码管理平台，行业标准</p>
</li>
<li><p>subversion：svn管理，已经过时</p>
</li>
<li><p>github：开源项目运作</p>
</li>
<li><p>bitbucket：与jira同属一家公司 altaian</p>
</li>
</ul>
<h1 id="持续集成管理平台"><a href="#持续集成管理平台" class="headerlink" title="持续集成管理平台"></a>持续集成管理平台</h1><ul>
<li><p>jenkins：持续集成与持续交付的主流平台（插件完善）</p>
<ul>
<li><p>持续集成与持续交付</p>
<ul>
<li><p>研发</p>
<ul>
<li><p>构建、单元测试+覆盖率分析</p>
</li>
<li><p>自动化代码审计</p>
</li>
</ul>
</li>
<li><p>运维：自动化部</p>
</li>
<li><p>测试</p>
<ul>
<li><p>接口测试UI自动化测试专项测试自动化</p>
</li>
<li><p>性能测试、安全测试</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>gitlab runner：gitlab的持续交付方案</p>
</li>
<li><p>github action：github的开源方案自建</p>
</li>
<li><p>devops平台：企业定制平台，tapd、云效等</p>
</li>
</ul>
]]></content>
      <categories>
        <category>测试学习</category>
      </categories>
      <tags>
        <tag>测试方法与理论</tag>
      </tags>
  </entry>
  <entry>
    <title>24.3 css讲解</title>
    <url>/2022/03/30/24-3-css%E8%AE%B2%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="1-基础入门"><a href="#1-基础入门" class="headerlink" title="1. 基础入门"></a>1. 基础入门</h1><h2 id="1-1-什么是CSS"><a href="#1-1-什么是CSS" class="headerlink" title="1.1 什么是CSS"></a>1.1 什么是CSS</h2><ul>
<li>CSS指层叠样式表（Cascading Style Sheets）</li>
<li>样式通常存储在样式表中</li>
</ul>
<h2 id="1-2-为什么要使用CSS"><a href="#1-2-为什么要使用CSS" class="headerlink" title="1.2 为什么要使用CSS"></a>1.2 为什么要使用CSS</h2><ul>
<li>样式定义如何显示HTML元素</li>
<li>为了解决内容与表现分离的问题</li>
<li>主要目的：可以让相同的一个页面在不同的浏览器当中呈现相同的样式</li>
</ul>
<h1 id="2-基础语法"><a href="#2-基础语法" class="headerlink" title="2. 基础语法"></a>2. 基础语法</h1><h2 id="2-1-css组成"><a href="#2-1-css组成" class="headerlink" title="2.1 css组成"></a>2.1 css组成</h2><p><img src="/2022/03/30/24-3-css%E8%AE%B2%E8%A7%A3/image-20220330094940938.png" alt="image-20220330094940938"></p>
<h2 id="2-2-CSS选择器"><a href="#2-2-CSS选择器" class="headerlink" title="2.2 CSS选择器"></a>2.2 CSS选择器</h2><p>-<br>    id选择器：<code>#id&#123;&#125;</code></p>
<ul>
<li>class选择器：<code>.className&#123;&#125;</code></li>
<li>元素选择器：<code>tag</code></li>
<li>属性选择器：<code>[属性]&#123;&#125;</code></li>
</ul>
<h2 id="2-2-css创建"><a href="#2-2-css创建" class="headerlink" title="2.2 css创建"></a>2.2 css创建</h2><ul>
<li><p>外部样式表：</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;mystyle.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>内部样式表：</p>
</li>
<li><p>&#96;&#96;&#96;html</p>
  <style>
      hr{color:sienna;}
      p{margin-left:20px;}
  </style>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 内联样式：</span><br><span class="line"></span><br><span class="line">    ```html</span><br><span class="line">    &lt;p style=&quot;color:sienna;margin-left:20px&quot;&gt;这是一个段落。&lt;/p&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="2-3-css样式"><a href="#2-3-css样式" class="headerlink" title="2.3 css样式"></a>2.3 css样式</h2><h3 id="2-3-1-背景"><a href="#2-3-1-背景" class="headerlink" title="2.3.1 背景"></a>2.3.1 背景</h3><ul>
<li>background：简写属性，可以跟下面的所有值</li>
<li>background-color：设置元素的背景颜色</li>
<li>background-image：把图像设置为背景</li>
<li>background-position：设置背景图像的起始位置</li>
<li>background-repeat：设置背景图像是否及如何重复</li>
</ul>
<h3 id="2-3-2-字体"><a href="#2-3-2-字体" class="headerlink" title="2.3.2 字体"></a>2.3.2 字体</h3><ul>
<li>font：在一个声明中设置所有的字体属性</li>
<li>font-family：指定文本的字体系列</li>
<li>font-size：指定文本的字体大小</li>
<li>font-style：指定文本的字体样式</li>
<li>font-weight：指定字体的粗细</li>
</ul>
<h3 id="2-3-3-列表"><a href="#2-3-3-列表" class="headerlink" title="2.3.3 列表"></a>2.3.3 列表</h3><ul>
<li>list-style：把所有用于列表的属性设置在一个声明中</li>
<li>list-style-image：将图像设置为列表项标志</li>
<li>list-style-type：设置列表项标值的类型</li>
</ul>
<h3 id="2-3-4-表格"><a href="#2-3-4-表格" class="headerlink" title="2.3.4 表格"></a>2.3.4 表格</h3><ul>
<li>border：设置表格边框</li>
<li>border-collapse：设置表格的边框是否被折叠成一个单一的边框或者隔开</li>
<li>width：定义表格的宽度</li>
<li>text-align：表格中的文本对齐</li>
<li>padding：设置表格中的填充</li>
</ul>
<h3 id="2-3-5-定位"><a href="#2-3-5-定位" class="headerlink" title="2.3.5 定位"></a>2.3.5 定位</h3><ul>
<li>static：没有定位，遵循正常的文档流对象</li>
<li>relative：相对定位，元素的定位是相对其正常位置</li>
<li>fixed：元素的位置相对于浏览器窗口是固定位置</li>
<li>absolute：绝对定位，元素的位置相对于最近的已定位父元素</li>
<li>sticky：粘性定位，基于用户的滚动位置来定位</li>
</ul>
<h3 id="2-3-5-盒子模型"><a href="#2-3-5-盒子模型" class="headerlink" title="2.3.5 盒子模型"></a>2.3.5 盒子模型</h3><ul>
<li><p>Margin（外边距）：清除边框外的区域，外边距是透明的。</p>
</li>
<li><p>Border（边框）：围绕在内边距和内容外的边框。</p>
</li>
<li><p>Padding（内边距）：清除内容周围的区域，内边距是透明的。</p>
</li>
<li><p>Content（内容）：盒子的内容，显示文本和图像</p>
  <img src="/2022/03/30/24-3-css%E8%AE%B2%E8%A7%A3/image-20220330103005675.png" alt="image-20220330103005675" style="zoom:60%;"></li>
</ul>
<h3 id="2-3-6-网页布局"><a href="#2-3-6-网页布局" class="headerlink" title="2.3.6 网页布局"></a>2.3.6 网页布局</h3><p><img src="/2022/03/30/24-3-css%E8%AE%B2%E8%A7%A3/image-20220330103446927.png" alt="image-20220330103446927"></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/03/29/24-1-HTML%E8%AE%B2%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="1-HTML基本概念"><a href="#1-HTML基本概念" class="headerlink" title="1. HTML基本概念"></a>1. HTML基本概念</h1><p>1.1 什么是web</p>
<ul>
<li><p>web就是world wide web的缩写，称之为全球广域网，俗称WWW</p>
</li>
<li><p>可以理解为是网站服务</p>
</li>
<li><p>网站我们可以认是由多个网页组合在一起而形成一种服务</p>
</li>
<li><p>ewb前端就是来负责一个网站当中前台网页里的内容</p>
</li>
<li><p>网页就是由前端工程师使用HTML语言编写而成的一种文件，它里面会包含</p>
<p>  文字、图片、超链接、声音、视频…</p>
</li>
</ul>
<p>1.2 什么是HTML</p>
<ul>
<li>超文本标记语言（Hyper Text Markyp Language）</li>
<li>描述网页的语言</li>
</ul>
<p>1.3 HTML查看工具</p>
<ul>
<li>浏览器-开发者工具</li>
</ul>
<h1 id="2-HTML基本结构"><a href="#2-HTML基本结构" class="headerlink" title="2. HTML基本结构"></a>2. HTML基本结构</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;！DOCTYPE html&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="3-HTML基本标签"><a href="#3-HTML基本标签" class="headerlink" title="3. HTML基本标签"></a>3. HTML基本标签</h1><h2 id="3-1-标签"><a href="#3-1-标签" class="headerlink" title="3.1 标签"></a>3.1 标签</h2><ul>
<li><p>双标签</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;标签名称&gt;&lt;/标签名称&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>单标签</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;标签名/&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="3-2-标签的属性"><a href="#3-2-标签的属性" class="headerlink" title="3.2 标签的属性"></a>3.2 标签的属性</h2><ul>
<li><p>基本格式</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;标签名 属性1=&quot;属性值1&quot; 属性2=&quot; 属性值2&quot;&gt;&lt;/标签名&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>标签可以拥有多个属性</p>
</li>
<li><p>属性必须写在开始标签中，位于标签名后面</p>
</li>
<li><p>属性之间不区分顺序</p>
</li>
<li><p>标签名与属性、属性与属性之间使用空格隔开</p>
</li>
<li><p>任何属性都有默认值，省略该属性表示使用默认值</p>
</li>
</ul>
<h3 id="1-HTML全局属性"><a href="#1-HTML全局属性" class="headerlink" title="[1] HTML全局属性"></a>[1] HTML全局属性</h3><ul>
<li>class：规定元素的类名</li>
<li>id：规定元素的&lt;font color&#x3D;’red’&gt;唯一id</li>
<li>lang：设置元素中内容的语言代码</li>
<li>style：规定元素的行内样式</li>
<li>title：规定元素的额外信息</li>
</ul>
<h3 id="2-HTML事件属性-窗口事件"><a href="#2-HTML事件属性-窗口事件" class="headerlink" title="[2] HTML事件属性-窗口事件"></a>[2] HTML事件属性-窗口事件</h3><ul>
<li>使HTML事件触发浏览器中的行为，比方说当用户点击某个HTML元素时启动一段JavaScript</li>
<li>适用于<body>标签</body></li>
<li>onblur：当窗口失去焦点时运行脚本</li>
<li>onfocus：当窗口获得焦点时运行脚本</li>
<li>onload：当文档加载时运行脚本</li>
</ul>
<h3 id="3-HTML事件属性-表单事件"><a href="#3-HTML事件属性-表单事件" class="headerlink" title="[3] HTML事件属性-表单事件"></a>[3] HTML事件属性-表单事件</h3><ul>
<li>form表单内元素<ul>
<li>onblur：当窗口失去焦点时运行脚本</li>
<li>onchange：当元素改变时运行脚本</li>
<li>onfocus：当窗口获得焦点时运行脚本</li>
<li>onreset：当表单重置时运行脚本。HTML5不支持</li>
<li>onselect：当选取元素时运行脚本</li>
<li>onsubmit：当提交表单时运行脚本</li>
</ul>
</li>
</ul>
<h3 id="4-HTML事件属性-键盘事件"><a href="#4-HTML事件属性-键盘事件" class="headerlink" title="[4] HTML事件属性-键盘事件"></a>[4] HTML事件属性-键盘事件</h3><ul>
<li>onkeydown：当按下按键时运行脚本</li>
<li>onkeypress：当按下并松开按键时运行脚本</li>
<li>onkeyup：当松开按键时运行脚本</li>
</ul>
<h3 id="5-HTML事件属性-鼠标事件"><a href="#5-HTML事件属性-鼠标事件" class="headerlink" title="[5] HTML事件属性-鼠标事件"></a>[5] HTML事件属性-鼠标事件</h3><ul>
<li>onclick：当单击鼠标时运行脚本</li>
<li>ondblclick：当双击鼠标时运行脚本</li>
<li>onmousedown：当按下鼠标按钮时运行脚本</li>
<li>onmousemove：当鼠标指针移动时运行脚本</li>
<li>onmouseout：当鼠标指针移出元素时运行脚本</li>
<li>onmouseover：当鼠标指针移至元素之上时运行脚本</li>
<li>onmouseup：当松开鼠标按钮时运行脚本</li>
</ul>
<h3 id="6-HTML事件属性-多媒体事件"><a href="#6-HTML事件属性-多媒体事件" class="headerlink" title="[6] HTML事件属性-多媒体事件"></a>[6] HTML事件属性-多媒体事件</h3><ul>
<li>onabort：：当发生中止事件时运行脚本</li>
</ul>
<h2 id="3-3-注释标签"><a href="#3-3-注释标签" class="headerlink" title="3.3 注释标签"></a>3.3 注释标签</h2><ul>
<li><p>标签：</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--注释内容-&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>作用：在源文档中插入注释。注释不会在浏览器中显示</p>
</li>
</ul>
<h2 id="3-4-文档标题标签"><a href="#3-4-文档标题标签" class="headerlink" title="3.4 文档标题标签"></a>3.4 文档标题标签</h2><ul>
<li><p>标签：</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>作用</p>
<ul>
<li>定义浏览器工具栏中的标题</li>
<li>提供页面被添加到收藏夹时的标题</li>
<li>显示在搜索引擎结果中的页面标题</li>
</ul>
</li>
</ul>
<h2 id="3-5-标题标签"><a href="#3-5-标题标签" class="headerlink" title="3.5 标题标签"></a>3.5 标题标签</h2><ul>
<li><p>标签：</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>-<span class="tag">&lt;<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure>

  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是标题1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>这是标题2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>作用：用来定义HTML标题</p>
<ul>
<li><code>&lt;h1&gt;</code>定义重要等级最高的标题。</li>
<li><code>&lt;h6&gt;</code>定义重要等级最低的标题</li>
</ul>
</li>
<li><p>属性：全局属性、事件属性</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;site-text-logo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;text-logo&quot;</span>&gt;</span>测试人社区<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="3-6-段落标签"><a href="#3-6-段落标签" class="headerlink" title="3.6 段落标签"></a>3.6 段落标签</h2><ul>
<li><p>标签：</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>作用：标签定义段落</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;lh&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>属性：全局属性、事件属性</p>
</li>
</ul>
<h2 id="3-7-容器标签"><a href="#3-7-容器标签" class="headerlink" title="3.7 容器标签"></a>3.7 容器标签</h2><ul>
<li><p>标签：</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>作用：用于对文档中的行内元素进行组合，提供了一种将文本的一部分或者文<br>  档的一部分独立出来的方式</p>
</li>
<li><p>属性：全局属性、事件属性</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;ember123&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ember-view&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="3-8-容器标签"><a href="#3-8-容器标签" class="headerlink" title="3.8 容器标签"></a>3.8 容器标签</h2><ul>
<li><p>标签：</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>作用：</p>
<ul>
<li>标签定义HTML文档中的一个分隔区块或者一个区域部分</li>
<li><code>&lt;div&gt;</code>父元素经常与CSS一起使用，用来布局网页</li>
</ul>
</li>
<li><p>属性：全局属性、事件属性</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;contents clearfix&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="3-9-图像标签"><a href="#3-9-图像标签" class="headerlink" title="3.9 图像标签"></a>3.9 图像标签</h2><ul>
<li><p>标签：</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span>/&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>作用：标签定义HTML页面中的图像</p>
</li>
<li><p>属性：</p>
<ul>
<li><p>src：规定显示图像的URL（必须）</p>
</li>
<li><p>alt：规定图像的替代文本（必须）</p>
</li>
<li><p>title：鼠标悬停于图像时显示的文本</p>
</li>
<li><p>width：图像的宽度</p>
</li>
<li><p>height：图像的高度</p>
</li>
<li><p>border：设置图像边框的宽度</p>
</li>
</ul>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span> <span class="attr">width</span>=<span class="string">&quot;32&quot;</span> <span class="attr">height</span>=<span class="string">&quot;32&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/lettet avatar/v4/64.png&quot;</span> <span class="attr">title</span>=<span class="string">&quot;图片&quot;</span> <span class="attr">class</span>=<span class="string">&quot;avatar&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="3-10-超链接标签"><a href="#3-10-超链接标签" class="headerlink" title="3.10 超链接标签"></a>3.10 超链接标签</h2><ul>
<li><p>标签：</p>
</li>
<li><p>&#96;&#96;&#96;html<br>  <a></a></p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 作用：标签定义超链接，用于从一个页面链接到另一个页面</span><br><span class="line"></span><br><span class="line">- 属性：全局属性、事件属性</span><br><span class="line"></span><br><span class="line">    - href：规定链接的目标URL</span><br><span class="line"></span><br><span class="line">        ```html</span><br><span class="line">        &lt;a href=&quot;/search&quot; title=&quot;搜索主题、帖子、用户或分类&quot; aria-label=&quot;搜索主题、帖子、用户或分类&quot; id=&quot;search-button&quot; class=&quot;icon btn-flat&quot;&gt;..&lt;/a&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="3-11-列表标签-无序列表"><a href="#3-11-列表标签-无序列表" class="headerlink" title="3.11 列表标签-无序列表"></a>3.11 列表标签-无序列表</h2><ul>
<li><p>标签：</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span>...&lt;/1i&gt;<span class="tag">&lt;<span class="name">li</span>&gt;</span>..&lt;/1i&gt;<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>作用：定义无序列表</p>
</li>
<li><p><code>&lt;ul&gt;</code>标签与<code>&lt;li&gt;</code>标签一起使用，创建无序列表</p>
</li>
<li><p>属性：全局属性、事件属性</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>...<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>...<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>...<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>...<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="3-12-列表标签-有序列表"><a href="#3-12-列表标签-有序列表" class="headerlink" title="3.12 列表标签-有序列表"></a>3.12 列表标签-有序列表</h2><ul>
<li><p>标签：</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span>...&lt;/1i&gt;&lt;1i&gt;...&lt;/1i&gt;<span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>作用：</p>
<ul>
<li>定义了一个有序列表，列表排序以数字来显示</li>
<li>使用<code>&lt;li&gt;</code>标签来定义列表选项</li>
</ul>
</li>
<li><p>属性：全局属性、事件属性</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">id</span>=<span class="string">&quot;ember104&quot;</span> <span class="attr">class</span>=<span class="string">&quot;category-breadcrumb&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;ember106&quot;</span> <span class="attr">class</span>=<span class="string">&quot;select-kit&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;ember111&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display:none；&quot;</span> <span class="attr">class</span>=<span class="string">&quot;select-kit &quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!----&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="3-13-表格标签"><a href="#3-13-表格标签" class="headerlink" title="3.13 表格标签"></a>3.13 表格标签</h2><ul>
<li><p>标签：</p>
<ul>
<li><p>表格：</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>行：</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>单元格：</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>作用：定义表格。</p>
</li>
</ul>
</li>
<li><p>属性：全局属性、事件属性</p>
<ul>
<li>border：规定表格单元是否拥有边框</li>
</ul>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">&quot;ember137&quot;</span> <span class="attr">class</span>=<span class="string">&quot;topic-list ember-view&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">class</span>=<span class="string">&quot;default&quot;</span>&gt;</span>..<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">class</span>=<span class="string">&quot;posters&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">class</span>=<span class="string">&quot;posts sortable num&quot;</span>&gt;</span>回复<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">class</span>=<span class="string">&quot;views sortable num&quot;</span>&gt;</span>浏览<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">class</span>=<span class="string">&quot;activity sortable num&quot;</span>&gt;</span>活动<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    &lt;！----&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span>...<span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="3-14-表单域"><a href="#3-14-表单域" class="headerlink" title="3.14 表单域"></a>3.14 表单域</h2><ul>
<li><p>标签：</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>作用：创建供用户输入的HTML</p>
</li>
<li><p>表单属性：全局属性、事件属性。</p>
<ul>
<li>action：指定接收并处理表单信息的服务器url地址</li>
<li>method：表单数据的提交方式。</li>
<li>name：指定表单名称</li>
</ul>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;hidden-login-form&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/login&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display:none；&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="3-15-表单标签"><a href="#3-15-表单标签" class="headerlink" title="3.15 表单标签"></a>3.15 表单标签</h2><ul>
<li><p>标签：</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>作用：规定了用户可以在其中输入数据的输入字段，输入字段可通过多种方式改变,取决于<code>type</code>属性</p>
</li>
<li><p>属性：全局属性、事件属性</p>
<ul>
<li>type：规定要显示的<code>&lt;input&gt;</code>元素的类型<ul>
<li>text：单行文本输入框（不换行的）</li>
<li>password：密码输人框</li>
<li>radio：单选框（配合name可以实现单选效果</li>
<li>checkbox：复选框</li>
<li>button：普通按钮</li>
<li>submit：提交按钮</li>
<li>reset：重置按钮</li>
<li>image：图像形式的提交按钮</li>
<li>file：文件域，点击之后打开文件选择器</li>
</ul>
</li>
<li>name：控件名称，<code>name</code>相同则表示是同一组数据</li>
<li>value：指定<code>&lt;input&gt;</code>元素<code>value</code>的值</li>
<li>size：显示大小</li>
<li>checked：是否被选中</li>
<li>maxlength：控制输入的最大字符数量</li>
</ul>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;signin_username&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;signin_password&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;redirect&quot;</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">id</span>=<span class="string">&quot;signin-button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="3-16-文本域标签"><a href="#3-16-文本域标签" class="headerlink" title="3.16 文本域标签"></a>3.16 文本域标签</h2><ul>
<li><p>标签：</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>作用：定义一个多行的文本输人控件</p>
</li>
<li><p>属性：全局属性、事件属性</p>
<ul>
<li>cols：规定文本区域内可见的宽度</li>
<li>disabled：规定禁用文本区域</li>
<li>name：规定文本区域的名称</li>
<li>readonly：规定文本区域为只读</li>
<li>rows：规定文本区域内可见的行数</li>
<li>placeholder：规定一个简短的提示，描述文本区域期望的输入值</li>
</ul>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">aria-label</span>=<span class="string">&quot;在此键入&quot;</span> <span class="attr">autocomplete</span>：=<span class="string">&quot;discourse&quot;</span> <span class="attr">tabindex</span>=<span class="string">&quot;4&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;在此键入&quot;</span> <span class="attr">id</span>=<span class="string">&quot;ember1874&quot;</span> <span class="attr">class</span>=<span class="string">&quot;d-editor&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="3-17-下拉菜单"><a href="#3-17-下拉菜单" class="headerlink" title="3.17 下拉菜单"></a>3.17 下拉菜单</h2><ul>
<li><p>标签：</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span><span class="tag">&lt;<span class="name">option</span>&gt;</span>..<span class="tag">&lt;/<span class="name">option</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>作用：</p>
<ul>
<li>用来创建下拉列表</li>
<li><code>&lt;select&gt;</code>元素中的<code>&lt;option&gt;</code>标签定义了列表中的可用选项</li>
</ul>
</li>
<li><p>属性：全局属性、事件属性</p>
<ul>
<li>disabled：当该属性为true时，会禁用下拉列表</li>
<li>multiple：当该属性为true时，可选择多个选项</li>
<li>name：定义下拉列表的名称</li>
<li>size：规定下拉列表中可见选项的数目</li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>25.某知名网站测试实战</title>
    <url>/2022/04/01/25-%E6%9F%90%E7%9F%A5%E5%90%8D%E7%BD%91%E7%AB%99%E6%B5%8B%E8%AF%95%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<h1 id="手动测试实战"><a href="#手动测试实战" class="headerlink" title="手动测试实战"></a>手动测试实战</h1><h2 id="1-项目背景"><a href="#1-项目背景" class="headerlink" title="1. 项目背景"></a>1. 项目背景</h2><p>企业微信web端：<a href="https://work.weixin.qq.com/">https://work.weixin.qq.com/</a></p>
<p><img src="/2022/04/01/25-%E6%9F%90%E7%9F%A5%E5%90%8D%E7%BD%91%E7%AB%99%E6%B5%8B%E8%AF%95%E5%AE%9E%E6%88%98/image-20220401175440411.png" alt="image-20220401175440411"></p>
<h2 id="2-项目流程"><a href="#2-项目流程" class="headerlink" title="2. 项目流程"></a>2. 项目流程</h2><p>Web测试流程：</p>
<ol>
<li>需求分析</li>
<li>测试计划编写</li>
<li>测试用例编写</li>
<li>用例执行</li>
<li>回归测试</li>
<li>兼容性测试</li>
<li>安全测试</li>
<li>走查验收（UI、产品）</li>
<li>测试总结报告</li>
</ol>
<h2 id="3-需求分析"><a href="#3-需求分析" class="headerlink" title="3. 需求分析"></a>3. 需求分析</h2><img src="/2022/04/01/25-%E6%9F%90%E7%9F%A5%E5%90%8D%E7%BD%91%E7%AB%99%E6%B5%8B%E8%AF%95%E5%AE%9E%E6%88%98/image-20220401221132921.png" alt="image-20220401221132921" style="zoom: 80%;">

<h3 id="需求分析步骤"><a href="#需求分析步骤" class="headerlink" title="需求分析步骤"></a>需求分析步骤</h3><ol>
<li>明确测试范围</li>
<li>明确功能点</li>
<li>明确业务流程</li>
<li>明确输出结果</li>
<li>分析异常流程</li>
<li>预估测试需要的时间和资源</li>
</ol>
<h2 id="4-测试计划编写"><a href="#4-测试计划编写" class="headerlink" title="4. 测试计划编写"></a>4. 测试计划编写</h2><h3 id="4-1-测试计划作用"><a href="#4-1-测试计划作用" class="headerlink" title="4.1 测试计划作用"></a>4.1 测试计划作用</h3><ul>
<li>方便宏观调控，进行相应资源配置</li>
<li>方便了解整个项目测试情况以及项目测试不同阶段的所要进行的工作</li>
</ul>
<h3 id="4-2-测试计划编写要点"><a href="#4-2-测试计划编写要点" class="headerlink" title="4.2 测试计划编写要点"></a>4.2 测试计划编写要点</h3><p><strong>5W+H 原则</strong></p>
<ul>
<li>why：为什么要进行这些测试</li>
<li>what：测试哪些方面，不同阶段的工作内容</li>
<li>when：测试不同阶段的起止时间</li>
<li>where：相应文档，缺陷的存放位置，测试环境等</li>
<li>who：项目有关人员组成，安排哪些测试人员进行测试</li>
<li>how：如何去做，使用哪些测试工具以及测试方法进行测试</li>
</ul>
<h2 id="5-测试设计"><a href="#5-测试设计" class="headerlink" title="5. 测试设计"></a>5. 测试设计</h2><h3 id="测试用例设计步骤"><a href="#测试用例设计步骤" class="headerlink" title="测试用例设计步骤"></a>测试用例设计步骤</h3><ol>
<li>划分功能模块</li>
<li>正向功能验证</li>
<li>单个功能项验证</li>
<li>功能之间交互验证</li>
<li>隐形需求</li>
</ol>
<p>测试用例评审</p>
<ul>
<li>测试用例的本身的描述是否清晰，是否存在歧义</li>
<li>测试用例内容是否正确，是否与需求目标相一致</li>
<li>测试用例的期望结果是否确定、唯一</li>
<li>测试用例是否覆盖了所有的需求</li>
<li>测试用例是否具有可执行性</li>
<li>是否从用户层面来设计用户使用场景和业务流程的测试用例</li>
<li>场景测试用例是否覆盖最复杂的业务流程</li>
<li>·用例设计是否包含了正面、反面的用例</li>
</ul>
<h2 id="6-测试执行"><a href="#6-测试执行" class="headerlink" title="6. 测试执行"></a>6. 测试执行</h2><h3 id="6-1-提测"><a href="#6-1-提测" class="headerlink" title="6.1 提测"></a>6.1 提测</h3><p>web提测方式：开发提供测试环境地址<br>测试地址：<a href="https://work.weixin.qq.com/wework_admin/frame#contacts">https://work.weixin.qq.com/wework_admin/frame#contacts</a></p>
<h3 id="6-2-bug定位"><a href="#6-2-bug定位" class="headerlink" title="6.2 bug定位"></a>6.2 bug定位</h3><ul>
<li>前端错误：查看前端源码</li>
<li>通过分析网络数据<ul>
<li>响应数据错误，服务端问题</li>
<li>响应数据正确，但是前端展示错误，前端问题</li>
<li>响应数据与自己操作不一致，查询数据库确认</li>
</ul>
</li>
<li>服务端错误：根据后台日志分析定位</li>
</ul>
<h3 id="6-3-兼容性测试"><a href="#6-3-兼容性测试" class="headerlink" title="6.3 兼容性测试"></a>6.3 兼容性测试</h3><h4 id="（1）浏览器兼容"><a href="#（1）浏览器兼容" class="headerlink" title="（1）浏览器兼容"></a>（1）浏览器兼容</h4><p><img src="/2022/04/01/25-%E6%9F%90%E7%9F%A5%E5%90%8D%E7%BD%91%E7%AB%99%E6%B5%8B%E8%AF%95%E5%AE%9E%E6%88%98/image-20220402163633102.png" alt="image-20220402163633102"></p>
<h4 id="（2）-操作系统兼容"><a href="#（2）-操作系统兼容" class="headerlink" title="（2） 操作系统兼容"></a>（2） 操作系统兼容</h4><img src="/2022/04/01/25-%E6%9F%90%E7%9F%A5%E5%90%8D%E7%BD%91%E7%AB%99%E6%B5%8B%E8%AF%95%E5%AE%9E%E6%88%98/image-20220402164559436.png" alt="image-20220402164559436" style="zoom:43%;">

<h4 id="（3）分辨率兼容"><a href="#（3）分辨率兼容" class="headerlink" title="（3）分辨率兼容"></a>（3）分辨率兼容</h4><img src="/2022/04/01/25-%E6%9F%90%E7%9F%A5%E5%90%8D%E7%BD%91%E7%AB%99%E6%B5%8B%E8%AF%95%E5%AE%9E%E6%88%98/image-20220402164842848.png" alt="image-20220402164842848" style="zoom:50%;">

<h3 id="6-4-兼容测试工具"><a href="#6-4-兼容测试工具" class="headerlink" title="6.4 兼容测试工具"></a>6.4 兼容测试工具</h3><ul>
<li><p>IETester：可以方便的解决IE浏览器的兼容问题</p>
</li>
<li><p>Browsershots：一个在线测试工具，支持很多浏览器</p>
</li>
<li><p>开发者工具：Toggle device toolbar</p>
<ul>
<li>模拟移动设备界面</li>
<li>自定义设备</li>
<li>旋转屏幕</li>
<li>生成页面快照</li>
<li>显示标尺</li>
<li>缩放视图</li>
<li>限制网络流量和CPU占用率</li>
</ul>
<p>  <img src="/2022/04/01/25-%E6%9F%90%E7%9F%A5%E5%90%8D%E7%BD%91%E7%AB%99%E6%B5%8B%E8%AF%95%E5%AE%9E%E6%88%98/image-20220402174339810.png" alt="image-20220402174339810"></p>
</li>
</ul>
<h3 id="6-5-性能测试"><a href="#6-5-性能测试" class="headerlink" title="6.5 性能测试"></a>6.5 性能测试</h3><ul>
<li><p>web页面响应时间</p>
</li>
<li><p>负载测试：测量Web系统在某一负载级</p>
<p>  别上的性能，以保证Web系统在需求范</p>
<p>  围内能正常工作</p>
</li>
<li><p>压力测试：测试Web应用系统会不会崩</p>
<p>  溃，在什么情况下会崩溃</p>
</li>
<li><p>测试方法：</p>
<ul>
<li>开发者工具-NetWork</li>
<li>JMeter</li>
</ul>
</li>
</ul>
<h3 id="6-6-安全测试"><a href="#6-6-安全测试" class="headerlink" title="6.6 安全测试"></a>6.6 安全测试</h3><ul>
<li>SQL注入：将SQL语句添加到输入参数中，传递到服务端解析并执行的一种攻击手法</li>
<li>XSS跨站攻击：恶意攻击者往web页面插入恶意脚本代码</li>
</ul>
<h2 id="7-测试总结"><a href="#7-测试总结" class="headerlink" title="7. 测试总结"></a>7. 测试总结</h2><p><strong>总结要点</strong></p>
<ul>
<li>人力投入</li>
<li>用例覆盖情况</li>
<li>Bug的分类及数量统计</li>
<li>遗留Bug情况</li>
<li>测试风险</li>
<li>测试结论</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>3.1 黑盒测试方法论——因果图</title>
    <url>/2022/02/19/3-1-%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95%E8%AE%BA%E2%80%94%E2%80%94%E5%9B%A0%E6%9E%9C%E5%9B%BE/</url>
    <content><![CDATA[<h1 id="因果图定义"><a href="#因果图定义" class="headerlink" title="因果图定义"></a>因果图定义</h1><p>因果图法是一种利用图解法分析输入的各种组合情况，从而设计测试用例的方法它适合于检查程序输入条件的各种组合情况</p>
<ul>
<li><p>“因”一一输入条件</p>
</li>
<li><p>“果”一一输出结果</p>
</li>
</ul>
<h1 id="因果图使用场景"><a href="#因果图使用场景" class="headerlink" title="因果图使用场景"></a>因果图使用场景</h1><ul>
<li><p>描述多种条件的组合</p>
</li>
<li><p>产生多个动作</p>
</li>
</ul>
<h1 id="因果图中的基本符号"><a href="#因果图中的基本符号" class="headerlink" title="因果图中的基本符号"></a>因果图中的基本符号</h1><img src="/2022/02/19/3-1-%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95%E8%AE%BA%E2%80%94%E2%80%94%E5%9B%A0%E6%9E%9C%E5%9B%BE/image-20220213231559425-16448045494661.png" alt="image-20220213231559425" style="zoom:50%;">



<ul>
<li><p>恒等：若原因出现，则结果出现；若原因不出现，则结果也不出现</p>
</li>
<li><p>非：若原因出现，则结果不出现；若原因不出现，则结果出现</p>
</li>
<li><p>或：有多个原因。若几个原因中有一个出现，则结果出现；若几个原因都不出现，则结果不出现</p>
</li>
<li><p>与：有多个原因。若几个原因都出现，则结果才出现；若其中一个原因不出现，则结果不出现</p>
</li>
</ul>
<h1 id="因果图中的约束条件"><a href="#因果图中的约束条件" class="headerlink" title="因果图中的约束条件"></a>因果图中的约束条件</h1><img src="/2022/02/19/3-1-%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95%E8%AE%BA%E2%80%94%E2%80%94%E5%9B%A0%E6%9E%9C%E5%9B%BE/image-20220213231621559-16448045521032.png" alt="image-20220213231621559" style="zoom:50%;">

<ul>
<li><p>互斥E：a、b、c只能有一个成立，但是可以都不成立</p>
</li>
<li><p>包含I：a、b、c中至少有一个成立</p>
</li>
<li><p>唯一O：a、b、c有且仅有一个成立</p>
</li>
<li><p>要求R：如果a成立，则要求b必须也成立，其他的不约束</p>
</li>
<li><p>屏蔽M：如果a成立的时候，强制b不成立，其他的不约束</p>
</li>
</ul>
<h1 id="因果图法基本步骤"><a href="#因果图法基本步骤" class="headerlink" title="因果图法基本步骤"></a>因果图法基本步骤</h1><ol>
<li><p>找出所有的输入条件（因）</p>
</li>
<li><p>找出所有的输出条件（果）</p>
</li>
<li><p>明确所有输入条件之间的制约关系以及组合关系</p>
</li>
<li><p>明确所有输出条件之间的制约关系以及组合关系</p>
</li>
<li><p>找出什么样的输入条件组合会产生哪种输出结果</p>
</li>
<li><p>把因果图转换成判定表</p>
</li>
<li><p>为判定表中的每一列表示的情况设计测试用例</p>
</li>
</ol>
<p><strong>例子：交通一卡通自动充值软件系统</strong></p>
<img src="/2022/02/19/3-1-%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95%E8%AE%BA%E2%80%94%E2%80%94%E5%9B%A0%E6%9E%9C%E5%9B%BE/image-20220213231818633-16448045554963.png" alt="image-20220213231818633" style="zoom: 80%;">

<p>需求解释：</p>
<ul>
<li><p>系统只接收50或100元纸币，一次只能使用一张纸币，一次充值金额只能为50元或100元</p>
</li>
<li><p>在请投币的后面按50元按钮，代表投入50元纸币；按100元按钮，代表投入100元纸币</p>
</li>
<li><p>若按50元按钮，并选择充值50元，完成充值，提示充值成功</p>
</li>
<li><p>若按50元按钮，并选择充值100元，提示输入金额不足，退回50元</p>
</li>
<li><p>若按100元按钮，并选择充值50元，完成充值，提示充值成功，退回50元</p>
</li>
<li><p>若按100元按钮，并选择充值100元，完成充值，提示充值成功</p>
</li>
<li><p>若按投币按钮后在规定时间内不选择充值按钮，提示错误，退回投入纸币</p>
</li>
<li><p>若选择充值按钮后不按投币按钮，提示错误</p>
</li>
</ul>
<p>找到所有输入条件编号：</p>
<ul>
<li>1.选择投币50元</li>
<li>2.选择投币100元</li>
<li>3.选择充值50元</li>
<li>4.选择充值100元</li>
</ul>
<p>找到所有输出条件编号</p>
<ul>
<li><p>a.完成充值</p>
</li>
<li><p>b.提示充值成功</p>
</li>
<li><p>c.退回纸币</p>
</li>
<li><p>d.提示错误</p>
</li>
</ul>
<p>步骤：</p>
<ol>
<li><p>画图分析输入和输出的关系，此处转化为表格形式</p>
 <img src="/2022/02/19/3-1-%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95%E8%AE%BA%E2%80%94%E2%80%94%E5%9B%A0%E6%9E%9C%E5%9B%BE/image-20220213232015142-16448045587564.png" alt="image-20220213232015142" style="zoom:50%;">
</li>
<li><p>转化为测试用例</p>
</li>
</ol>
<img src="/2022/02/19/3-1-%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95%E8%AE%BA%E2%80%94%E2%80%94%E5%9B%A0%E6%9E%9C%E5%9B%BE/image-20220213231942442-16448045650375.png" alt="image-20220213231942442" style="zoom: 43%;">

<h1 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h1><p>寻找因果图中的约束关系</p>
]]></content>
      <categories>
        <category>测试学习</category>
      </categories>
      <tags>
        <tag>测试方法与理论</tag>
      </tags>
  </entry>
  <entry>
    <title>3.2 黑盒测试方法论——场景法</title>
    <url>/2022/02/19/3-2-%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95%E8%AE%BA%E2%80%94%E2%80%94%E5%9C%BA%E6%99%AF%E6%B3%95/</url>
    <content><![CDATA[<h1 id="场景法概述"><a href="#场景法概述" class="headerlink" title="场景法概述"></a>场景法概述</h1><img src="/2022/02/19/3-2-%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95%E8%AE%BA%E2%80%94%E2%80%94%E5%9C%BA%E6%99%AF%E6%B3%95/image-20220213232405193.png" alt="image-20220213232405193" style="zoom:60%;">

<p>场景法就是模拟用户操作软件时的场景，主要用于测试系统的业务流程。</p>
<ul>
<li><p>基本流：按照正确的业务流程来实现的一条操作路径</p>
</li>
<li><p>备选流：导致程序出现错误的操作流程</p>
</li>
</ul>
<h1 id="场景法用例设计步骤"><a href="#场景法用例设计步骤" class="headerlink" title="场景法用例设计步骤"></a>场景法用例设计步骤</h1><ul>
<li><p>根据需求规格说明，画出功能模块流程图</p>
</li>
<li><p>根据流程图，蒞述出程序的基本流及备选流</p>
</li>
<li><p>根据基本流和备选流生成不同的场景，构造场景列表</p>
</li>
<li><p>对每一个场景生成相应的测试用例</p>
</li>
<li><p>对生成的所有测试用例重新复审，去掉多余的测试用例</p>
</li>
<li><p>测试用例确定后，为每一个测试用例确定测试数据值</p>
</li>
</ul>
<h1 id="例子：淘宝购物车"><a href="#例子：淘宝购物车" class="headerlink" title="例子：淘宝购物车"></a>例子：淘宝购物车</h1><img src="/2022/02/19/3-2-%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95%E8%AE%BA%E2%80%94%E2%80%94%E5%9C%BA%E6%99%AF%E6%B3%95/image-20220213232437753.png" alt="image-20220213232437753">

<ul>
<li><p>基本流</p>
<ul>
<li><p>进入淘宝首页</p>
</li>
<li><p>浏览商品</p>
</li>
<li><p>进入单品页</p>
</li>
<li><p>选择商品规格和数量</p>
</li>
<li><p>加入购物车</p>
</li>
<li><p>前往购物车</p>
</li>
<li><p>选择商品</p>
</li>
<li><p>结算，进入确认订单页</p>
</li>
<li><p>提交订单</p>
</li>
<li><p>付款成功</p>
</li>
<li><p>等待收货</p>
</li>
<li><p>确认收货</p>
</li>
</ul>
</li>
<li><p>备选流：</p>
<ul>
<li><p>备选流1：加入购物车时，不选择商品规格和型号，返回基本流第4步</p>
</li>
<li><p>备选流2：加入购物车时，商品库存不足，返回基本流第4步</p>
</li>
<li><p>备选流3：加入购物车时，未登录，登录后返回基本流第3步</p>
</li>
<li><p>备选流4：加入购物车后，继续选购，返回基本流第4步</p>
</li>
<li><p>备选流5：加入购物车，未选择商品，结算，返回基本流第7步</p>
</li>
<li><p>备选流6：支付失败，返回基本流第8步</p>
</li>
<li><p>备选流7：未选择商品加入购物车，退出购物，结束</p>
</li>
</ul>
</li>
<li><p>构造场景</p>
<ul>
<li><p>场景1：登录后成功购物（基本流）</p>
</li>
<li><p>场景2：未选择商品规格和型号就添加购物车（基本流+备选1）</p>
</li>
<li><p>场景3：选择的商品库存不足（基本流+备选流2）</p>
</li>
<li><p>场景4：未登录添加购物车（基本流+备选流3）</p>
</li>
<li><p>场景5：商品添加购物车后继续购物（基本流+备选流4）</p>
</li>
<li><p>场景6：进入购物车，未选择商品直接结算（基本流+备选流5）</p>
</li>
<li><p>场景7：支付过程出错（基本流+备选流6）</p>
</li>
<li><p>场景8：没有添加商品到购物车（基本流+备选流7）</p>
</li>
</ul>
</li>
<li><p>测试用例（部分）：</p>
  <img src="/2022/02/19/3-2-%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95%E8%AE%BA%E2%80%94%E2%80%94%E5%9C%BA%E6%99%AF%E6%B3%95/image-20220213232510240.png" alt="image-20220213232510240" style="zoom:67%;">

<blockquote>
<p>写测试步骤要每一步都写清楚，每一步最好前面都加上序号，描述程度：不了解产品的也能看懂文档</p>
</blockquote>
</li>
<li><p>好处：有业务流程适合业务场景</p>
</li>
<li><p>坏处：单个功能点的测试没有做到，需要用等价类、边界值、判定表、因果图等方法去验证，再进一步通过场景法对业务流程进行验证</p>
</li>
</ul>
]]></content>
      <categories>
        <category>测试学习</category>
      </categories>
      <tags>
        <tag>测试方法与理论</tag>
      </tags>
  </entry>
  <entry>
    <title>3.3 黑盒测试方法论——判定表</title>
    <url>/2022/02/19/3-3-%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95%E8%AE%BA%E2%80%94%E2%80%94%E5%88%A4%E5%AE%9A%E8%A1%A8/</url>
    <content><![CDATA[<h1 id="判定表法"><a href="#判定表法" class="headerlink" title="判定表法"></a>判定表法</h1><p>因果图只是一种辅助工具，通过分析最终得到判定表，再通过判定表编写测试用例</p>
<p>画因果图非常麻烦，影响测试效率，可以直接写判定表，进而编写测试用例</p>
<h2 id="判定表的组成"><a href="#判定表的组成" class="headerlink" title="判定表的组成"></a>判定表的组成</h2><ul>
<li><p>条件桩：问题的所有条件</p>
</li>
<li><p>动作桩：问题的所有输出</p>
</li>
<li><p>条件项：针对条件桩的取值</p>
</li>
<li><p>动作项：条件项的各种取值情况下的输出结果</p>
</li>
</ul>
<h2 id="判定表设计步骤"><a href="#判定表设计步骤" class="headerlink" title="判定表设计步骤"></a>判定表设计步骤</h2><p>1.列出所有的条件桩和动作桩</p>
<p>2.确定规则数：<font color="#FF0000">条件取值个数^条件数</font>（指数）</p>
<p>3.填入条件项</p>
<p>4.填入动作项。得到初始判定表</p>
<p>5.简化判定表</p>
<h2 id="判定表例子："><a href="#判定表例子：" class="headerlink" title="判定表例子："></a>判定表例子：</h2><img src="/2022/02/19/3-3-%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95%E8%AE%BA%E2%80%94%E2%80%94%E5%88%A4%E5%AE%9A%E8%A1%A8/image-20220213235050906.png" alt="image-20220213235050906" style="zoom: 40%;">

<ul>
<li><p>判断三角形</p>
</li>
<li><p>输入三个正整数a、b、c，分别作为三角形的三条边</p>
</li>
<li><p>判断三条边是否能构成三角形</p>
</li>
<li><p>如果能构成三角形，判断三角形的类型（等边三角形、等腰三角形、一般三角形）</p>
</li>
<li><p>确定条件桩</p>
<ul>
<li><p>C1：a，b，c构成三角形？a&lt;b+c、b&lt;a+c、c&lt;a+b</p>
</li>
<li><p>C2：a&#x3D;b？</p>
</li>
<li><p>C3：a&#x3D;c？</p>
</li>
<li><p>C4：b&#x3D;c？</p>
</li>
</ul>
</li>
<li><p>确定动作桩</p>
<ul>
<li><p>A1：非三角形</p>
</li>
<li><p>A2：不等边三角形</p>
</li>
<li><p>A3：等腰三角形</p>
</li>
<li><p>A4：等边三角形</p>
</li>
<li><p>A5：不可能</p>
</li>
</ul>
</li>
<li><p>判定表</p>
</li>
</ul>
<img src="/2022/02/19/3-3-%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95%E8%AE%BA%E2%80%94%E2%80%94%E5%88%A4%E5%AE%9A%E8%A1%A8/image-20220213235116595.png" alt="image-20220213235116595" style="zoom:150%;">

<ul>
<li>简化判定表</li>
</ul>
<img src="/2022/02/19/3-3-%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95%E8%AE%BA%E2%80%94%E2%80%94%E5%88%A4%E5%AE%9A%E8%A1%A8/image-20220213235120403.png" alt="image-20220213235120403" style="zoom:45%;">

<blockquote>
<p>简化之后，5条测试用例</p>
</blockquote>
<ul>
<li>设计测试用例</li>
</ul>
<img src="/2022/02/19/3-3-%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95%E8%AE%BA%E2%80%94%E2%80%94%E5%88%A4%E5%AE%9A%E8%A1%A8/image-20220213235127271.png" alt="image-20220213235127271" style="zoom: 25%;">

<h1 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h1><p>判定表的测试用例是一半一半分的</p>
<h1 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h1><p>确定规则数</p>
]]></content>
      <categories>
        <category>测试学习</category>
      </categories>
      <tags>
        <tag>测试方法与理论</tag>
      </tags>
  </entry>
  <entry>
    <title>3.4 白盒测试方法论</title>
    <url>/2022/02/19/3-4-%E7%99%BD%E7%9B%92%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95%E8%AE%BA/</url>
    <content><![CDATA[<h1 id="白盒测试的度量"><a href="#白盒测试的度量" class="headerlink" title="白盒测试的度量"></a>白盒测试的度量</h1><ul>
<li><p>根据待测产品的内部实现细节来设计测试用例</p>
</li>
<li><p>白盒测试的执行手段是可以涵盖单元测试、集成测试</p>
</li>
<li><p>使用代码覆盖率作为白盒测试的主要度量指标</p>
</li>
</ul>
<h1 id="代码覆盖率常见概念"><a href="#代码覆盖率常见概念" class="headerlink" title="代码覆盖率常见概念"></a>代码覆盖率常见概念</h1><ul>
<li><p>语句覆盖：每行代码都要覆盖至少一次</p>
</li>
<li><p>判定覆盖：判定表达式的真假至少覆盖一次</p>
</li>
<li><p>判定&#x2F;条件覆盖：判定覆盖与条件覆盖都必须覆盖</p>
</li>
<li><p>条件组合覆盖：判定表达式中的所有条件组合都需要覆盖</p>
</li>
<li><p>分支覆盖：控制流中的每条边都要被覆盖一次</p>
</li>
<li><p>路径覆盖：所有的路径都要尽量覆盖</p>
</li>
<li><p>指令覆盖：一行代码会被编译为多条指令，尽可能的覆盖所有指令</p>
</li>
<li><p>方法覆盖：每个方法至少要被覆盖一次</p>
</li>
<li><p>类覆盖：每个类至少被覆盖一次</p>
</li>
</ul>
<h1 id="覆盖率统计的工具"><a href="#覆盖率统计的工具" class="headerlink" title="覆盖率统计的工具"></a>覆盖率统计的工具</h1><ul>
<li><p>emma</p>
</li>
<li><p>cobertura</p>
</li>
<li><p>jacoco</p>
<ul>
<li><p>插桩原理</p>
<ul>
<li><p>对jvm的字节码插桩</p>
</li>
<li><p>基于block插桩</p>
</li>
<li><p>计算覆盖的代码块</p>
</li>
</ul>
</li>
<li><p>jacoco覆盖率报告</p>
</li>
</ul>
</li>
<li><p>流程覆盖</p>
<blockquote>
<p>在路径覆盖基础之上</p>
</blockquote>
<ul>
<li><p>利用代码执行流代表流程</p>
</li>
<li><p>流程覆盖用<span class="underline">路径覆盖率</span>表达</p>
</li>
<li><p>对流程进行裁剪获得一个适合业务的小规模的业务子集</p>
</li>
<li><p>流程覆盖率&#x3D;测试经过的路径&#x2F;业务子集路径</p>
</li>
</ul>
</li>
<li><p>精准化测试</p>
<ul>
<li><p>代码调用链与黑盒测试用例的关联</p>
</li>
<li><p>根据代码变更自动分析影响范围</p>
</li>
<li><p>黑盒测试过程中借助代码流程覆盖数据指导探索式测试</p>
</li>
<li><p>利用线上数据推导有效测试用例</p>
</li>
<li><p>代码流程分析与覆盖率统计</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>测试学习</category>
      </categories>
      <tags>
        <tag>测试方法与理论</tag>
      </tags>
  </entry>
  <entry>
    <title>3.7 测试环境搭建</title>
    <url>/2022/02/19/3-7-%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="被测系统AUT（Application-Under-Test"><a href="#被测系统AUT（Application-Under-Test" class="headerlink" title="被测系统AUT（Application Under Test)"></a>被测系统AUT（Application Under Test)</h1><img src="/2022/02/19/3-7-%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220214004012461.png" alt="image-20220214004012461" style="zoom:55%;">

<h1 id="常见的被测系统类型"><a href="#常见的被测系统类型" class="headerlink" title="常见的被测系统类型"></a>常见的被测系统类型</h1><ul>
<li><p>Ul：Web App IOT</p>
</li>
<li><p>Service：</p>
<ul>
<li><p>RESTful：sprint boot</p>
</li>
<li><p>webservice</p>
</li>
<li><p>rpc：dubbo pb</p>
</li>
</ul>
</li>
<li><p>code：SDK lib</p>
</li>
</ul>
<h1 id="部署方法"><a href="#部署方法" class="headerlink" title="部署方法"></a>部署方法</h1><ul>
<li><p>打包部署：apk app ipa jar war</p>
</li>
<li><p>Android：gradle</p>
</li>
<li><p>ios：xcode xcodebuild</p>
</li>
<li><p>自动化构建工具</p>
</li>
<li><p>Web：nodejs npm</p>
</li>
<li><p>Service：maven gradle</p>
</li>
<li><p>打包命令</p>
</li>
</ul>
<img src="/2022/02/19/3-7-%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220214004048825.png" alt="image-20220214004048825" style="zoom:70%;">

<ul>
<li><p>脚本部署：自动化脚本与自动化平台</p>
<ul>
<li><p>自动化脚本部署</p>
<ul>
<li><p>通过bash python等脚本实现自动化的构建与部署</p>
</li>
<li><p>通过持续集成平台比如jenkins完成流程管理</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>容器部署：基于容器镜像 docker k8s</p>
<ul>
<li><p>自动化构建 bash</p>
</li>
<li><p>容器构建 docker</p>
</li>
<li><p>容器编排 k8s</p>
</li>
<li><p>持续集成 jenkins</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>测试学习</category>
      </categories>
      <tags>
        <tag>测试方法与理论</tag>
      </tags>
  </entry>
  <entry>
    <title>3.5 常用测试策略与测试手段</title>
    <url>/2022/02/19/3-5-%E5%B8%B8%E7%94%A8%E6%B5%8B%E8%AF%95%E7%AD%96%E7%95%A5%E4%B8%8E%E6%B5%8B%E8%AF%95%E6%89%8B%E6%AE%B5/</url>
    <content><![CDATA[<h1 id="测试策略"><a href="#测试策略" class="headerlink" title="测试策略"></a>测试策略</h1><ul>
<li><p>在特定环境约束之下，描述软件开发周期中关于测试原则、方法、方式的纲，并阐述了它们之间如何配合，以高效地减少缺陷、提升质量</p>
</li>
<li><p>测试策略的关注重点</p>
<ul>
<li><p>测试的目标是什么？</p>
</li>
<li><p>测试可能存在的风险是什么？</p>
</li>
<li><p>测试的对象和范围是什么？</p>
</li>
<li><p>如何安排各种测试活动？</p>
</li>
<li><p>如何评价测试的效果？</p>
</li>
</ul>
</li>
</ul>
<h1 id="测试手段"><a href="#测试手段" class="headerlink" title="测试手段"></a>测试手段</h1><ul>
<li><p>黑盒测试</p>
</li>
<li><p>白盒测试</p>
</li>
<li><p>动态测试</p>
</li>
<li><p>静态测试</p>
</li>
<li><p>手工测试</p>
</li>
<li><p>自动化测试</p>
</li>
</ul>
]]></content>
      <categories>
        <category>测试学习</category>
      </categories>
      <tags>
        <tag>测试方法与理论</tag>
      </tags>
  </entry>
  <entry>
    <title>4 测试用例设计实战</title>
    <url>/2022/02/19/4-%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E8%AE%BE%E8%AE%A1%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<h1 id="测试用例基础"><a href="#测试用例基础" class="headerlink" title="测试用例基础"></a>测试用例基础</h1><h2 id="测试用例概念"><a href="#测试用例概念" class="headerlink" title="测试用例概念"></a>测试用例概念</h2><img src="/2022/02/19/4-%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E8%AE%BE%E8%AE%A1%E5%AE%9E%E6%88%98/image-20220214004508531.png" alt="image-20220214004508531">

<ul>
<li><p>测试用例（Test Case）是为特定的目的而设计的一组测试输入、执行条件和预期的结果</p>
</li>
<li><p>通过大量的测试用例来检验软件的运行效果</p>
</li>
<li><p>它是指导测试工作进行的依据</p>
</li>
</ul>
<h2 id="测试用例的组成"><a href="#测试用例的组成" class="headerlink" title="测试用例的组成"></a>测试用例的组成</h2><ul>
<li><p>用例编号</p>
</li>
<li><p>模块</p>
</li>
<li><p>测试点（测试标题）</p>
</li>
<li><p>优先级</p>
</li>
<li><p>前提条件</p>
</li>
<li><p>测试步骤</p>
</li>
<li><p>期望结果（预期结果）</p>
</li>
<li><p>实际结果</p>
</li>
</ul>
<h2 id="测试用例的优先级"><a href="#测试用例的优先级" class="headerlink" title="测试用例的优先级"></a>测试用例的优先级</h2><blockquote>
<p>测试用例根据重要性分成一定的等级</p>
</blockquote>
<ul>
<li><p>P0：核心功能（冒烟）</p>
</li>
<li><p>P1：高优先级、基本功能测试、重要的错误、边界</p>
</li>
<li><p>P2：中优先级、异常测试、边界、中断、网络、UI、容错性</p>
</li>
<li><p>P3：低优先级、性能、压力、兼容性、安全、可用性</p>
</li>
</ul>
<h2 id="测试用例设计工具"><a href="#测试用例设计工具" class="headerlink" title="测试用例设计工具"></a>测试用例设计工具</h2><ul>
<li><p>思维导图</p>
</li>
<li><p>excel</p>
</li>
</ul>
<h2 id="表格形式"><a href="#表格形式" class="headerlink" title="表格形式"></a>表格形式</h2><img src="/2022/02/19/4-%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E8%AE%BE%E8%AE%A1%E5%AE%9E%E6%88%98/image-20220214004739587.png" alt="image-20220214004739587">

<h2 id="测试方法的选择"><a href="#测试方法的选择" class="headerlink" title="*测试方法的选择"></a>*测试方法的选择</h2><ul>
<li><p>需要输入数据的地方，考虑采用等价类划分法，将无限测试变成有限测试</p>
</li>
<li><p>在任何情况下都必须采用边界值分析法</p>
</li>
<li><p>关注它的主要功能和业务流程、业务逻辑是否正确实现，考虑使用场景法</p>
</li>
<li><p>如果含有输入条件的组合情况，考虑选用因果图和判定表法</p>
</li>
<li><p>采用错误推断法再追加测试用例</p>
</li>
</ul>
<h2 id="测试用例的粒度"><a href="#测试用例的粒度" class="headerlink" title="测试用例的粒度"></a>测试用例的粒度</h2><ul>
<li><p>测试用例可以写的很简单，也可以写的很复杂</p>
</li>
<li><p>最简单的测试用例是测试的纲要，仅仅指出要测试的内容</p>
</li>
<li><p>测试用例写的过于简单，则可能失去了测试用例的意义</p>
</li>
<li><p>测试用例写得过于复杂或详细，会带来两个问题：</p>
<ul>
<li><p>效率问题</p>
</li>
<li><p>维护成本问题</p>
</li>
</ul>
</li>
<li><p>测试用例的作用</p>
<ul>
<li><p>指导测试的实施</p>
</li>
<li><p>规划测试数据的准备</p>
</li>
<li><p>编写测试脚本的&quot;设计规格说明书&quot;</p>
</li>
<li><p>评估测试结果的度量基准</p>
</li>
<li><p>分析缺陷的标准</p>
</li>
</ul>
</li>
</ul>
<h1 id="测试用例设计实战"><a href="#测试用例设计实战" class="headerlink" title="测试用例设计实战"></a>测试用例设计实战</h1><h2 id="登录测试用例设计"><a href="#登录测试用例设计" class="headerlink" title="登录测试用例设计"></a>登录测试用例设计</h2><img src="/2022/02/19/4-%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E8%AE%BE%E8%AE%A1%E5%AE%9E%E6%88%98/image-20220214004812537.png" alt="image-20220214004812537" style="zoom: 50%;">

<ul>
<li><p>登录需求讲解</p>
<ul>
<li><p>帐号是手机号或者邮箱</p>
</li>
<li><p>手机号仅限制为国内常用的号段</p>
</li>
<li><p>密码必须为 数字+英文 的形式，字段为 8-12 个字符</p>
</li>
<li><p>点击登录按钮，发起登录请求</p>
</li>
<li><p>请求成功，跳转到首页</p>
</li>
<li><p>点击忘记密码跳转到找回密码页</p>
</li>
</ul>
</li>
<li><p>测试用例编写步骤</p>
<ul>
<li><p>划分功能模块</p>
</li>
<li><p>正向功能验证（冒烟）</p>
</li>
<li><p>单个功能项验证</p>
</li>
<li><p>功能之间交互验证</p>
</li>
<li><p>隐形需求</p>
</li>
</ul>
</li>
<li><p>输入项设计要点</p>
<ul>
<li><p>数据长度验证</p>
</li>
<li><p>数据类型验证</p>
</li>
<li><p>是否必填验证</p>
</li>
<li><p>限制约束验证</p>
</li>
</ul>
</li>
<li><p>需求分析</p>
<ul>
<li><p>业务规则</p>
</li>
<li><p>主流程</p>
</li>
<li><p>异常处理</p>
</li>
<li><p>数据约束</p>
</li>
</ul>
</li>
</ul>
<h1 id="面试测试用例设计思路"><a href="#面试测试用例设计思路" class="headerlink" title="面试测试用例设计思路"></a>面试测试用例设计思路</h1><ul>
<li><p>思路</p>
<ul>
<li><p>需求分析</p>
<ul>
<li>向面试官询问细节</li>
</ul>
</li>
<li><p>界面</p>
<ul>
<li><p>UI图一致</p>
</li>
<li><p>页面文案正确</p>
</li>
</ul>
</li>
<li><p>功能</p>
<ul>
<li><p>正向功能验证</p>
</li>
<li><p>单个功能—正常&#x2F;异常</p>
</li>
<li><p>功能之间交互</p>
</li>
<li><p>接口验证</p>
<ul>
<li><p>请求发送实际正确</p>
</li>
<li><p>请求参数正确</p>
</li>
<li><p>响应数据的正确处理</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>易用性</p>
<ul>
<li><p>操作是否简单</p>
</li>
<li><p>页面布局是否美观</p>
</li>
<li><p>提示信息是否容易理解</p>
</li>
<li><p>web：tab切换</p>
</li>
</ul>
</li>
<li><p>兼容性</p>
<ul>
<li><p>APP</p>
<blockquote>
<p>页面展示正确，主功能异常</p>
</blockquote>
<ul>
<li><p>平台</p>
</li>
<li><p>厂商</p>
</li>
<li><p>系统版本</p>
</li>
<li><p>分辨率</p>
</li>
<li><p>高低版本的兼容</p>
</li>
<li><p>WEB</p>
<ul>
<li>浏览器</li>
<li>分辨率</li>
<li>操作系统</li>
</ul>
</li>
</ul>
</li>
<li><p>性能</p>
<ul>
<li>服务端</li>
<li>APP性能</li>
</ul>
</li>
<li><p>安全性</p>
<ul>
<li>注入</li>
<li>加密</li>
<li>权限</li>
<li>特殊场景：语音或视频通话&#x2F;发送语音文件时，是否会生成录音文件，这个需要检查一下</li>
</ul>
</li>
<li><p>APP</p>
<ul>
<li><p>网络</p>
<ul>
<li>不同运营商</li>
<li>不同网络环境</li>
<li>弱网</li>
<li>断网</li>
</ul>
</li>
<li><p>中断</p>
<ul>
<li>前后台切换</li>
<li>锁屏</li>
<li>断网重连</li>
<li>app切换</li>
<li>来电话，来短信</li>
</ul>
</li>
<li><p>系统权限</p>
<ul>
<li>是否授权</li>
</ul>
</li>
</ul>
</li>
<li><p>WEB</p>
<ul>
<li>链接</li>
<li>多个浏览器同时访问，数据，权限问题</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="测试用例—雪球账号"><a href="#测试用例—雪球账号" class="headerlink" title="测试用例—雪球账号"></a>测试用例—雪球账号</h1><ul>
<li><p>需求分析</p>
<ul>
<li><p>账号类型</p>
<ul>
<li>手机号</li>
</ul>
</li>
<li><p>测试范围</p>
<ul>
<li><p>不考虑其他测试方式</p>
</li>
<li><p>不考虑忘记密码</p>
</li>
</ul>
</li>
<li><p>UI设计稿</p>
<ul>
<li>按照展示的UI</li>
</ul>
</li>
<li><p>输入规则</p>
<ul>
<li>密码的长度和类型有要求</li>
</ul>
</li>
</ul>
</li>
<li><p>界面</p>
<ul>
<li><p>界面布局和UI图一致</p>
</li>
<li><p>页面文案展示正确</p>
</li>
</ul>
</li>
<li><p>功能</p>
<ul>
<li><p>正向功能验证</p>
</li>
<li><p>单个功能—正常&#x2F;异常</p>
</li>
<li><p>补充场景</p>
</li>
<li><p>接口验证</p>
<ul>
<li><p>接口请求的时机正确</p>
</li>
<li><p>接口请求参数正确</p>
</li>
<li><p>界面对于接口响应的展示正确</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>易用性</p>
<ul>
<li><p>功能操作是否简便—支付复制粘贴</p>
</li>
<li><p>页面布局是否合理</p>
</li>
<li><p>提示信息是否容易理解</p>
</li>
<li><p>web：tab切换</p>
</li>
</ul>
</li>
<li><p>兼容性</p>
<ul>
<li><p>APP页面</p>
<blockquote>
<p>展示正确，主功能无异常</p>
</blockquote>
<ul>
<li><p>平台</p>
<ul>
<li><p>Andriod</p>
</li>
<li><p>ios</p>
</li>
<li><p>鸿蒙</p>
</li>
<li><p>厂商</p>
<ul>
<li>苹果</li>
<li>华为</li>
<li>小米</li>
<li>OPPO</li>
<li>一加</li>
<li>vivo</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>系统版本</p>
<ul>
<li><p>不同平台的不同版本</p>
</li>
<li><p>分辨率</p>
</li>
<li><p>高低版本的兼容</p>
</li>
</ul>
</li>
<li><p>性能</p>
<ul>
<li><p>CPU</p>
</li>
<li><p>内存</p>
</li>
<li><p>耗电量</p>
</li>
<li><p>流量</p>
</li>
<li><p>响应时间</p>
</li>
<li><p>压力测试</p>
</li>
</ul>
</li>
<li><p>安全性</p>
<ul>
<li><p>注入攻击</p>
<ul>
<li><p>SQL注入</p>
</li>
<li><p>XSS攻击</p>
</li>
</ul>
</li>
<li><p>加密</p>
<ul>
<li><p>账号密码传输过程中加密</p>
</li>
<li><p>本地缓存文件加密</p>
</li>
</ul>
</li>
<li><p>密码</p>
<ul>
<li><p>不支持复制</p>
</li>
<li><p>密码展示是否为密文</p>
</li>
<li><p>密码有效期</p>
</li>
</ul>
</li>
<li><p>登陆限制</p>
<ul>
<li><p>允许登录失败的次数</p>
</li>
<li><p>登录超时</p>
</li>
<li><p>登录互斥</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>APP</p>
<ul>
<li><p>网络</p>
<ul>
<li><p>不同运营商</p>
</li>
<li><p>不同网络环境</p>
<ul>
<li><p>WiFi</p>
</li>
<li><p>3G</p>
</li>
<li><p>4G</p>
</li>
<li><p>5G</p>
</li>
</ul>
</li>
<li><p>弱网</p>
<ul>
<li><p>延时</p>
</li>
<li><p>丢包</p>
</li>
<li><p>页面提示</p>
</li>
</ul>
</li>
<li><p>断网</p>
<ul>
<li><p>提示信息</p>
</li>
<li><p>是都有缓存</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>中断</p>
<ul>
<li><p>前后台切换</p>
</li>
<li><p>锁屏</p>
</li>
<li><p>断网重连</p>
</li>
<li><p>app切换</p>
</li>
<li><p>来电话，来短信</p>
</li>
</ul>
</li>
<li><p>系统权限</p>
<ul>
<li><p>短信验证码自动授权填充</p>
</li>
<li><p>位置权限</p>
</li>
<li><p>保存账号密码权限（iOS刷脸登录）</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h1><p>面试测试用例重点</p>
]]></content>
      <categories>
        <category>测试学习</category>
      </categories>
      <tags>
        <tag>测试方法与理论</tag>
      </tags>
  </entry>
  <entry>
    <title>3.8 经典测试书籍</title>
    <url>/2022/02/19/3-8-%E7%BB%8F%E5%85%B8%E6%B5%8B%E8%AF%95%E4%B9%A6%E7%B1%8D/</url>
    <content><![CDATA[<h2 id="全程软件测试"><a href="#全程软件测试" class="headerlink" title="全程软件测试"></a>全程软件测试</h2><img src="/2022/02/19/3-8-%E7%BB%8F%E5%85%B8%E6%B5%8B%E8%AF%95%E4%B9%A6%E7%B1%8D/image-20220214004243778.png" alt="image-20220214004243778">

<ul>
<li><p>测试行业的经典书籍</p>
</li>
<li><p>测试方法</p>
</li>
<li><p>测试策略</p>
</li>
<li><p>领域测试</p>
</li>
<li><p>主流测试技术</p>
</li>
<li><p>涵盖了软件测试的流程与方法体系</p>
</li>
</ul>
<h2 id="探索式测试"><a href="#探索式测试" class="headerlink" title="探索式测试"></a>探索式测试</h2><p><img src="/2022/02/19/3-8-%E7%BB%8F%E5%85%B8%E6%B5%8B%E8%AF%95%E4%B9%A6%E7%B1%8D/image-20220214004255851.png" alt="image-20220214004255851"></p>
<ul>
<li><p>探索式测试的经典代表性书籍</p>
</li>
<li><p>探索式测试是业务测试和手工</p>
</li>
<li><p>测试实践中的一个方法论</p>
</li>
</ul>
<h2 id="Google测试之道"><a href="#Google测试之道" class="headerlink" title="Google测试之道"></a>Google测试之道</h2><p><img src="/2022/02/19/3-8-%E7%BB%8F%E5%85%B8%E6%B5%8B%E8%AF%95%E4%B9%A6%E7%B1%8D/image-20220214004309941.png" alt="image-20220214004309941"></p>
<ul>
<li><p>高级测试工程师与架构师必读</p>
</li>
<li><p>讲解google的测试策略与方法</p>
</li>
<li><p>以及google对软件开发与测试的理解</p>
</li>
</ul>
<h2 id="持续交付"><a href="#持续交付" class="headerlink" title="持续交付"></a>持续交付</h2><img src="/2022/02/19/3-8-%E7%BB%8F%E5%85%B8%E6%B5%8B%E8%AF%95%E4%B9%A6%E7%B1%8D/image-20220214004324096.png" alt="image-20220214004324096">

<ul>
<li><p>持续交付的经典书籍</p>
</li>
<li><p>现代化软件研发与测试的启蒙</p>
</li>
<li><p>持续交付1.0</p>
</li>
<li><p>持续交付2.0</p>
</li>
</ul>
<h2 id="不测的秘密"><a href="#不测的秘密" class="headerlink" title="不测的秘密"></a>不测的秘密</h2><img src="/2022/02/19/3-8-%E7%BB%8F%E5%85%B8%E6%B5%8B%E8%AF%95%E4%B9%A6%E7%B1%8D/image-20220214004336430.png" alt="image-20220214004336430">

<ul>
<li><p>腾讯TMQ出品</p>
</li>
<li><p>精准化测试代表性书籍</p>
</li>
</ul>
]]></content>
      <categories>
        <category>测试学习</category>
      </categories>
      <tags>
        <tag>测试方法与理论</tag>
      </tags>
  </entry>
  <entry>
    <title>3.6 Bug定位方法</title>
    <url>/2022/02/19/3-6-Bug%E5%AE%9A%E4%BD%8D%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="常见Bug分类"><a href="#常见Bug分类" class="headerlink" title="常见Bug分类"></a>常见Bug分类</h1><img src="/2022/02/19/3-6-Bug%E5%AE%9A%E4%BD%8D%E6%96%B9%E6%B3%95/image-20220214003616115.png" alt="image-20220214003616115" style="zoom:77%;">

<h1 id="为什么需要掌握bug定位"><a href="#为什么需要掌握bug定位" class="headerlink" title="为什么需要掌握bug定位"></a>为什么需要掌握bug定位</h1><ul>
<li><p>提交bug时候追加更多有用信息，方便研发更快的解决问题</p>
</li>
<li><p>分析bug形成原因，进行溯源并建立特征进行批量追踪</p>
</li>
</ul>
<h1 id="bug展现层"><a href="#bug展现层" class="headerlink" title="bug展现层"></a>bug展现层</h1><img src="/2022/02/19/3-6-Bug%E5%AE%9A%E4%BD%8D%E6%96%B9%E6%B3%95/image-20220214003716111.png" alt="image-20220214003716111" style="zoom:50%;">

<p>条件：测试数据</p>
<p>过程：测试步骤</p>
<p>结果：测试结果</p>
<h1 id="技术架构层次"><a href="#技术架构层次" class="headerlink" title="技术架构层次"></a>技术架构层次</h1><img src="/2022/02/19/3-6-Bug%E5%AE%9A%E4%BD%8D%E6%96%B9%E6%B3%95/image-20220214003732427.png" alt="image-20220214003732427" style="zoom: 67%;">

<ul>
<li><p>视图层 View</p>
<ul>
<li><p>web UI html css</p>
</li>
<li><p>app activity view</p>
</li>
</ul>
</li>
<li><p>控制器层Controller</p>
<ul>
<li><p>web：chrome，devtool</p>
</li>
<li><p>app：dalvik art objectc-runtime</p>
</li>
</ul>
</li>
<li><p>模型层Model</p>
<ul>
<li><p>模型的传递方式 http tcp rpc串口</p>
</li>
<li><p>模型的形式 json xml binary</p>
</li>
<li><p>模型定义 schema</p>
</li>
</ul>
</li>
<li><p>MVC三层分析方法</p>
<ul>
<li><p>View层：运行平台、应用调试机制、链路分析</p>
</li>
<li><p>Controller层：运行平台、应用调试机制、链路分析</p>
</li>
<li><p>Model层：运行平台、应用调试机制、链路分析</p>
<ul>
<li><p>View层常用分析方法</p>
<ul>
<li><p>UI 人工测试 自动化测试</p>
</li>
<li><p>UE 人工测试 自动化测试</p>
</li>
<li><p>UI Diff 自动化分析</p>
</li>
</ul>
</li>
<li><p>controller层常用分析方法</p>
<ul>
<li><p>运行平台日志：log</p>
</li>
<li><p>应用调试日志：debug trace hook profile</p>
</li>
</ul>
</li>
<li><p>model层常用分析方法</p>
<ul>
<li><p>运行平台 log</p>
</li>
<li><p>app 调试机制</p>
</li>
<li><p>链路分析：代理抓包、嗅探抓包</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="笔记总结"><a href="#笔记总结" class="headerlink" title="笔记总结"></a>笔记总结</h1><ul>
<li><p>明确bug问题的现象与复现步骤</p>
</li>
<li><p>分层分析关键过程的数据与问题特征</p>
</li>
<li><p>积累bug特征与问题根源特征，丰富测试经验，提高bug发现的能力</p>
</li>
</ul>
]]></content>
      <categories>
        <category>测试学习</category>
      </categories>
      <tags>
        <tag>测试方法与理论</tag>
      </tags>
  </entry>
  <entry>
    <title>5.1 业务架构分析工具——plantuml</title>
    <url>/2022/02/21/5-1-%E4%B8%9A%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94plantuml/</url>
    <content><![CDATA[<h1 id="plantuml"><a href="#plantuml" class="headerlink" title="plantuml"></a>plantuml</h1><ul>
<li><p>UML：统一建模语言</p>
</li>
<li><p>plantuml：第三方插件工具</p>
</li>
<li><p>plantuml官网：<a href="https://plantuml.com/zh/">https://plantuml.com/zh/</a></p>
</li>
<li><p>plantuml中文文档：<a href="https://ceshiren.com/t/topic/4530">https://ceshiren.com/t/topic/4530</a></p>
</li>
<li><p>plantuml在线绘图地址：<a href="https://plantuml.ceshiren.com/">https://plantuml.ceshiren.com</a></p>
</li>
</ul>
<h1 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h1><p>例子1：</p>
<img src="/2022/02/21/5-1-%E4%B8%9A%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94plantuml/image-20220214104652900-16448069747445-16454110002911.png" alt="image-20220214104652900" style="zoom:50%;">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@startuml</span><br><span class="line">Bob -&gt; Alice : hello      冒号加空格</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>

<p>例子2：</p>
<img src="/2022/02/21/5-1-%E4%B8%9A%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94plantuml/image-20220214104746063-16448069793896-16454110002922.png" alt="image-20220214104746063" style="zoom:50%;">

<blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@startuml</span><br><span class="line">Alice -&gt; Bob : Hi Bob</span><br><span class="line">Bob --&gt; Alice : Hi Alice</span><br><span class="line">Alice -&gt; Bob : how are you?</span><br><span class="line">Bob --&gt; Alice : Fine,thanks.</span><br><span class="line">（Alice &lt;-- Bob·······）</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>
</blockquote>
<h1 id="时序图常用关键字"><a href="#时序图常用关键字" class="headerlink" title="时序图常用关键字"></a>时序图常用关键字</h1><ul>
<li>声明对象：actor 、database</li>
</ul>
<img src="/2022/02/21/5-1-%E4%B8%9A%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94plantuml/image-20220214104949068-16454110002924.png" alt="image-20220214104949068" style="zoom:50%;">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@startuml</span><br><span class="line">actor user</span><br><span class="line">database db</span><br><span class="line">Alice -&gt; Bob : Hi Bob</span><br><span class="line">Bob --&gt; Alice : Hi Alice</span><br><span class="line">Alice -&gt; Bob : how are you?</span><br><span class="line">Bob --&gt; Alice : Fine,thanks.</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>

<ul>
<li>消息数字序号：autonumber</li>
</ul>
<img src="/2022/02/21/5-1-%E4%B8%9A%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94plantuml/image-20220214105008012-16454110002923.png" alt="image-20220214105008012" style="zoom:50%;">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@startuml</span><br><span class="line">autonumber</span><br><span class="line">actor user</span><br><span class="line">database db</span><br><span class="line">Alice -&gt; Bob : Hi Bob</span><br><span class="line">Bob --&gt; Alice : Hi Alice</span><br><span class="line">Alice -&gt; Bob : how are you?</span><br><span class="line">Bob --&gt; Alice : Fine,thanks.</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>

<ul>
<li>消息分组：alt&#x2F;else&#x2F;end</li>
</ul>
<img src="/2022/02/21/5-1-%E4%B8%9A%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94plantuml/image-20220214105017000-164480706894516-16454110002925.png" alt="image-20220214105017000" style="zoom:50%;">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@startuml</span><br><span class="line">autonumber</span><br><span class="line">Alice -&gt; Bob : 认证请求</span><br><span class="line">alt 成功情况</span><br><span class="line">Bob --&gt; Alice : 认证接受</span><br><span class="line">else 失败情况</span><br><span class="line">Bob --&gt; Alice : 认证失败</span><br><span class="line">else 其他情况</span><br><span class="line">Bob --&gt; Alice : 请重复</span><br><span class="line">end</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>

<h1 id="用例图"><a href="#用例图" class="headerlink" title="用例图"></a>用例图</h1><p>例1</p>
<img src="/2022/02/21/5-1-%E4%B8%9A%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94plantuml/image-20220214105036828-164480707223117-16454110002926.png" alt="image-20220214105036828" style="zoom:40%;">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@startuml</span><br><span class="line">left to right direction</span><br><span class="line">&gt; 从左到右去展示</span><br><span class="line">skinparam packagestyle rectangle</span><br><span class="line">&gt; 整个形状是长方形</span><br><span class="line">actor customer</span><br><span class="line">actor clerk</span><br><span class="line">&gt; 两个角色customer和clerk</span><br><span class="line">rectangle checkout &#123;</span><br><span class="line">&gt; 长方形里包括</span><br><span class="line">    customer -- (checkout)</span><br><span class="line">    &gt; 具体的用例写在小括号中，--是实线</span><br><span class="line">    (checkout) .&gt; (payment) : include</span><br><span class="line">    &gt; .&gt;是虚线</span><br><span class="line">    (help) .&gt; (checkout) : extends</span><br><span class="line">    (checkout) -- clerk</span><br><span class="line">&#125;</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>

<h1 id="活动图"><a href="#活动图" class="headerlink" title="活动图"></a>活动图</h1><img src="/2022/02/21/5-1-%E4%B8%9A%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94plantuml/image-20220214105051030-16454110002927.png" alt="image-20220214105051030" style="zoom:50%;">

<p>例1：</p>
<blockquote>
<p>新语法</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@startuml</span><br><span class="line">start</span><br><span class="line">repeat</span><br><span class="line">&gt; 循环用repeat</span><br><span class="line">    :read data;</span><br><span class="line">    &gt; 每一个步骤 ：开头 ; 结束</span><br><span class="line">:generate diagrams;</span><br><span class="line">repeat while (more data?)</span><br><span class="line">&gt; 循环结尾repeat while 加上对应的条件，小括号内</span><br><span class="line">stop</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>

<p>plantuml还支持思维导图</p>
<p>例1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A(根节点)--&gt;B(第一级子节点1)</span><br><span class="line">A--&gt;C(第一级子节点2)</span><br><span class="line">B--&gt;D(第二级子节点1)</span><br><span class="line">B--&gt;E(第二级子节点2)</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@startmindmap</span><br><span class="line">* 根节点</span><br><span class="line">    * 第一级子节点1</span><br><span class="line">        * 第二级子节点1</span><br><span class="line">        * 第二级子节点2</span><br><span class="line">    * 第一级子节点2</span><br><span class="line">@endmindmap</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>测试学习</category>
      </categories>
      <tags>
        <tag>测试流程与实战</tag>
      </tags>
  </entry>
  <entry>
    <title>5.2 测试流程管理Jira系统——测试用例管理</title>
    <url>/2022/02/21/5-2-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86Jira%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1 id="测试用例管理"><a href="#测试用例管理" class="headerlink" title="测试用例管理"></a>测试用例管理</h1><h2 id="step1新建项目"><a href="#step1新建项目" class="headerlink" title="step1新建项目"></a>step1新建项目</h2><img src="/2022/02/21/5-2-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86Jira%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%AE%A1%E7%90%86/image-20220214112752105-16454112616608.png" alt="image-20220214112752105" style="zoom: 80%;">

<img src="/2022/02/21/5-2-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86Jira%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%AE%A1%E7%90%86/image-20220214112906432-16448093478351-16454112616619.png" alt="image-20220214112906432" style="zoom:80%;">

<h2 id="step2新建问题类型——系统设置"><a href="#step2新建问题类型——系统设置" class="headerlink" title="step2新建问题类型——系统设置"></a>step2新建问题类型——<strong>系统设置</strong></h2><img src="/2022/02/21/5-2-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86Jira%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%AE%A1%E7%90%86/image-20220214112919700-16448093608992-164481015096810-164541126166210.png" alt="image-20220214112919700" style="zoom: 80%;">

<img src="/2022/02/21/5-2-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86Jira%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%AE%A1%E7%90%86/c1c73d04-6fa3-40d2-bf8f-1d8e3d0c6085-16332047-164541126166211.png" style="zoom:150%;">

<img src="/2022/02/21/5-2-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86Jira%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%AE%A1%E7%90%86/image-20220214112959345-16448094002855-164541126166215.png" alt="image-20220214112959345" style="zoom:80%;">

<h2 id="step3问题同项目关联"><a href="#step3问题同项目关联" class="headerlink" title="step3问题同项目关联"></a>step3问题同项目关联</h2><img src="/2022/02/21/5-2-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86Jira%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%AE%A1%E7%90%86/414bb0ab-386f-4b1b-bacd-81f45ca9daaf-16332047-164481801690046-164541126166214.png" style="zoom:150%;">

<img src="/2022/02/21/5-2-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86Jira%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%AE%A1%E7%90%86/image-20220214114129213-16448100901417-164541126166212.png" alt="image-20220214114129213" style="zoom:80%;">

<img src="/2022/02/21/5-2-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86Jira%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%AE%A1%E7%90%86/image-20220214114135304-16448100964478-164541126166213.png" alt="image-20220214114135304" style="zoom:150%;">

<img src="/2022/02/21/5-2-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86Jira%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%AE%A1%E7%90%86/image-20220214114141802-16448101053139-164541126166217.png" alt="image-20220214114141802" style="zoom:80%;">

<h2 id="step4新建工作流"><a href="#step4新建工作流" class="headerlink" title="step4新建工作流"></a>step4新建工作流</h2><img src="/2022/02/21/5-2-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86Jira%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%AE%A1%E7%90%86/image-20220214133456500-164481689961411-164541126166216.png" alt="image-20220214133456500" style="zoom:80%;">

<img src="/2022/02/21/5-2-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86Jira%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%AE%A1%E7%90%86/image-20220214133502052-164481690370012-164541126166218.png" alt="image-20220214133502052" style="zoom:150%;">

<h3 id="设置工作流"><a href="#设置工作流" class="headerlink" title="设置工作流"></a>设置工作流</h3><blockquote>
<p>可以点击编辑工作流，但是选择新建工作流更简单——系统设置，新建的工作流要勾选”显示转换标签”</p>
</blockquote>
<img src="/2022/02/21/5-2-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86Jira%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%AE%A1%E7%90%86/image-20220214133529472-164481693069913-164541126166219.png" alt="image-20220214133529472" style="zoom:150%;">

<img src="/2022/02/21/5-2-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86Jira%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%AE%A1%E7%90%86/image-20220214133540159-164481694187314-164541126166220.png" alt="image-20220214133540159" style="zoom:150%;">

<img src="/2022/02/21/5-2-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86Jira%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%AE%A1%E7%90%86/image-20220214133555607-164481695686415-164541126166221.png" alt="image-20220214133555607" style="zoom:150%;">

<h3 id="工作流关联项目"><a href="#工作流关联项目" class="headerlink" title="工作流关联项目"></a>工作流关联项目</h3><blockquote>
<p>快捷返回项目</p>
</blockquote>
<img src="/2022/02/21/5-2-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86Jira%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%AE%A1%E7%90%86/image-20220214133730263-164481705142416-164541126166222.png" alt="image-20220214133730263" style="zoom:150%;">

<img src="/2022/02/21/5-2-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86Jira%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%AE%A1%E7%90%86/image-20220214133742772-164481706385317-164541126166226.png" alt="image-20220214133742772" style="zoom:150%;">

<img src="/2022/02/21/5-2-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86Jira%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%AE%A1%E7%90%86/image-20220214133753838-164481707521818-164541126166225.png" alt="image-20220214133753838" style="zoom:150%;">

<img src="/2022/02/21/5-2-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86Jira%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%AE%A1%E7%90%86/image-20220214133800564-164481708171119-164541126166223.png" alt="image-20220214133800564" style="zoom:150%;">

<img src="/2022/02/21/5-2-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86Jira%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%AE%A1%E7%90%86/image-20220214133806483-164481708771620-164541126166224.png" alt="image-20220214133806483" style="zoom:80%;">

<h2 id="step5设置测试用例界面"><a href="#step5设置测试用例界面" class="headerlink" title="step5设置测试用例界面"></a>step5设置测试用例界面</h2><h3 id="新建界面——系统设置"><a href="#新建界面——系统设置" class="headerlink" title="新建界面——系统设置"></a>新建界面——系统设置</h3><p>先添加系统级的字段，添加完成后返回界面设置，对需要的界面进行编辑，编辑时选择自己设置好的界面，选择好后点击更新，更新后再操作”把问题操作与屏幕关联”，都设置好后快捷返回项目，再次创建问题，需要的内容都是已经设计好的。</p>
<img src="/2022/02/21/5-2-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86Jira%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%AE%A1%E7%90%86/image-20220214133918034-164481715920321-164541126166227.png" alt="image-20220214133918034" style="zoom:80%;">

<img src="/2022/02/21/5-2-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86Jira%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%AE%A1%E7%90%86/image-20220214134021167-164481722302722-164541126166230.png" alt="image-20220214134021167" style="zoom: 150%;">

<img src="/2022/02/21/5-2-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86Jira%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%AE%A1%E7%90%86/image-20220214134029763-164481723077423-164541126166228.png" alt="image-20220214134029763" style="zoom: 80%;">

<img src="/2022/02/21/5-2-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86Jira%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%AE%A1%E7%90%86/image-20220214134038806-164481724052524-164541126166229.png" alt="image-20220214134038806" style="zoom:150%;">

<img src="/2022/02/21/5-2-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86Jira%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%AE%A1%E7%90%86/image-20220214134046931-164481724810825-164541126166231.png" alt="image-20220214134046931" style="zoom:150%;">

<img src="/2022/02/21/5-2-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86Jira%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%AE%A1%E7%90%86/image-20220214134056117-164481725733926-164541126166234.png" alt="image-20220214134056117" style="zoom:150%;">

<img src="/2022/02/21/5-2-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86Jira%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%AE%A1%E7%90%86/image-20220214134105506-164481726670727-164541126166232.png" alt="image-20220214134105506" style="zoom:150%;">

<img src="/2022/02/21/5-2-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86Jira%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%AE%A1%E7%90%86/image-20220214134113389-164481727509128-164541126166233.png" alt="image-20220214134113389" style="zoom:150%;">

<img src="/2022/02/21/5-2-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86Jira%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%AE%A1%E7%90%86/image-20220214134122566-164481728373329-164541126166235.png" alt="image-20220214134122566" style="zoom:80%;">

<img src="/2022/02/21/5-2-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86Jira%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%AE%A1%E7%90%86/image-20220214134128774-164481728994230-164541126166336.png" alt="image-20220214134128774" style="zoom:80%;">

<img src="/2022/02/21/5-2-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86Jira%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%AE%A1%E7%90%86/image-20220214134136551-164481729816431-164541126166337.png" alt="image-20220214134136551" style="zoom:150%;">

<img src="/2022/02/21/5-2-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86Jira%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%AE%A1%E7%90%86/image-20220214134149926-164481731113732-164541126166338.png" alt="image-20220214134149926" style="zoom:80%;">

<img src="/2022/02/21/5-2-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86Jira%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%AE%A1%E7%90%86/image-20220214134159237-164481732030833-164541126166340.png" alt="image-20220214134159237" style="zoom:150%;">

<img src="/2022/02/21/5-2-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86Jira%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%AE%A1%E7%90%86/image-20220214134206076-164481732748834-164541126166341.png" alt="image-20220214134206076" style="zoom:150%;">

<img src="/2022/02/21/5-2-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86Jira%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%AE%A1%E7%90%86/image-20220214134212252-164481733345535-164541126166339.png" alt="image-20220214134212252" style="zoom:67%;">

<h3 id="新建测试用例特有字段——系统设置"><a href="#新建测试用例特有字段——系统设置" class="headerlink" title="新建测试用例特有字段——系统设置"></a>新建测试用例特有字段——系统设置</h3><p>选择”自定义字段”，选择字段类型后，进行相关配置，之后进行<strong>关联</strong>到相关页面并<strong>更新</strong>，再设置字段配置，添加字段配置；之后对字段进行设置，不需要的隐藏，必须的就设置为必填。接下来设置字段配置方案：进行添加域配置方案，添加后要对<strong>默认问题类型进行设置，</strong>编辑<strong>域配置</strong>为刚设置的字段配置。配置好后返回项目。在项目设置的域设置<strong>更新域配置方案</strong>，在<strong>操作</strong>中配置方案并<strong>关联</strong>。配置完成后选择<strong>重建索引</strong>。重建索引后返回项目，在<strong>问题类型</strong>中发现所有的工作流、界面以及域已经与项目关联。</p>
<img src="/2022/02/21/5-2-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86Jira%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%AE%A1%E7%90%86/image-20220214134434987-164481747612236-164541126166343.png" alt="image-20220214134434987" style="zoom:80%;">

<img src="/2022/02/21/5-2-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86Jira%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%AE%A1%E7%90%86/image-20220214134444245-164481748537337-164541126166342.png" alt="image-20220214134444245" style="zoom:150%;">

<img src="/2022/02/21/5-2-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86Jira%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%AE%A1%E7%90%86/image-20220214134453080-164481749430238-164541126166345.png" alt="image-20220214134453080" style="zoom:67%;">

<img src="/2022/02/21/5-2-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86Jira%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%AE%A1%E7%90%86/image-20220214134458109-164481749916639-164541126166446.png" alt="image-20220214134458109" style="zoom:150%;">

<img src="/2022/02/21/5-2-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86Jira%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%AE%A1%E7%90%86/image-20220214134531690-164481753272241-164541126166344.png" alt="image-20220214134531690" style="zoom:150%;">

<img src="/2022/02/21/5-2-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86Jira%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%AE%A1%E7%90%86/image-20220214134545958-164481754710742-164541126166447.png" alt="image-20220214134545958" style="zoom:150%;">

<img src="/2022/02/21/5-2-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86Jira%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%AE%A1%E7%90%86/image-20220214134549881-164481755103343-164541126166449.png" alt="image-20220214134549881" style="zoom:150%;">

<img src="/2022/02/21/5-2-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86Jira%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%AE%A1%E7%90%86/image-20220214134554217-164481755509844-164541126166448.png" alt="image-20220214134554217" style="zoom:150%;">

<img src="/2022/02/21/5-2-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86Jira%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%AE%A1%E7%90%86/image-20220214134557291-164481755826445-164541126166450.png" alt="image-20220214134557291" style="zoom:150%;">

<img src="/2022/02/21/5-2-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86Jira%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%AE%A1%E7%90%86/image-20220214135507471-164481810863747-164541126166451.png" alt="image-20220214135507471" style="zoom:150%;">

<img src="/2022/02/21/5-2-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86Jira%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%AE%A1%E7%90%86/image-20220214135511870-164481811282748-164541126166453.png" alt="image-20220214135511870" style="zoom:150%;">

<img src="/2022/02/21/5-2-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86Jira%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%AE%A1%E7%90%86/image-20220214135515852-164481811692449-164541126166452.png" alt="image-20220214135515852" style="zoom:150%;">

<img src="/2022/02/21/5-2-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86Jira%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%AE%A1%E7%90%86/image-20220214135520537-164481812143250-164541126166454.png" alt="image-20220214135520537" style="zoom:150%;">

<img src="/2022/02/21/5-2-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86Jira%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%AE%A1%E7%90%86/image-20220214135524289-164481812829151-164541126166455.png" alt="image-20220214135524289" style="zoom:150%;">

<img src="/2022/02/21/5-2-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86Jira%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%AE%A1%E7%90%86/image-20220214135529526-164481813055252-164541126166456.png" alt="image-20220214135529526" style="zoom:80%;">

<img src="/2022/02/21/5-2-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86Jira%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%AE%A1%E7%90%86/image-20220214135533794-164481813463853-164541126166457.png" alt="image-20220214135533794" style="zoom:150%;">

<img src="/2022/02/21/5-2-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86Jira%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%AE%A1%E7%90%86/image-20220214135540035-164481814092354-164541126166458.png" alt="image-20220214135540035" style="zoom:150%;">

<h3 id="创建问题，修改顺序"><a href="#创建问题，修改顺序" class="headerlink" title="创建问题，修改顺序"></a>创建问题，修改顺序</h3><p>新建问题已经是自己设置的需要填写的讯息了，但是顺序还是不太准确的，需要对内容顺序进行调整。在测试用例中，在”域”中调整问题页面的顺序。现在问题的顺序已经进行了调整。点击新建问题后现在项目中共有两个问题。</p>
<img src="/2022/02/21/5-2-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86Jira%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%AE%A1%E7%90%86/image-20220214135628057-164481818895855-164541126166459.png" alt="image-20220214135628057" style="zoom: 67%;">

<img src="/2022/02/21/5-2-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86Jira%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%AE%A1%E7%90%86/image-20220214135636429-164481819741356-164541126166462.png" alt="image-20220214135636429" style="zoom:80%;">

<img src="/2022/02/21/5-2-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86Jira%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%AE%A1%E7%90%86/image-20220214135642201-164481820309057-164541126166460.png" alt="image-20220214135642201" style="zoom:150%;">

<img src="/2022/02/21/5-2-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86Jira%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%AE%A1%E7%90%86/image-20220214135647087-164481820833158-164541126166461.png" alt="image-20220214135647087" style="zoom:80%;">

<img src="/2022/02/21/5-2-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86Jira%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%AE%A1%E7%90%86/image-20220214135651582-164481821243759-164541126166463.png" alt="image-20220214135651582" style="zoom:150%;">

<h1 id="笔记总结"><a href="#笔记总结" class="headerlink" title="笔记总结"></a>笔记总结</h1><ul>
<li><p>新建问题类型</p>
</li>
<li><p>把问题类型添加到项目中</p>
</li>
<li><p>新建工作流</p>
</li>
<li><p>把工作流与问题类型关联</p>
</li>
<li><p>新建界面</p>
</li>
<li><p>界面与问题类型关联</p>
</li>
<li><p>新建字段</p>
</li>
<li><p>把字段添加到界面中</p>
</li>
<li><p>新建字段配置方案</p>
</li>
<li><p>配置域，并且添加到域配置方案中</p>
</li>
<li><p>关联域配置方案和问题类型</p>
</li>
</ul>
]]></content>
      <categories>
        <category>测试学习</category>
      </categories>
      <tags>
        <tag>测试流程与实战</tag>
      </tags>
  </entry>
  <entry>
    <title>24.4 web端常见Bug解析</title>
    <url>/2022/03/30/24-4-web%E7%AB%AF%E5%B8%B8%E8%A7%81Bug%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<h1 id="1-页面布局方面"><a href="#1-页面布局方面" class="headerlink" title="1. 页面布局方面"></a>1. 页面布局方面</h1><h2 id="1-1-页面一行内容超长展示错乱"><a href="#1-1-页面一行内容超长展示错乱" class="headerlink" title="1.1 页面一行内容超长展示错乱"></a>1.1 页面一行内容超长展示错乱</h2><img src="/2022/03/30/24-4-web%E7%AB%AF%E5%B8%B8%E8%A7%81Bug%E8%A7%A3%E6%9E%90/image-20220330104304951.png" alt="image-20220330104304951" style="zoom:50%;">

<h2 id="1-2-更换设备布局错乱"><a href="#1-2-更换设备布局错乱" class="headerlink" title="1.2 更换设备布局错乱"></a>1.2 更换设备布局错乱</h2><img src="/2022/03/30/24-4-web%E7%AB%AF%E5%B8%B8%E8%A7%81Bug%E8%A7%A3%E6%9E%90/image-20220330104343241.png" alt="image-20220330104343241" style="zoom:50%;">





<h1 id="2-页面元素方面"><a href="#2-页面元素方面" class="headerlink" title="2. 页面元素方面"></a>2. 页面元素方面</h1><h2 id="2-1-输入域提示信息不明确"><a href="#2-1-输入域提示信息不明确" class="headerlink" title="2.1 输入域提示信息不明确"></a>2.1 输入域提示信息不明确</h2><img src="/2022/03/30/24-4-web%E7%AB%AF%E5%B8%B8%E8%A7%81Bug%E8%A7%A3%E6%9E%90/image-20220330104504547.png" alt="image-20220330104504547" style="zoom:50%;">

<h2 id="2-2-输入框包含html字符时出现异常"><a href="#2-2-输入框包含html字符时出现异常" class="headerlink" title="2.2 输入框包含html字符时出现异常"></a>2.2 输入框包含html字符时出现异常</h2><p><img src="/2022/03/30/24-4-web%E7%AB%AF%E5%B8%B8%E8%A7%81Bug%E8%A7%A3%E6%9E%90/image-20220330104603016.png" alt="image-20220330104603016"></p>
<h1 id="3-功能方面"><a href="#3-功能方面" class="headerlink" title="3.  功能方面"></a>3.  功能方面</h1><h2 id="3-1-功能不符合需求"><a href="#3-1-功能不符合需求" class="headerlink" title="3.1 功能不符合需求"></a>3.1 功能不符合需求</h2><p><img src="/2022/03/30/24-4-web%E7%AB%AF%E5%B8%B8%E8%A7%81Bug%E8%A7%A3%E6%9E%90/image-20220330104947396.png" alt="image-20220330104947396"></p>
<h2 id="3-2-提示信息错误"><a href="#3-2-提示信息错误" class="headerlink" title="3.2 提示信息错误"></a>3.2 提示信息错误</h2><h2 id="3-3-JS报错"><a href="#3-3-JS报错" class="headerlink" title="3.3 JS报错"></a><img src="/2022/03/30/24-4-web%E7%AB%AF%E5%B8%B8%E8%A7%81Bug%E8%A7%A3%E6%9E%90/image-20220330105012025.png" alt="image-20220330105012025">3.3 JS报错</h2><p><img src="/2022/03/30/24-4-web%E7%AB%AF%E5%B8%B8%E8%A7%81Bug%E8%A7%A3%E6%9E%90/image-20220330105120091.png" alt="image-20220330105120091"></p>
<h2 id="3-4-更改不同步"><a href="#3-4-更改不同步" class="headerlink" title="3.4 更改不同步"></a>3.4 更改不同步</h2><p>登录后打开多个页面。在一个页面中操作修改内容，在另一个页面中查看，已经修改过的内容在另一个页面上没有体现。</p>
<h2 id="3-5-登录状态不同步"><a href="#3-5-登录状态不同步" class="headerlink" title="3.5 登录状态不同步"></a>3.5 登录状态不同步</h2><p>打开多个页面。其中一个页面登录成功，另一个页面刷新，没有同步为登录状态。</p>
<h1 id="4-其他"><a href="#4-其他" class="headerlink" title="4. 其他"></a>4. 其他</h1><h2 id="4-1-页面请求失败"><a href="#4-1-页面请求失败" class="headerlink" title="4.1 页面请求失败"></a>4.1 页面请求失败</h2><p><img src="/2022/03/30/24-4-web%E7%AB%AF%E5%B8%B8%E8%A7%81Bug%E8%A7%A3%E6%9E%90/image-20220330105635848.png" alt="image-20220330105635848"></p>
<h2 id="4-2-加载时间太长"><a href="#4-2-加载时间太长" class="headerlink" title="4.2 加载时间太长"></a>4.2 加载时间太长</h2><p><img src="/2022/03/30/24-4-web%E7%AB%AF%E5%B8%B8%E8%A7%81Bug%E8%A7%A3%E6%9E%90/image-20220330105656438.png" alt="image-20220330105656438"></p>
]]></content>
  </entry>
  <entry>
    <title>5.3 测试流程管理Jira系统——测试流程定制</title>
    <url>/2022/02/21/5-3-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86Jira%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E5%AE%9A%E5%88%B6/</url>
    <content><![CDATA[<h1 id="5-3-测试流程管理jira系统——测试用例管理"><a href="#5-3-测试流程管理jira系统——测试用例管理" class="headerlink" title="5.3 测试流程管理jira系统——测试用例管理"></a>5.3 测试流程管理jira系统——测试用例管理</h1><h2 id="Jira使用者"><a href="#Jira使用者" class="headerlink" title="Jira使用者"></a>Jira使用者</h2><ul>
<li><p>管理者</p>
</li>
<li><p>项目经理</p>
</li>
<li><p>产品</p>
</li>
<li><p>开发</p>
</li>
<li><p>测试</p>
</li>
</ul>
<h2 id="Jira中的基本概念"><a href="#Jira中的基本概念" class="headerlink" title="Jira中的基本概念"></a>Jira中的基本概念</h2><ul>
<li><p>Project项目</p>
<ul>
<li>问题的容器</li>
</ul>
</li>
<li><p>Issue问题</p>
<blockquote>
<p>每一个问题都是一个测试用例</p>
</blockquote>
<ul>
<li><p>管理各种事务</p>
</li>
<li><p>问题类型<a href="https://jira.ceshiren.com/secure/ShowConstantsHelp.jspa?decorator=popup#IssueTypes">https://jira.ceshiren.com/secure/ShowConstantsHelp.jspa?decorator=popup#IssueTypes</a></p>
</li>
</ul>
</li>
<li><p>Field字段&#x2F;域</p>
  <img src="/2022/02/21/5-3-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86Jira%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E5%AE%9A%E5%88%B6/image-20220214140534545.png" style="zoom:80%;">
</li>
<li><p>Workflow工作流</p>
<p>  描述问题的状态以及状态之间的转化</p>
</li>
<li><p>Screen界面&#x2F;屏幕</p>
<ul>
<li>展示字段的容器</li>
</ul>
</li>
</ul>
<img src="/2022/02/21/5-3-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E7%AE%A1%E7%90%86Jira%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E5%AE%9A%E5%88%B6/image-20220214140556008-16448187574832.png" style="zoom:150%;">
]]></content>
      <categories>
        <category>测试学习</category>
      </categories>
      <tags>
        <tag>测试流程与实战</tag>
      </tags>
  </entry>
  <entry>
    <title>6 测试流程实战.md</title>
    <url>/2022/02/21/6-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E5%AE%9E%E6%88%98-md/</url>
    <content><![CDATA[<h1 id="业务架构分析"><a href="#业务架构分析" class="headerlink" title="业务架构分析"></a>业务架构分析</h1><h2 id="业务知识梳理"><a href="#业务知识梳理" class="headerlink" title="业务知识梳理"></a>业务知识梳理</h2><ul>
<li><p>业务架构：业务模块之间的关系</p>
</li>
<li><p>技术架构：技术组件之间的关系与通讯方式</p>
</li>
<li><p>组织架构：协作团队的组织关系</p>
</li>
<li><p>数据架构：数据的关联关系</p>
</li>
</ul>
<h2 id="测试架构"><a href="#测试架构" class="headerlink" title="测试架构"></a>测试架构</h2><ul>
<li><p>业务架构：业务架构与流程图分析</p>
</li>
<li><p>思维导图</p>
<blockquote>
<p>分析父子关系、包含关系···</p>
</blockquote>
</li>
<li><p>plantuml</p>
</li>
</ul>
<h2 id="测试活动管理"><a href="#测试活动管理" class="headerlink" title="测试活动管理"></a>测试活动管理</h2><ul>
<li><p>测试用例管理平台</p>
</li>
<li><p>测试执行分析</p>
</li>
<li><p>bug管理平台</p>
</li>
<li><p>测试报告与测试分析图表</p>
</li>
</ul>
<h1 id="测试用例导入与管理"><a href="#测试用例导入与管理" class="headerlink" title="测试用例导入与管理"></a>测试用例导入与管理</h1><h2 id="测试用例转化"><a href="#测试用例转化" class="headerlink" title="测试用例转化"></a>测试用例转化</h2><ul>
<li><p>手工转化</p>
</li>
<li><p>脚本转化</p>
<blockquote>
<p>利用python将xmind转化为表格csv</p>
</blockquote>
  <img src="/2022/02/21/6-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E5%AE%9E%E6%88%98-md/image-20220214141635394-16448193965191.png" alt="image-20220214141635394">

  <img src="/2022/02/21/6-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E5%AE%9E%E6%88%98-md/image-20220214141644575-16448194054622.png" alt="image-20220214141644575" style="zoom:150%;">
</li>
<li><p>将表格csv导入到jira&gt;&gt;问题中，此时表格字段需要与jira问题的字段对应一致，就需要添加模块。（在下一步）</p>
</li>
</ul>
<img src="/2022/02/21/6-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E5%AE%9E%E6%88%98-md/image-20220214141705913-16448194273123.png" alt="image-20220214141705913" style="zoom:150%;">

<ul>
<li>选择csv文件后，选择要导入的项目。</li>
</ul>
<blockquote>
<p>编码格式：UTF-8&#x2F;GB2312</p>
</blockquote>
<img src="/2022/02/21/6-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E5%AE%9E%E6%88%98-md/image-20220214141724208-16448194452624.png" alt="image-20220214141724208" style="zoom:80%;">

<ul>
<li>进行字段的一一对应</li>
</ul>
<img src="/2022/02/21/6-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E5%AE%9E%E6%88%98-md/image-20220214141737440-16448194584695.png" alt="image-20220214141737440" style="zoom:80%;">

<ul>
<li>导入前可以先进行验证，无误再导入</li>
</ul>
<img src="/2022/02/21/6-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E5%AE%9E%E6%88%98-md/image-20220214141811191-16448194922536.png" alt="image-20220214141811191" style="zoom: 50%;">

<ul>
<li>导入到项目后，可以实现从xmind到Jira测试用例的批量管理。</li>
</ul>
<blockquote>
<p>表头对应字段会忽略</p>
</blockquote>
<img src="/2022/02/21/6-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E5%AE%9E%E6%88%98-md/image-20220214141825122-16448195063027.png" alt="image-20220214141825122" style="zoom:150%;">

<ul>
<li>添加模块</li>
</ul>
<blockquote>
<p>输入模块名称后”添加”模块。</p>
</blockquote>
<img src="/2022/02/21/6-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E5%AE%9E%E6%88%98-md/image-20220214141903517-16448195444788.png" alt="image-20220214141903517" style="zoom:150%;">

<ul>
<li>测试用例状态转换</li>
</ul>
<blockquote>
<p>中间状态会变成按钮</p>
</blockquote>
<img src="/2022/02/21/6-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E5%AE%9E%E6%88%98-md/image-20220214141937140-16448195781479.png" alt="image-20220214141937140" style="zoom:150%;">

<ul>
<li>测试用例出现bug提交到bug管理系统</li>
</ul>
<img src="/2022/02/21/6-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E5%AE%9E%E6%88%98-md/image-20220214141949056-164481959013110.png" alt="image-20220214141949056" style="zoom:150%;">

<h1 id="Bug录入与管理"><a href="#Bug录入与管理" class="headerlink" title="Bug录入与管理"></a>Bug录入与管理</h1><h2 id="1-BUG定义"><a href="#1-BUG定义" class="headerlink" title="1 BUG定义"></a>1 BUG定义</h2><ul>
<li><p>程序漏洞</p>
</li>
<li><p>程序错误</p>
</li>
<li><p>程序不完善</p>
</li>
</ul>
<h2 id="2-Bug-判定标准"><a href="#2-Bug-判定标准" class="headerlink" title="2 Bug 判定标准"></a>2 Bug 判定标准</h2><ul>
<li><p>软件未达到客户需求文档的功能和性能</p>
</li>
<li><p>软件出现客户需求不能容忍的错误</p>
</li>
<li><p>软件的使用未能符合客户的习惯和工作环境</p>
</li>
<li><p>软件超出需求文档的范围</p>
</li>
</ul>
<h2 id="3-经典面试题：如果开发人员认为你提交的bug不是一个bug，这时候你怎么办？"><a href="#3-经典面试题：如果开发人员认为你提交的bug不是一个bug，这时候你怎么办？" class="headerlink" title="3 经典面试题：如果开发人员认为你提交的bug不是一个bug，这时候你怎么办？"></a>3 <font color="red">经典面试题：如果开发人员认为你提交的bug不是一个bug，这时候你怎么办？</font></h2><ul>
<li><p>测试人员描述不清晰：提高自己的业务水平，明晰描述，没有歧义</p>
</li>
<li><p>难复现的 bug：留好证据：截图、日志，做好记录</p>
</li>
<li><p>有争议的 bug （建议类）：集体讨论，平常的话语权</p>
</li>
<li><p>功能性的 bug（需求理解有偏差）：提 bug 需要提供对应的需求中的证据，设计方案，省去争议的可能性</p>
</li>
</ul>
<h2 id="4-BUG严重程度"><a href="#4-BUG严重程度" class="headerlink" title="4 BUG严重程度"></a>4 BUG严重程度</h2><ul>
<li><p>致命：系统崩溃、挂起，导致系统不能正常运行</p>
</li>
<li><p>严重：严重影响住流程、基本功能的实现</p>
</li>
<li><p>一般：主要功能不受印象，性能不满足，产生一些中间结果错误但是最终结果影响不大的问题</p>
</li>
<li><p>建议：优化，界面、拼写、用户使用不方便</p>
</li>
</ul>
<h2 id="5-BUG优先级"><a href="#5-BUG优先级" class="headerlink" title="5 BUG优先级"></a>5 BUG优先级</h2><ul>
<li><p>最高：需要立刻修改</p>
</li>
<li><p>高：需要尽快修改</p>
</li>
<li><p>中：需要修改</p>
</li>
<li><p>低：需要修改或不修改</p>
</li>
</ul>
<h2 id="6-严重程度和优先级的关系"><a href="#6-严重程度和优先级的关系" class="headerlink" title="6 严重程度和优先级的关系"></a>6 严重程度和优先级的关系</h2><ul>
<li><p>一般来说，是一一对应的关系，最严重的优先级最高</p>
</li>
<li><p>也有特殊情况，有时候严重性高的软件缺陷，优先级不一定高，甚至不需要处理有时候一些严重性低的缺陷却需要及时处理，具有较高的优先级（比如极端条件下的崩溃，可能优先级就没有那么高。或者公司名称之类的拼写错误，优先级就是最高的。需要具体情况具体分析）。</p>
</li>
</ul>
<h2 id="不同角色对bug的职责"><a href="#不同角色对bug的职责" class="headerlink" title="不同角色对bug的职责"></a>不同角色对bug的职责</h2><h3 id="项目经理"><a href="#项目经理" class="headerlink" title="项目经理"></a>项目经理</h3><ul>
<li><p>分配Bug</p>
</li>
<li><p>处理意见</p>
</li>
<li><p>定优先级</p>
</li>
</ul>
<h3 id="开发人员"><a href="#开发人员" class="headerlink" title="开发人员"></a>开发人员</h3><ul>
<li><p>分析Bug</p>
</li>
<li><p>修改Bug</p>
</li>
</ul>
<h3 id="测试人员"><a href="#测试人员" class="headerlink" title="测试人员"></a>测试人员</h3><ul>
<li><p>提Bug</p>
</li>
<li><p>反应Bug的严重程度</p>
</li>
<li><p>验证Bug</p>
</li>
</ul>
<h3 id="测试组长"><a href="#测试组长" class="headerlink" title="测试组长"></a>测试组长</h3><ul>
<li><p>审核提交的Bug</p>
</li>
<li><p>总结Bug情况</p>
</li>
</ul>
<h3 id="产品人员"><a href="#产品人员" class="headerlink" title="产品人员"></a>产品人员</h3><ul>
<li><p>解释需求</p>
</li>
<li><p>给出处理意见</p>
</li>
<li><p>Bug处理流程</p>
</li>
</ul>
<img src="/2022/02/21/6-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E5%AE%9E%E6%88%98-md/image-20220214142356668-164481983769111.png" alt="image-20220214142356668" style="zoom:150%;">

<h2 id="Bug处理意见"><a href="#Bug处理意见" class="headerlink" title="Bug处理意见"></a>Bug处理意见</h2><ul>
<li><p>可修改</p>
</li>
<li><p>重复</p>
</li>
<li><p>推迟处理</p>
</li>
<li><p>设计问题</p>
</li>
<li><p>不可复现</p>
</li>
<li><p>不是问题</p>
</li>
<li><p>不修改</p>
</li>
</ul>
<h2 id="Bug-报告"><a href="#Bug-报告" class="headerlink" title="Bug 报告"></a>Bug 报告</h2><img src="/2022/02/21/6-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E5%AE%9E%E6%88%98-md/image-20220214142413797-164481985517512.png" alt="image-20220214142413797" style="zoom:80%;">

<h3 id="bug-报告要素"><a href="#bug-报告要素" class="headerlink" title="bug 报告要素"></a>bug 报告要素</h3><ul>
<li><p>标题</p>
</li>
<li><p>所属产品</p>
</li>
<li><p>发现版本</p>
</li>
<li><p>所属模块</p>
</li>
<li><p>提交人</p>
</li>
<li><p>复现概率</p>
</li>
<li><p>严重程度</p>
</li>
<li><p>优先级</p>
</li>
<li><p>bug 具体描述：发现环境、前提条件、复现步骤、预期结果、实际结果</p>
</li>
<li><p>附件：截图、录屏、log 日志、测试数据</p>
</li>
</ul>
<h1 id="Bug管理"><a href="#Bug管理" class="headerlink" title="Bug管理"></a>Bug管理</h1><h2 id="1-新建bug管理系统"><a href="#1-新建bug管理系统" class="headerlink" title="1 新建bug管理系统"></a>1 新建bug管理系统</h2><img src="/2022/02/21/6-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E5%AE%9E%E6%88%98-md/image-20220214142618817-164481997980713.png" alt="image-20220214142618817" style="zoom:150%;">

<img src="/2022/02/21/6-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E5%AE%9E%E6%88%98-md/image-20220214142624984-164481998653414.png" alt="image-20220214142624984" style="zoom:150%;">

<h2 id="2-新建bug问题类型"><a href="#2-新建bug问题类型" class="headerlink" title="2 新建bug问题类型"></a>2 新建bug问题类型</h2><img src="/2022/02/21/6-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E5%AE%9E%E6%88%98-md/image-20220214142638517-164481999940515.png" alt="image-20220214142638517" style="zoom:150%;">

<img src="/2022/02/21/6-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E5%AE%9E%E6%88%98-md/image-20220214142647972-164482000947016.png" alt="image-20220214142647972" style="zoom:150%;">

<h2 id="3-BUG关联项目"><a href="#3-BUG关联项目" class="headerlink" title="3 BUG关联项目"></a>3 BUG关联项目</h2><img src="/2022/02/21/6-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E5%AE%9E%E6%88%98-md/image-20220214142702099-164482002304217.png" alt="image-20220214142702099" style="zoom:150%;">

<img src="/2022/02/21/6-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E5%AE%9E%E6%88%98-md/image-20220214142706181-164482002730018.png" alt="image-20220214142706181" style="zoom:150%;">

<img src="/2022/02/21/6-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E5%AE%9E%E6%88%98-md/image-20220214142710679-164482003154719.png" alt="image-20220214142710679" style="zoom:150%;">

<h2 id="4-问题关联工作流"><a href="#4-问题关联工作流" class="headerlink" title="4 问题关联工作流"></a>4 问题关联工作流</h2><img src="/2022/02/21/6-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E5%AE%9E%E6%88%98-md/image-20220214142729878-164482005083920.png" alt="image-20220214142729878" style="zoom:150%;">

<img src="/2022/02/21/6-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E5%AE%9E%E6%88%98-md/image-20220214142733840-164482005479921.png" alt="image-20220214142733840" style="zoom:150%;">

<img src="/2022/02/21/6-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E5%AE%9E%E6%88%98-md/image-20220214142738698-164482005978022.png" alt="image-20220214142738698" style="zoom:80%;">

<h2 id="5-工作流关联到项目。一定要点击”发布”按钮"><a href="#5-工作流关联到项目。一定要点击”发布”按钮" class="headerlink" title="5 工作流关联到项目。一定要点击”发布”按钮"></a>5 工作流关联到项目。一定要点击”发布”按钮</h2><img src="/2022/02/21/6-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E5%AE%9E%E6%88%98-md/image-20220214142754846-164482007596223.png" alt="image-20220214142754846" style="zoom:150%;">

<img src="/2022/02/21/6-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E5%AE%9E%E6%88%98-md/image-20220214142758371-164482007923424.png" alt="image-20220214142758371" style="zoom: 80%;">

<img src="/2022/02/21/6-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E5%AE%9E%E6%88%98-md/image-20220214142801926-164482008284025.png" alt="image-20220214142801926" style="zoom:150%;">

<h2 id="6-新建界面关联到项目"><a href="#6-新建界面关联到项目" class="headerlink" title="6 新建界面关联到项目"></a>6 新建界面关联到项目</h2><img src="/2022/02/21/6-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E5%AE%9E%E6%88%98-md/image-20220214142852713-164482013396226.png" alt="image-20220214142852713" style="zoom:150%;">

<img src="/2022/02/21/6-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E5%AE%9E%E6%88%98-md/image-20220214142856379-164482013738727.png" alt="image-20220214142856379" style="zoom:150%;">

<img src="/2022/02/21/6-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E5%AE%9E%E6%88%98-md/image-20220214142901091-164482014208428.png" alt="image-20220214142901091" style="zoom:150%;">

<img src="/2022/02/21/6-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E5%AE%9E%E6%88%98-md/image-20220214142906181-164482014700329.png" alt="image-20220214142906181" style="zoom:150%;">

<img src="/2022/02/21/6-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E5%AE%9E%E6%88%98-md/image-20220214142910435-164482015132830.png" alt="image-20220214142910435" style="zoom: 80%;">

<img src="/2022/02/21/6-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E5%AE%9E%E6%88%98-md/image-20220214142917161-164482015820831.png" alt="image-20220214142917161" style="zoom:150%;">

<img src="/2022/02/21/6-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E5%AE%9E%E6%88%98-md/image-20220214142922269-164482016334532.png" alt="image-20220214142922269" style="zoom:150%;">

<h2 id="7-新建域配置并关联到项目"><a href="#7-新建域配置并关联到项目" class="headerlink" title="7 新建域配置并关联到项目"></a>7 新建域配置并关联到项目</h2><blockquote>
<p>自定义字段关联到页面后要更新</p>
</blockquote>
<img src="/2022/02/21/6-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E5%AE%9E%E6%88%98-md/image-20220214143057247-164482025849933.png" alt="image-20220214143057247" style="zoom:150%;">

<img src="/2022/02/21/6-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E5%AE%9E%E6%88%98-md/image-20220214143104169-164482026523334.png" alt="image-20220214143104169" style="zoom:150%;">

<h2 id="8-链接问题到bug"><a href="#8-链接问题到bug" class="headerlink" title="8 链接问题到bug"></a>8 链接问题到bug</h2><img src="/2022/02/21/6-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E5%AE%9E%E6%88%98-md/image-20220214143132102-164482029294435.png" alt="image-20220214143132102" style="zoom:150%;">

<img src="/2022/02/21/6-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E5%AE%9E%E6%88%98-md/image-20220214143135995-164482029710936.png" alt="image-20220214143135995" style="zoom:80%;">

<img src="/2022/02/21/6-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E5%AE%9E%E6%88%98-md/image-20220214143141904-164482030275237.png" alt="image-20220214143141904" style="zoom:80%;">

<img src="/2022/02/21/6-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E5%AE%9E%E6%88%98-md/image-20220214143145536-164482030656338.png" alt="image-20220214143145536" style="zoom:80%;">

<img src="/2022/02/21/6-%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E5%AE%9E%E6%88%98-md/image-20220214143149526-164482031030439.png" alt="image-20220214143149526" style="zoom:80%;">

<h1 id="如何写-Bug-报告"><a href="#如何写-Bug-报告" class="headerlink" title="如何写 Bug 报告"></a>如何写 Bug 报告</h1><ul>
<li><p>Bug 标题（<strong>执行完 A 之后，发生 B</strong>）</p>
</li>
<li><p>Bug 内容：测试环境、复现步骤、预期结果、实际结果</p>
</li>
</ul>
<h1 id="其他注意事项"><a href="#其他注意事项" class="headerlink" title="其他注意事项"></a>其他注意事项</h1><ul>
<li><p>一个 bug 报告只能描述一个 bug</p>
</li>
<li><p>Bug 的唯一性</p>
</li>
<li><p>复现</p>
</li>
<li><p>报告 bug 时要使用中性语言，不要带有感情色彩</p>
</li>
</ul>
<h1 id="BUG定位"><a href="#BUG定位" class="headerlink" title="BUG定位"></a>BUG定位</h1><ul>
<li><p>外部原因</p>
</li>
<li><p>网络原因</p>
</li>
<li><p>配置错误</p>
</li>
<li><p>缩小范围</p>
</li>
<li><p>避免误报</p>
</li>
</ul>
<h1 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h1><ul>
<li><p>批量导入问题</p>
</li>
<li><p>链接问题与bug</p>
</li>
</ul>
<h1 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h1><ul>
<li>Jira项目管理</li>
</ul>
]]></content>
      <categories>
        <category>测试学习</category>
      </categories>
      <tags>
        <tag>测试流程与实战</tag>
      </tags>
  </entry>
  <entry>
    <title>little tips</title>
    <url>/2022/03/23/little-tips/</url>
    <content><![CDATA[<p><code>pip install pyreadline -i https://pypi.tuna.tsinghua.edu.cn/simple</code></p>
<p>pycharm快捷键：</p>
<p>Alt+鼠标左键选择多行</p>
<p>Alt+Enter 导入</p>
]]></content>
  </entry>
  <entry>
    <title>test</title>
    <url>/2022/02/23/test/</url>
    <content><![CDATA[<p>1原始粘贴——本地显示，博客不显示</p>
<p><img src="/2022/02/23/test/20220223111010791.png" alt="20220223111010791"></p>
<p>2常规写法本地不显示博客显示</p>
<p><img src="/2022/02/23/test/20220223135820032.png" alt="20220223135820032"></p>
<p>3相对路径——本地显示博客不显示</p>
<p><img src="/2022/02/23/test/20220223111021023.png" alt="20220223111021023"></p>
<p>4src本地显示且博客显示</p>
<img src="/2022/02/23/test/20220223111129570.png">



<p>5插件——本地不显示博客显示</p>
<img src="/2022/02/23/test/02/23/test/20220223111021023.png" class>



]]></content>
  </entry>
  <entry>
    <title>web自动化测试</title>
    <url>/2022/03/30/Web%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h1 id="1-Selenium的安装"><a href="#1-Selenium的安装" class="headerlink" title="1. Selenium的安装"></a>1. Selenium的安装</h1><h2 id="1-1-Selenium的简介"><a href="#1-1-Selenium的简介" class="headerlink" title="1.1 Selenium的简介"></a>1.1 Selenium的简介</h2><ul>
<li>官方网站：<br>  <a href="https://www.selenium.dev/">https://www.selenium.dev/</a></li>
<li>简介<ul>
<li>用于web浏览器测试的工具</li>
<li>支持的浏览器包括IE，Firefox，Safari，Chrome，Edge等</li>
<li>使用简单，可使用Java，Python等多种语言编写用例脚本</li>
<li>主要由三个工具构成：WebDriver、IDE、Grid</li>
</ul>
</li>
</ul>
<h2 id="1-2-Selenium架构"><a href="#1-2-Selenium架构" class="headerlink" title="1.2 Selenium架构"></a>1.2 Selenium架构</h2><img src="/2022/03/30/Web%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/image-20220330110837429.png" alt="image-20220330110837429" style="zoom:50%;">

<h2 id="1-3-Selenium环境配置步骤"><a href="#1-3-Selenium环境配置步骤" class="headerlink" title="1.3 Selenium环境配置步骤"></a>1.3 Selenium环境配置步骤</h2><ol>
<li>准备好python环境配置</li>
<li>准备好selenium环境</li>
<li>下载浏览器对应的driver版本</li>
<li>driver配置环境变量</li>
<li>在python中import对应的依赖</li>
</ol>
<h2 id="1-4-Selenium的安装"><a href="#1-4-Selenium的安装" class="headerlink" title="1.4  Selenium的安装"></a>1.4  Selenium的安装</h2><ul>
<li><p>前提</p>
<ul>
<li>配置好python环境</li>
<li>配置好pip工具</li>
</ul>
</li>
<li><p>安装</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line">pip --<span class="keyword">default</span>-timeout=<span class="number">100</span> install selenium==<span class="number">3.141</span><span class="number">.0</span> -i http:<span class="comment">//pypi.douban.com/simple/ --trusted-host pypi.douban.com</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>检查是否安装</p>
<ul>
<li><p><code>pip show selenium</code></p>
<p>  <img src="/2022/03/30/Web%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/image-20220330112032113.png" alt="image-20220330112032113"></p>
</li>
</ul>
</li>
</ul>
<h2 id="1-5-Driver的配置"><a href="#1-5-Driver的配置" class="headerlink" title="1.5 Driver的配置"></a>1.5 Driver的配置</h2><ul>
<li><p>Driver的介绍</p>
<ul>
<li><a href="https://www.selenium.dev/documentation/en/webdriver/driver_requirements/">https://www.selenium.dev/documentation/en/webdriver/driver_requirements/</a></li>
</ul>
</li>
<li><p>Chrome Driver的下载</p>
<ul>
<li>淘宝镜像：<a href="https://npm.taobao.org/mirrors/chromedriver/">https://npm.taobao.org/mirrors/chromedriver/</a></li>
<li>官方网站：<a href="https://chromedriver.storage.googleapis.com/index.html">https://chromedriver.storage.googleapis.com/index.html</a></li>
</ul>
</li>
<li><p>FireFox Driver的下载</p>
<ul>
<li><a href="https://github.com/mozilla/geckodriver/releases">https://github.com/mozilla/geckodriver/releases</a></li>
</ul>
</li>
<li><p>Driver的安装</p>
<ul>
<li><p>先找和自己浏览器版本适配的driver版本</p>
<ul>
<li><p>首先查看自己的浏览器版本(Google)</p>
  <img src="/2022/03/30/Web%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/image-20220330113142937.png" alt="image-20220330113142937" style="zoom:47%;">

  <img src="/2022/03/30/Web%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/image-20220330113204520.png" alt="image-20220330113204520" style="zoom:50%;">
</li>
<li><p>在去淘宝镜像找到符合浏览器版本的driver进行下载</p>
  <img src="/2022/03/30/Web%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/image-20220330113333105.png" alt="image-20220330113333105" style="zoom:50%;">

  <img src="/2022/03/30/Web%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/image-20220330113416609.png" alt="image-20220330113416609" style="zoom:50%;"></li>
</ul>
</li>
<li><p>导入到环境变量中(Mac || windows)</p>
<ul>
<li><p>Windows</p>
<ul>
<li><p>先找到刚下载的driver解压后地址</p>
  <img src="/2022/03/30/Web%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/image-20220330113929913.png" alt="image-20220330113929913" style="zoom:50%;">
</li>
<li><p>再将该地址添加到环境变量 <code>path</code> 中</p>
</li>
<li><p>验证是否配置成功</p>
<ul>
<li>在cmd中，输入 <code>chromedriver --version</code></li>
</ul>
<p>  <img src="/2022/03/30/Web%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/image-20220330114139974.png" alt="image-20220330114139974"></p>
</li>
</ul>
</li>
<li><p>MAC</p>
<ul>
<li><code>vim ~/.bash_profile export PATH=$PATH:[chromedriver所在路径]</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="1-6-selenium在python中如何使用"><a href="#1-6-selenium在python中如何使用" class="headerlink" title="1.6 selenium在python中如何使用"></a>1.6 selenium在python中如何使用</h2><ul>
<li><p>导入selenium</p>
</li>
<li><p>实例化driver</p>
</li>
<li><p>打开网址</p>
</li>
<li><p>关闭driver</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入Selenium包</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_selenium</span>():</span><br><span class="line">    <span class="comment"># 创建一个Chromedriver的实例。Chrome()会从环境变量中寻找浏览器</span></span><br><span class="line">    driver = webdriver.Chrome()</span><br><span class="line">    <span class="comment"># driver=webdriver.Ie()    #打开IE浏览器</span></span><br><span class="line">    <span class="comment"># driver=webdriver.Firefox()     #打开Firefox浏览器</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打开网址</span></span><br><span class="line">    driver.get(<span class="string">&quot;https://www.baidu.com/&quot;</span>)</span><br><span class="line">    <span class="comment"># 关闭driver</span></span><br><span class="line">    driver.quit()</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="2-SeleniumIDE的用例录制"><a href="#2-SeleniumIDE的用例录制" class="headerlink" title="2. SeleniumIDE的用例录制"></a>2. SeleniumIDE的用例录制</h1><h2 id="2-1-SeleniumlDE用例录制使用场景"><a href="#2-1-SeleniumlDE用例录制使用场景" class="headerlink" title="2.1 SeleniumlDE用例录制使用场景"></a>2.1 SeleniumlDE用例录制使用场景</h2><ul>
<li>刚开始入门UI自动化测试</li>
<li>团队代码基础较差</li>
<li>技术成长之后学习价值不高</li>
</ul>
<h2 id="2-2-SeleniumIDE的下载及安装"><a href="#2-2-SeleniumIDE的下载及安装" class="headerlink" title="2.2 SeleniumIDE的下载及安装"></a>2.2 SeleniumIDE的下载及安装</h2><ul>
<li><p>官网：<a href="https://www.selenium.dev/">https://www.selenium.dev/</a></p>
</li>
<li><p>Chrome插件：<a href="https://chrome.google.com/webstore/detail/selenium-ide/mooikfkahbdckldjjndioackbalphokd">https://chrome.google.com/webstore/detail/selenium-ide/mooikfkahbdckldjjndioackbalphokd</a></p>
</li>
<li><p>Firefox:<a href="https://addons.mozilla.org/en-US/firefox/addon/selenium-ide/">https://addons.mozilla.org/en-US/firefox/addon/selenium-ide/</a></p>
</li>
<li><p>github release:<a href="https://github.com/SeleniumHQ/selenium-ide/releases">https://github.com/SeleniumHQ/selenium-ide/releases</a></p>
</li>
<li><p>其它版本：<a href="https://addons.mozilla.org/en-GB/firefox/addon/selenium-ide/versions/">https://addons.mozilla.org/en-GB/firefox/addon/selenium-ide/versions/</a></p>
<blockquote>
<p>注意：Chrome插件在国内无法下载，Firefox可以直接下载。</p>
</blockquote>
</li>
</ul>
<h2 id="2-3-启动"><a href="#2-3-启动" class="headerlink" title="2.3 启动"></a>2.3 启动</h2><ul>
<li>安装完成后，通过在浏览器的菜单栏中点击它的图标来启动它：</li>
<li>如果没看到图标，首先确保是否安装了Selenium IDE 扩展插件</li>
<li>通过以下链接访问所有插件</li>
<li>Chrome：chrome:&#x2F;&#x2F;extensions</li>
<li>Firefox：about:addons</li>
</ul>
<h2 id="2-4-SeleniumIDE常用功能"><a href="#2-4-SeleniumIDE常用功能" class="headerlink" title="2.4 SeleniumIDE常用功能"></a>2.4 SeleniumIDE常用功能</h2><p><img src="/2022/03/30/Web%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/image-20220330144504950.png" alt="image-20220330144504950"></p>
<ol>
<li>新建、保存、打开</li>
<li>开始和停止录制</li>
<li>运行8中的所有的实例</li>
<li>运行单个实例</li>
<li>调试模式</li>
<li>调整案例的运行速度</li>
<li>要录制的网址</li>
<li>实例列表</li>
<li>动作、目标、值</li>
<li>对单条命令的解释</li>
<li>运行日志</li>
</ol>
<h2 id="2-5-使用SeleniumIDE"><a href="#2-5-使用SeleniumIDE" class="headerlink" title="2.5 使用SeleniumIDE"></a>2.5 使用SeleniumIDE</h2><h3 id="step1：创建项目"><a href="#step1：创建项目" class="headerlink" title="step1：创建项目"></a>step1：创建项目</h3><img src="/2022/03/30/Web%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/image-20220330145700022.png" alt="image-20220330145700022" style="zoom: 43%;">

<img src="/2022/03/30/Web%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/image-20220330145730227.png" alt="image-20220330145730227" style="zoom:43%;">

<h3 id="step2：开始录制"><a href="#step2：开始录制" class="headerlink" title="step2：开始录制"></a>step2：开始录制</h3><p>点击开始录制</p>
<img src="/2022/03/30/Web%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/image-20220330145842890.png" alt="image-20220330145842890" style="zoom:43%;">

<p>填入测试的URL，点击开始录制</p>
<img src="/2022/03/30/Web%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/image-20220330150030050.png" alt="image-20220330150030050" style="zoom:43%;">

<p>在录制时，浏览器右下角会出现正在录制的标志</p>
<img src="/2022/03/30/Web%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/image-20220330150257156.png" alt="image-20220330150257156" style="zoom:33%;">

<h3 id="step3：结束录制"><a href="#step3：结束录制" class="headerlink" title="step3：结束录制"></a>step3：结束录制</h3><p>点击”结束录制“按钮</p>
<img src="/2022/03/30/Web%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/image-20220330150439077.png" alt="image-20220330150439077" style="zoom:43%;">

<p>给测试用例起个名字</p>
<img src="/2022/03/30/Web%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/image-20220330150539375.png" alt="image-20220330150539375" style="zoom:43%;">

<h3 id="step4：回放"><a href="#step4：回放" class="headerlink" title="step4：回放"></a>step4：回放</h3><p>点击”回放按钮“会进行回放操作</p>
<img src="/2022/03/30/Web%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/image-20220330150642356.png" alt="image-20220330150642356" style="zoom:43%;">

<p>也可以进行新建命令</p>
<img src="/2022/03/30/Web%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/image-20220330152258425.png" alt="image-20220330152258425" style="zoom: 50%;">

<img src="/2022/03/30/Web%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/image-20220330152228474.png" alt="image-20220330152228474" style="zoom:50%;">

<h3 id="step5：新建测试"><a href="#step5：新建测试" class="headerlink" title="step5：新建测试"></a>step5：新建测试</h3><img src="/2022/03/30/Web%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/image-20220330152427650.png" alt="image-20220330152427650" style="zoom:50%;">

<img src="/2022/03/30/Web%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/image-20220330152448271.png" alt="image-20220330152448271" style="zoom:50%;">

<p>接下来仍然是通过录制的方式获取测试</p>
<p>获取到测试后，可以选择批量执行</p>
<img src="/2022/03/30/Web%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/image-20220330152723889.png" alt="image-20220330152723889" style="zoom:50%;">

<h3 id="step5：创建测试集"><a href="#step5：创建测试集" class="headerlink" title="step5：创建测试集"></a>step5：创建测试集</h3><img src="/2022/03/30/Web%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/image-20220330152850868.png" alt="image-20220330152850868" style="zoom:50%;">

<img src="/2022/03/30/Web%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/image-20220330153607433.png" alt="image-20220330153607433" style="zoom:50%;">

<p>回放操作和测试的完全一致</p>
<h3 id="step6：导出"><a href="#step6：导出" class="headerlink" title="step6：导出"></a>step6：导出</h3><img src="/2022/03/30/Web%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/image-20220330154434819.png" alt="image-20220330154434819" style="zoom:50%;">



<h1 id="3-Selenium测试用例编写"><a href="#3-Selenium测试用例编写" class="headerlink" title="3. Selenium测试用例编写"></a>3. Selenium测试用例编写</h1><h2 id="3-1-测试用例的核心要素"><a href="#3-1-测试用例的核心要素" class="headerlink" title="3.1 测试用例的核心要素"></a>3.1 测试用例的核心要素</h2><ul>
<li>一条测试用例的最终结果只有一个：成功或者失败，</li>
<li>三大核心要素为：标题、步骤、断言<ul>
<li>标题：是对测试用例的描述</li>
<li>步骤：对测试执行过程进行描述</li>
<li>断言：实际结果与预期结果对比</li>
</ul>
</li>
</ul>
<h2 id="3-2-Selenium中如何编写测试用例"><a href="#3-2-Selenium中如何编写测试用例" class="headerlink" title="3.2 Selenium中如何编写测试用例"></a>3.2 Selenium中如何编写测试用例</h2><ul>
<li>步骤：<ul>
<li>打开页面 <a href="https://www.baidu.com/">https://www.baidu.com/</a></li>
<li>输入框输入搜索内容[霍格沃兹测试学院]</li>
<li>点击搜索按钮</li>
<li>找到结果并断言</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Generated by Selenium IDE</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_search</span>():</span><br><span class="line">    driver = webdriver.Chrome()</span><br><span class="line">    driver.implicitly_wait(<span class="number">5</span>)</span><br><span class="line">    <span class="comment"># 打开页面：https:/www.baidu.com</span></span><br><span class="line">    driver.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line">    <span class="comment"># 输入框输入搜索内容[霍格沃兹测试学院]</span></span><br><span class="line">    driver.find_element(By.CSS_SELECTOR, <span class="string">&quot;#kw&quot;</span>).send_keys(<span class="string">&quot;霍格沃兹测试学院&quot;</span>)</span><br><span class="line">    <span class="comment"># 点击搜索按钮</span></span><br><span class="line">    driver.find_element(By.CSS_SELECTOR, <span class="string">&quot;#su&quot;</span>).click()</span><br><span class="line">    <span class="comment"># 找到要查找的内容</span></span><br><span class="line">    result = driver.find_element(By.CSS_SELECTOR, <span class="string">&quot;.result:nth-child(2)&gt;h3&gt;a&gt;em&quot;</span>).text</span><br><span class="line">    <span class="keyword">assert</span> <span class="string">&quot;霍格沃兹测试学院&quot;</span> <span class="keyword">in</span> result</span><br></pre></td></tr></table></figure>

<h1 id="4-Selenium三种等待方式"><a href="#4-Selenium三种等待方式" class="headerlink" title="4. Selenium三种等待方式"></a>4. Selenium三种等待方式</h1><h2 id="4-1-直接等待"><a href="#4-1-直接等待" class="headerlink" title="4.1 直接等待"></a>4.1 直接等待</h2><p>强制等待，线程休眠一定时间</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">time.sleep(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<h2 id="4-2-隐式等待"><a href="#4-2-隐式等待" class="headerlink" title="4.2 隐式等待"></a>4.2 隐式等待</h2><p>设置一个等待时间，轮询查找(默认0.5秒)元素是否出现，如果没出现就抛出<br>异常</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.driver.implicitly_wait(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<p>缺点：隐式等待是<strong>全局的设置</strong>，不一定能使每个操作都恰好合适</p>
<h2 id="4-3-显式等待"><a href="#4-3-显式等待" class="headerlink" title="4.3 显式等待"></a>4.3 显式等待</h2><ul>
<li>在代码中定义等待条件，当条件发生时才继续执行代码</li>
<li><code>WebDriverWait</code>配合<code>until()</code>和<code>until not()</code>方法，根据判断条件进行等待</li>
<li>程序每隔一段时间(默认为0.5秒)进行条件判断，如果条件成立，则执行下一步，否则继续等待，直到超过设置的最长时间</li>
</ul>
<p>例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestWait</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setup</span>(<span class="params">self</span>):</span><br><span class="line">        self.driver = webdriver.Chrome()</span><br><span class="line">        self.driver.get(<span class="string">&quot;https://ceshiren.com/&quot;</span>)</span><br><span class="line">        self.driver.implicitly_wait(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_wait</span>(<span class="params">self</span>):</span><br><span class="line">        self.driver.find_element(By.ID, <span class="string">&#x27;ember33&#x27;</span>).click()</span><br><span class="line">        self.driver.find_element(By.CSS_SELECTOR, <span class="string">&quot;[title~=&#x27;原创精华文章,有100元奖金&#x27;]&quot;</span>).click()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        until(self, method, message=&#x27;&#x27;)</span></span><br><span class="line"><span class="string">        until方法需要传入一个method作为参数，method需要接受一个参数，所以wait_show也需要有一个参数</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 方法1</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wait_show</span>(<span class="params">x</span>):</span><br><span class="line">            <span class="comment"># 定位一组元素用find_elements，elements都是复数</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">len</span>(self.driver.find_elements(By.CSS_SELECTOR, <span class="string">&quot;[title~=&#x27;招聘内推&#x27;]&quot;</span>)) &gt;= <span class="number">1</span></span><br><span class="line">        WebDriverWait(self.driver, <span class="number">10</span>).until(wait_show)</span><br><span class="line">        <span class="comment"># 方法2</span></span><br><span class="line">        <span class="comment"># WebDriverWait(self.driver, 10).until(expected_conditions.element_to_be_clickable((By.CSS_SELECTOR, &quot;[title~=&#x27;招聘内推&#x27;]&quot;)))</span></span><br><span class="line">        self.driver.find_element(By.CSS_SELECTOR, <span class="string">&quot;[title~=&#x27;招聘内推&#x27;]&quot;</span>).click()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;WORLD&quot;</span>)</span><br></pre></td></tr></table></figure>



<h1 id="5-web控件定位与常见操作"><a href="#5-web控件定位与常见操作" class="headerlink" title="5. web控件定位与常见操作"></a>5. web控件定位与常见操作</h1><h2 id="5-1-Selenium的点击和输入"><a href="#5-1-Selenium的点击和输入" class="headerlink" title="5.1 Selenium的点击和输入"></a>5.1 Selenium的点击和输入</h2><p><strong>定义：</strong></p>
<ul>
<li><code>find_element(By.ID, &#39;su&#39;).click()</code></li>
<li><code>find_element(By.ID,&#39;kw&#39;).send_keys(&quot;霍格沃兹测试学院&quot;)</code></li>
</ul>
<h2 id="5-2-xpath"><a href="#5-2-xpath" class="headerlink" title="5.2 xpath"></a>5.2 xpath</h2><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="(1) 定义"></a>(1) 定义</h3><ul>
<li>解析XML的一种语言(HTML其实是XML的子级)，<strong>广泛用于解析HTML数据</strong></li>
<li>几乎所有语言都能使用XPath，比如Java和C语言</li>
<li>除了XPathi还有其他手段用于XML解析，比如：BeautifulSoup、Ixml、D0M、SAX、JSD0M、D0M4J、minixml等</li>
</ul>
<blockquote>
<p><code>xpath</code>既可以用于appium，也可以用于selenium。不过缺点是比<code>CSS.SELECTOR</code>要慢。因为<code>xpath</code>是从头到尾去遍历的。</p>
</blockquote>
<h3 id="2-XPath语法"><a href="#2-XPath语法" class="headerlink" title="(2)XPath语法"></a>(2)XPath语法</h3><p>XPath语法其实只有三大类：</p>
<ul>
<li>层级：<code>/</code>直接子级、<code>//</code>跳级(多少级都可以)</li>
<li>属性：<code>@</code>属性访问</li>
<li>函数：<code>contains()</code>、<code>text()</code>等</li>
</ul>
<h4 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h4><table>
<thead>
<tr>
<th align="left">表达式</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">nodename</td>
<td align="left">选取此节点的所有子节点。</td>
</tr>
<tr>
<td align="left">&#x2F;</td>
<td align="left">从根节点选取(取子节点)。</td>
</tr>
<tr>
<td align="left">&#x2F;&#x2F;</td>
<td align="left">从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置(取子孙节点)。</td>
</tr>
<tr>
<td align="left">.</td>
<td align="left">选取当前节点。</td>
</tr>
<tr>
<td align="left">..</td>
<td align="left">选取当前节点的父节点。</td>
</tr>
<tr>
<td align="left">@</td>
<td align="left">选取属性。</td>
</tr>
</tbody></table>
<h4 id="谓语-条件"><a href="#谓语-条件" class="headerlink" title="谓语(条件)"></a>谓语(条件)</h4><p>谓语用来查找某个特定的节点或者包含某个指定的值的节点。</p>
<p>谓语被嵌在方括号<font color="red"><code>[]</code></font>中。</p>
<p>在下面的表格中，我们列出了带有谓语的一些路径表达式，以及表达式的结果：</p>
<table>
<thead>
<tr>
<th>路径表达式</th>
<th>结果</th>
</tr>
</thead>
<tbody><tr>
<td><code>/bookstore/book[1]</code></td>
<td>选取属于bookstore子元素的第一个book元素。</td>
</tr>
<tr>
<td><code>/bookstore/book[last()]</code></td>
<td>选取属于bookstore子元素的最后一个book元素。</td>
</tr>
<tr>
<td><code>/bookstore/book[last()-1]</code></td>
<td>选取属于bookstore子元素的倒数第二个book元素。</td>
</tr>
<tr>
<td><code>/bookstore/book[position(&lt;3]</code></td>
<td>选取最前面的两个属于bookstore元素的子元素的book元素。</td>
</tr>
<tr>
<td><code>//title[@lang=&#39;eng&#39;]</code></td>
<td>选取所有title元素，且这些元素拥有值为eng的lang属性。</td>
</tr>
<tr>
<td><code>/bookstore/book[price&gt;35.00]</code></td>
<td>选取bookstore元素的所有book元素， 且其中的price元素的值须大于35.00.</td>
</tr>
<tr>
<td><code>/bookstore/book[price&gt;35.00]/title</code></td>
<td>选取bookstore元素中的book元素的所有title元素， 且其中的price元素的值须大于35.00。</td>
</tr>
</tbody></table>
<h2 id="5-3-Css-Selector"><a href="#5-3-Css-Selector" class="headerlink" title="5.3 Css Selector"></a>5.3 Css Selector</h2><blockquote>
<p><code>css selector</code>既可以用于appium，也可以用于selenium。不过appium原生控件不支持css selector，当对手机中的网页定位，才可以用css selector。</p>
</blockquote>
<h3 id="1-id选择器-身份选择器"><a href="#1-id选择器-身份选择器" class="headerlink" title="1. id选择器 身份选择器"></a>1. id选择器 身份选择器</h3><p>作用：选取带有id属性，并且id属性值为id-name的标签。</p>
<blockquote>
<p>id是唯一的，所以一个id只能可以套用到一个HTML元素上，而一个HTML元素也只能拥有一个id。</p>
<p>命名规则：id选择器的名称除了第一个字符必须为英文字母以外，后续字符可以是大小写字母和-或者_</p>
<p>id选择器需要以 <code>#</code>开头 — <code>#id</code></p>
</blockquote>
<p><img src="/2022/03/30/Web%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/image-20220401104833012.png" alt="image-20220401104833012"></p>
<h3 id="2-class选择器-类选择器"><a href="#2-class选择器-类选择器" class="headerlink" title="2. class选择器 类选择器"></a>2. class选择器 类选择器</h3><p>作用：选取所有带有class属性，并且id属性值为id-name的标签。</p>
<blockquote>
<p>class选择器可以用于多个元素，因为他不是唯一的。</p>
<p>与id选择器不同的是，一个class可以套用到多个HTML元素上，而一个HTML元素也可以拥有多个class。</p>
<p>class选择器需要以 <code>.</code>开头 — <code>.class</code></p>
</blockquote>
<p><img src="/2022/03/30/Web%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/image-20220401110134896.png" alt="image-20220401110134896"></p>
<h3 id="3-tag选择器-标签选择器"><a href="#3-tag选择器-标签选择器" class="headerlink" title="3. tag选择器 标签选择器"></a>3. tag选择器 标签选择器</h3><p>作用：选取所有tag标签。</p>
<blockquote>
<p>在css中直接使用HTML标签(Tag)的名称，例如<h>、<p>、<div>等等。这种方式会将样式套用到所有对应的标签中。</div></p>
<p>如果在Tag名称后加上id选取器或class选取器，如div.bg{}，就代表bg这个class只能用于div上，用于别HTML的标签则不会生效。</p>
</h></p></blockquote>
<p><img src="/2022/03/30/Web%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/image-20220401132554549.png" alt="image-20220401132554549"></p>
<h3 id="4-空格"><a href="#4-空格" class="headerlink" title="4. 空格"></a>4. 空格</h3><p>作用：选取并修饰该A标签内的所有子A标签，不包括该标签本身。</p>
<blockquote>
<p>比如：<code>.contain div</code>，即是选取拥有contain这个class的HTML元素里面的所有div。</p>
<p><em>但是并不包括contain本身。</em></p>
</blockquote>
<p><img src="/2022/03/30/Web%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/image-20220401134502450.png" alt="image-20220401134502450"></p>
<h3 id="5-gt-大于号"><a href="#5-gt-大于号" class="headerlink" title="5. &gt; 大于号"></a>5. &gt; 大于号</h3><p>作用：选取该A标签内的所有第一层子A标签，不包括该标签本身。</p>
<blockquote>
<p>比如：<code>.contain&gt;div</code>，即是选取拥有containe这个class的HTML元素里面第一层的所有div。</p>
</blockquote>
<p><img src="/2022/03/30/Web%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/image-20220401140209612.png" alt="image-20220401140209612"></p>
<h3 id="6-加号"><a href="#6-加号" class="headerlink" title="6. + 加号"></a>6. + 加号</h3><p>作用：选取所有某种标签下的第一个子标签元素。</p>
<blockquote>
<p>比如：<code>.contain+div</code>，意思是选取拥有contain这个class的HTML元素与它身处同一层紧接着的div。</p>
<p><em>注意如果紧接着的并不是div，就不会选取到任何东西。</em></p>
</blockquote>
<p><img src="/2022/03/30/Web%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/image-20220401141033393.png" alt="image-20220401141033393"></p>
<h3 id="7-波浪线"><a href="#7-波浪线" class="headerlink" title="7. ~ 波浪线"></a>7. ~ 波浪线</h3><p>作用：选取所有某种元素之后所有同一层的所有某种元素</p>
<blockquote>
<p>比如：<code>.contain ~ div</code>，意思是选取拥有contain这个class的HTML元素与它身处同一层之后的所有div。</p>
<p>尽管其中有其他HTML元素隔开，只要是与contain处于同一层都会套用得到。</p>
</blockquote>
<p><img src="/2022/03/30/Web%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/image-20220401141544857.png" alt="image-20220401141544857"></p>
<h3 id="8-星号"><a href="#8-星号" class="headerlink" title="8. * 星号"></a>8. * 星号</h3><p>作用：代替具体的条件，表示所有。</p>
<blockquote>
<p>如果只用一个星号的话即是选取所有HTML元素。</p>
</blockquote>
<p><img src="/2022/03/30/Web%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/image-20220401142008458.png" alt="image-20220401142008458"></p>
<blockquote>
<p>比如：<code>.contain ~ *</code>，会将contain class套用到contain之后的所有标签。</p>
</blockquote>
<p><img src="/2022/03/30/Web%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/image-20220401143236014.png" alt="image-20220401143236014"></p>
<h3 id="9-属性选择器-attribute"><a href="#9-属性选择器-attribute" class="headerlink" title="9. 属性选择器 attribute"></a>9. 属性选择器 attribute</h3><p>作用：是透过HTML元素的属性去选取。<code>[attribute=value]</code></p>
<p><img src="/2022/03/30/Web%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/image-20220401143839958.png" alt="image-20220401143839958"></p>
<p>还可以通过一些正则表达式去选取：</p>
<blockquote>
<p>比如<code>^=</code>：选取匹配行首的元素</p>
<p><code>$=</code>：选取匹配行尾的元素</p>
</blockquote>
<p><img src="/2022/03/30/Web%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/image-20220401145218205.png" alt="image-20220401145218205"></p>
<p><img src="/2022/03/30/Web%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/image-20220401145302501.png" alt="image-20220401145302501"></p>
<blockquote>
<p><code>*=</code>则为包含关键词，无论头尾。</p>
</blockquote>
<p><img src="/2022/03/30/Web%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/image-20220401145924333.png" alt="image-20220401145924333"></p>
<h3 id="10-伪类-pseudo-class"><a href="#10-伪类-pseudo-class" class="headerlink" title="10. 伪类 pseudo class"></a>10. 伪类 pseudo class</h3><p>作用：用于选择一般选择器无法表达的选择方式。</p>
<blockquote>
<p>写法格式：以上九种形式加冒号加条件。</p>
</blockquote>
<p><code>a: hover&#123;color:red&#125;</code> ：鼠标悬停变红<br><code>a: visited&#123;color:cyan&#125;</code> ：点击过该链接则为天蓝色</p>
<p><code>div:nth-child(3n + 0)&#123;background: pink;&#125;</code>：div的子元素中3的倍数的元素，底色变为粉色</p>
<blockquote>
<p>nth-chile()参数特别的有：odd(奇数)、even(双数)、3n+0(选取3倍数)、2n效果even 一样。</p>
</blockquote>
<p><img src="/2022/03/30/Web%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/image-20220401161757286.png" alt="image-20220401161757286"></p>
<h3 id="详细实例："><a href="#详细实例：" class="headerlink" title="详细实例："></a>详细实例：</h3><table>
<thead>
<tr>
<th align="left">选择器</th>
<th align="left">示例</th>
<th align="left">示例说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><a href="https://www.runoob.com/cssref/sel-class.html">.<em>class</em></a></td>
<td align="left">.intro</td>
<td align="left">选择所有class&#x3D;”intro”的元素</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/sel-id.html">#<em>id</em></a></td>
<td align="left">#firstname</td>
<td align="left">选择所有id&#x3D;”firstname”的元素</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/sel-all.html">*</a></td>
<td align="left">*</td>
<td align="left">选择所有元素</td>
</tr>
<tr>
<td align="left"><em><a href="https://www.runoob.com/cssref/sel-element.html">element</a></em></td>
<td align="left">p</td>
<td align="left">选择所有<p>元素</p></td>
</tr>
<tr>
<td align="left"><em><a href="https://www.runoob.com/cssref/sel-element-comma.html">element,element</a></em></td>
<td align="left">div,p</td>
<td align="left">选择所有<div>元素和<p>元素</p></div></td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/sel-element-element.html"><em>element</em> <em>element</em></a></td>
<td align="left">div p</td>
<td align="left">选择<div>元素内的所有<p>元素</p></div></td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/sel-element-gt.html"><em>element</em>&gt;<em>element</em></a></td>
<td align="left">div&gt;p</td>
<td align="left">选择所有父级是 <div> 元素的 <p> 元素</p></div></td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/sel-element-pluss.html"><em>element</em>+<em>element</em></a></td>
<td align="left">div+p</td>
<td align="left">选择所有紧跟在 <div> 元素之后的第一个 <p> 元素</p></div></td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/sel-attribute.html">[<em>attribute</em>]</a></td>
<td align="left">[target]</td>
<td align="left">选择所有带有target属性元素</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/sel-attribute-value.html">[<em>attribute</em>&#x3D;<em>value</em>]</a></td>
<td align="left">[target&#x3D;-blank]</td>
<td align="left">选择所有使用target&#x3D;”-blank”的元素</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/sel-attribute-value-contains.html">[<em>attribute</em>~&#x3D;<em>value</em>]</a></td>
<td align="left">[title~&#x3D;flower]</td>
<td align="left">选择标题属性包含单词”flower”的所有元素</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/sel-attribute-value-lang.html">[<em>attribute</em>|&#x3D;<em>language</em>]</a></td>
<td align="left">[lang|&#x3D;en]</td>
<td align="left">选择 lang 属性等于 <strong>en</strong>，或者以 <strong>en-</strong> 为开头的所有元素</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/sel-link.html">:link</a></td>
<td align="left">a:link</td>
<td align="left">选择所有未访问链接</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/sel-visited.html">:visited</a></td>
<td align="left">a:visited</td>
<td align="left">选择所有访问过的链接</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/sel-active.html">:active</a></td>
<td align="left">a:active</td>
<td align="left">选择活动链接</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/sel-hover.html">:hover</a></td>
<td align="left">a:hover</td>
<td align="left">选择鼠标在链接上面时</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/sel-focus.html">:focus</a></td>
<td align="left">input:focus</td>
<td align="left">选择具有焦点的输入元素</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/sel-firstletter.html">:first-letter</a></td>
<td align="left">p:first-letter</td>
<td align="left">选择每一个<p>元素的第一个字母</p></td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/sel-firstline.html">:first-line</a></td>
<td align="left">p:first-line</td>
<td align="left">选择每一个<p>元素的第一行</p></td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/sel-firstchild.html">:first-child</a></td>
<td align="left">p:first-child</td>
<td align="left">指定只有当<p>元素是其父级的第一个子级的样式。</p></td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/sel-before.html">:before</a></td>
<td align="left">p:before</td>
<td align="left">在每个<p>元素之前插入内容</p></td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/sel-after.html">:after</a></td>
<td align="left">p:after</td>
<td align="left">在每个<p>元素之后插入内容</p></td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/sel-lang.html">:lang(<em>language</em>)</a></td>
<td align="left">p:lang(it)</td>
<td align="left">选择一个lang属性的起始值&#x3D;”it”的所有<p>元素</p></td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/sel-gen-sibling.html"><em>element1</em>~<em>element2</em></a></td>
<td align="left">p~ul</td>
<td align="left">选择p元素之后的每一个ul元素</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/sel-attr-begin.html">[<em>attribute</em>^&#x3D;<em>value</em>]</a></td>
<td align="left">a[src^&#x3D;”https”]</td>
<td align="left">选择每一个src属性的值以”https”开头的元素</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/sel-attr-end.html">[<em>attribute</em>$&#x3D;<em>value</em>]</a></td>
<td align="left">a[src$&#x3D;”.pdf”]</td>
<td align="left">选择每一个src属性的值以”.pdf”结尾的元素</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/sel-attr-contain.html">[<em>attribute</em>*&#x3D;<em>value</em>]</a></td>
<td align="left">a[src*&#x3D;”runoob”]</td>
<td align="left">选择每一个src属性的值包含子字符串”runoob”的元素</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/sel-first-of-type.html">:first-of-type</a></td>
<td align="left">p:first-of-type</td>
<td align="left">选择每个p元素是其父级的第一个p元素</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/sel-last-of-type.html">:last-of-type</a></td>
<td align="left">p:last-of-type</td>
<td align="left">选择每个p元素是其父级的最后一个p元素</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/sel-only-of-type.html">:only-of-type</a></td>
<td align="left">p:only-of-type</td>
<td align="left">选择每个p元素是其父级的唯一p元素</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/sel-only-child.html">:only-child</a></td>
<td align="left">p:only-child</td>
<td align="left">选择每个p元素是其父级的唯一子元素</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/sel-nth-child.html">:nth-child(<em>n</em>)</a></td>
<td align="left">p:nth-child(2)</td>
<td align="left">选择每个p元素是其父级的第二个子元素</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/sel-nth-last-child.html">:nth-last-child(<em>n</em>)</a></td>
<td align="left">p:nth-last-child(2)</td>
<td align="left">选择每个p元素的是其父级的第二个子元素，从最后一个子项计数</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/sel-nth-of-type.html">:nth-of-type(<em>n</em>)</a></td>
<td align="left">p:nth-of-type(2)</td>
<td align="left">选择每个p元素是其父级的第二个p元素</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/sel-nth-last-of-type.html">:nth-last-of-type(<em>n</em>)</a></td>
<td align="left">p:nth-last-of-type(2)</td>
<td align="left">选择每个p元素的是其父级的第二个p元素，从最后一个子项计数</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/sel-last-child.html">:last-child</a></td>
<td align="left">p:last-child</td>
<td align="left">选择每个p元素是其父级的最后一个子级。</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/sel-root.html">:root</a></td>
<td align="left">:root</td>
<td align="left">选择文档的根元素</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/sel-empty.html">:empty</a></td>
<td align="left">p:empty</td>
<td align="left">选择每个没有任何子级的p元素(包括文本节点)</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/sel-target.html">:target</a></td>
<td align="left">#news:target</td>
<td align="left">选择当前活动的#news元素(包含该锚名称的点击的URL)</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/sel-enabled.html">:enabled</a></td>
<td align="left">input:enabled</td>
<td align="left">选择每一个已启用的输入元素</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/sel-disabled.html">:disabled</a></td>
<td align="left">input:disabled</td>
<td align="left">选择每一个禁用的输入元素</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/sel-checked.html">:checked</a></td>
<td align="left">input:checked</td>
<td align="left">选择每个选中的输入元素</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/sel-not.html">:not(<em>selector</em>)</a></td>
<td align="left">:not(p)</td>
<td align="left">选择每个并非p元素的元素</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/sel-selection.html">::selection</a></td>
<td align="left">::selection</td>
<td align="left">匹配元素中被用户选中或处于高亮状态的部分</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/sel-out-of-range.html">:out-of-range</a></td>
<td align="left">:out-of-range</td>
<td align="left">匹配值在指定区间之外的input元素</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/sel-in-range.html">:in-range</a></td>
<td align="left">:in-range</td>
<td align="left">匹配值在指定区间之内的input元素</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/sel-read-write.html">:read-write</a></td>
<td align="left">:read-write</td>
<td align="left">用于匹配可读及可写的元素</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/sel-read-only.html">:read-only</a></td>
<td align="left">:read-only</td>
<td align="left">用于匹配设置 “readonly”(只读) 属性的元素</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/sel-optional.html">:optional</a></td>
<td align="left">:optional</td>
<td align="left">用于匹配可选的输入元素</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/sel-required.html">:required</a></td>
<td align="left">:required</td>
<td align="left">用于匹配设置了 “required” 属性的元素</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/sel-valid.html">:valid</a></td>
<td align="left">:valid</td>
<td align="left">用于匹配输入值为合法的元素</td>
</tr>
<tr>
<td align="left"><a href="https://www.runoob.com/cssref/sel-invalid.html">:invalid</a></td>
<td align="left">:invalid</td>
<td align="left">用于匹配输入值为非法的元素</td>
</tr>
</tbody></table>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestGet</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setup</span>(<span class="params">self</span>):</span><br><span class="line">        self.driver = webdriver.Chrome()</span><br><span class="line">        self.driver.get(<span class="string">&quot;https://www.baidu.com/&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># def test_get_xpath(self):</span></span><br><span class="line">    <span class="comment">#     self.driver.find_element(By.XPATH, &#x27;//input[@id=&quot;kw&quot;]&#x27;).send_keys(&quot;霍格沃兹测试学院&quot;)</span></span><br><span class="line">    <span class="comment">#     print(&#x27;测试输入&#x27;)</span></span><br><span class="line">    <span class="comment">#     self.driver.find_element(By.XPATH, &#x27;//input[@id=&quot;su&quot;]&#x27;).click()</span></span><br><span class="line">    <span class="comment">#     print(&#x27;测试搜索&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_css_selector</span>(<span class="params">self</span>):</span><br><span class="line">        self.driver.find_element(By.CSS_SELECTOR, <span class="string">&#x27;#kw&#x27;</span>).send_keys(<span class="string">&quot;霍格沃兹测试学院&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;test print&#x27;</span>)</span><br><span class="line">        self.driver.find_element(By.CSS_SELECTOR, <span class="string">&#x27;#su&#x27;</span>).click()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;test search&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="6-web控件的交互进阶"><a href="#6-web控件的交互进阶" class="headerlink" title="6. web控件的交互进阶"></a>6. web控件的交互进阶</h1><p>常用的操作事件(右键点击，页面滑动，表单操作等)。</p>
<p>官方文档<br><a href="https://selenium-python.readthedocs.io/api.html">https://selenium-python.readthedocs.io/api.html</a> </p>
<ul>
<li>ActionChains：执行PC端的鼠标点击，双击，右键，拖搜等事件</li>
<li>TouchActions：模拟PC和移动端的点击，滑动，拖拽，多点触控等多种手势操作</li>
</ul>
<h2 id="6-1-ActionChains-动作链接"><a href="#6-1-ActionChains-动作链接" class="headerlink" title="6.1 ActionChains 动作链接"></a>6.1 ActionChains 动作链接</h2><p>执行原理：调用ActionChains的方法时，<font color="red">不会立即执行</font>，而是将所有的操作，按顺序存放在一个队列里，当你调用<code>perform()</code>方法时，队列中的事件会依次执行。</p>
<h3 id="6-1-1-基本用法"><a href="#6-1-1-基本用法" class="headerlink" title="6.1.1 基本用法"></a>6.1.1 基本用法</h3><ul>
<li>生成一个动作<code>action= ActionChains(driver)</code></li>
<li>动作添加方法1 <code>action.方法1</code></li>
<li>动作添加方法2 <code>action.方法2</code></li>
<li>调用<code>perform()</code>方法执行<code>(action.perform())</code></li>
</ul>
<h3 id="6-1-2-具体写法"><a href="#6-1-2-具体写法" class="headerlink" title="6.1.2 具体写法"></a>6.1.2 具体写法</h3><ul>
<li>链式写法<ul>
<li><code>ActionChains(driver).move_to_element(element).click(element).perform()</code></li>
</ul>
</li>
<li>分布写法<ul>
<li><code>actions = ActionChains(driver)</code></li>
<li><code>actions.move_to_element(element)</code></li>
<li><code>actions.click(element)</code></li>
<li><code>actions.perform()</code></li>
</ul>
</li>
</ul>
<h3 id="6-1-3-ActionChains-用法1"><a href="#6-1-3-ActionChains-用法1" class="headerlink" title="6.1.3 ActionChains 用法1"></a>6.1.3 ActionChains 用法1</h3><p>用法一：点击，右键，双击操作</p>
<ul>
<li><code>action = ActionChains(driver)</code></li>
<li><code>action.click(element)</code></li>
<li><code>action.double_click(element)</code></li>
<li><code>action.context_click(element)</code></li>
<li><code>action.perform()</code></li>
</ul>
<p>测试案例</p>
<ul>
<li>打开页面(<a href="http://sahitest.com/demo/clicks.htm">http://sahitest.com/demo/clicks.htm</a>)</li>
<li>分别对按钮’click me’，’dbl click me’， right click me’，执行点击，双击，右键操作</li>
<li>打印上面展示框中的内容</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestActionChains</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setup</span>(<span class="params">self</span>):</span><br><span class="line">        self.driver = webdriver.Chrome()</span><br><span class="line">        self.driver.implicitly_wait(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">teardown</span>(<span class="params">self</span>):</span><br><span class="line">        self.driver.quit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_click</span>(<span class="params">self</span>):</span><br><span class="line">        self.driver.get(<span class="string">&quot;http://sahitest.com/demo/clicks.htm&quot;</span>)</span><br><span class="line">        element_click = self.driver.find_element(By.XPATH, <span class="string">&quot;/html/body/form/input[3]&quot;</span>)</span><br><span class="line">        element_dblclick = self.driver.find_element(By.XPATH, <span class="string">&quot;/html/body/form/input[2]&quot;</span>)</span><br><span class="line">        element_right_click = self.driver.find_element(By.XPATH, <span class="string">&quot;/html/body/form/input[4]&quot;</span>)</span><br><span class="line">        action = ActionChains(self.driver)</span><br><span class="line">        action.click(element_click)</span><br><span class="line">        action.context_click(element_right_click)</span><br><span class="line">        action.double_click(element_dblclick)</span><br><span class="line">        sleep(<span class="number">3</span>)</span><br><span class="line">        action.perform()</span><br><span class="line">        sleep(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<h3 id="6-1-4-ActionChains-用法2"><a href="#6-1-4-ActionChains-用法2" class="headerlink" title="6.1.4 ActionChains 用法2"></a>6.1.4 ActionChains 用法2</h3><p>用法二：鼠标移动到某个元素上</p>
<ul>
<li><code>action = ActionChains(self.driver)</code></li>
<li><code>action.move_to_element(element)</code></li>
<li><code>action.perform()</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test_move_to_element</span>(<span class="params">self</span>):</span><br><span class="line">    self.driver.get(<span class="string">&quot;https://www.baidu.com/?tn=44004473_13_oem_dg&quot;</span>)</span><br><span class="line">    move_to_element = self.driver.find_element(By.XPATH, <span class="string">&#x27;//*[@id=&quot;s-usersetting-top&quot;]&#x27;</span>)</span><br><span class="line">    action = ActionChains(self.driver)</span><br><span class="line">    action.move_to_element(move_to_element)</span><br><span class="line">    action.perform()</span><br></pre></td></tr></table></figure>

<h3 id="6-1-5-ActionChains-用法3"><a href="#6-1-5-ActionChains-用法3" class="headerlink" title="6.1.5 ActionChains 用法3"></a>6.1.5 ActionChains 用法3</h3><p>用法三：鼠标拖拽某个元素到另一元素上</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test_dragdrop</span>(<span class="params">self</span>):</span><br><span class="line">    self.driver.get(<span class="string">&quot;http://sahitest.com/demo/dragDropMooTools.htm&quot;</span>)</span><br><span class="line">    drag_element = self.driver.find_element(By.XPATH, <span class="string">&#x27;//*[@id=&quot;dragger&quot;]&#x27;</span>)</span><br><span class="line">    drop_element = self.driver.find_element(By.XPATH, <span class="string">&#x27;/html/body/div[2]&#x27;</span>)</span><br><span class="line">    action = ActionChains(self.driver)</span><br><span class="line">    <span class="comment"># 方法1</span></span><br><span class="line">    <span class="comment"># action.drag_and_drop(drag_element, drop_element)</span></span><br><span class="line">    <span class="comment"># 方法2</span></span><br><span class="line">    <span class="comment"># action.click_and_hold(drag_element).release(drop_element)</span></span><br><span class="line">    <span class="comment"># 方法3</span></span><br><span class="line">    action.click_and_hold(drag_element).move_to_element(drop_element).release()</span><br><span class="line">    action.perform()</span><br></pre></td></tr></table></figure>

<h3 id="6-1-6-ActionChains-用法4"><a href="#6-1-6-ActionChains-用法4" class="headerlink" title="6.1.6 ActionChains 用法4"></a>6.1.6 ActionChains 用法4</h3><p>用法四：ActionChains模拟按键方法</p>
<p>模拟按键有多种方法，能用win32api来实现，能用SendKeys来实现，也可以用selenium的WebElement对象的send_keys()方法来实现，这里ActionChains类也提供了几个模拟按键的方法。</p>
<p>用法：</p>
<ul>
<li><code>Action = ActionChains(driver)</code></li>
<li><code>action.send_keys(Keys.BACK_SPACE)</code></li>
<li>或者<code>action.key_down(Keys.CONTROL).send_keys(&#39;a&#39;).key_up(Keys.CONTROL)</code></li>
<li><code>action.perform()</code></li>
</ul>
<p>打开网址：<a href="http://sahitest.com/demo/label.htm">http://sahitest.com/demo/label.htm</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test_key</span>(<span class="params">self</span>):</span><br><span class="line">    self.driver.get(<span class="string">&quot;http://sahitest.com/demo/label.htm&quot;</span>)</span><br><span class="line">    element = self.driver.find_element(By.XPATH, <span class="string">&quot;/html/body/label[1]/input&quot;</span>)</span><br><span class="line">    element.click()</span><br><span class="line">    action = ActionChains(self.driver)</span><br><span class="line">    action.send_keys(<span class="string">&quot;username&quot;</span>).pause(<span class="number">1</span>)</span><br><span class="line">    action.send_keys(Keys.SPACE).pause(<span class="number">1</span>)</span><br><span class="line">    action.send_keys(<span class="string">&quot;tom&quot;</span>).pause(<span class="number">1</span>)</span><br><span class="line">    action.send_keys(Keys.BACK_SPACE).perform()</span><br><span class="line">    sleep(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<h2 id="6-2-TouchActions"><a href="#6-2-TouchActions" class="headerlink" title="6.2 TouchActions"></a>6.2 TouchActions</h2><p>官网：<a href="https://www.selenium.dev/selenium/docs/api/py/webdriver/selenium.webdriver.common.touch_actions.html">https://www.selenium.dev/selenium/docs/api/py/webdriver/selenium.webdriver.common.touch_actions.html</a></p>
<p>类似于ActionChains。ActionChains只是针对PC端程序鼠标模拟的一系列操作，对H5页面操作是无效的，TouchAction可以对h5页面操作，通过TouchAction可以实现点击，滑动。拖拽，多点触控，以及模拟手势的各种操作。</p>
<p>手势控制</p>
<ul>
<li>tap：在指定元素上敲击</li>
<li>double_tap：在指定元素上双敲击</li>
<li>tap_and_hold：在指定元素上点击但不释放</li>
<li>move：手势移动指定偏移（未释放）</li>
<li>release：释放手势</li>
<li>scroll：手势点击并滚动</li>
<li>scroll_from_element：从某个元素位置开始手势点击并滚动（向下滑动为负数，向上滑动为正数）</li>
<li>long_press：长按元素</li>
<li>flick：手势滑动</li>
<li>flick_element：从某个元素位置开始手势滑动（向上滑动为负数，向下滑动为正数）</li>
<li>Perform：执行</li>
</ul>
<h3 id="6-2-1-TouchActions实例"><a href="#6-2-1-TouchActions实例" class="headerlink" title="6.2.1 TouchActions实例"></a>6.2.1 TouchActions实例</h3><ul>
<li>打开Chrome</li>
<li>打开URL：<a href="http://www.baidu.com/">http://www.baidu.com</a></li>
<li>向搜索框中输入“selenium测试”</li>
<li>通过TouchAction点击搜索框</li>
<li>滑动到底部，点击下一页</li>
<li>关闭Chrome</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TestTouchAction</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setup</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 在创建 driver 对象时，添加浏览器的 option 选项 关闭 w3c 模式</span></span><br><span class="line">        option = webdriver.ChromeOptions()</span><br><span class="line">        option.add_experimental_option(<span class="string">&#x27;w3c&#x27;</span>, <span class="literal">False</span>)</span><br><span class="line">        self.driver = webdriver.Chrome(options=option)</span><br><span class="line">        self.driver.implicitly_wait(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">teardown</span>(<span class="params">self</span>):</span><br><span class="line">        self.driver.quit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_touch_actions</span>(<span class="params">self</span>):</span><br><span class="line">        self.driver.get(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line">        input_element = self.driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>)</span><br><span class="line">        input_element.send_keys(<span class="string">&quot;selenium测试&quot;</span>)</span><br><span class="line">        search_element = self.driver.find_element_by_id(<span class="string">&quot;su&quot;</span>)</span><br><span class="line">        action = TouchActions(self.driver)</span><br><span class="line">        action.tap(search_element)</span><br><span class="line"></span><br><span class="line">        action.scroll_from_element(search_element, <span class="number">0</span>, <span class="number">10000</span>)</span><br><span class="line">        action.perform()</span><br><span class="line">        sleep(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<h2 id="6-3-表单操作"><a href="#6-3-表单操作" class="headerlink" title="6.3 表单操作"></a>6.3 表单操作</h2><ul>
<li>什么是表单？<ul>
<li>表单是一个包含表单元素的区域。</li>
<li>表单元素是允许用户在表单中（比如：文本域、下拉列表、单选框、复选框等等）输入信息的元素。</li>
<li>表单使用表单标签（<form>）定义。例如：<form><input></form></form></li>
</ul>
</li>
<li>操作表单元素步骤：<ul>
<li>首先要定位到表单元素</li>
<li>然后去操作元素（清空，输入或者点击等）</li>
</ul>
</li>
</ul>
<h3 id="6-3-1-提交表单实例"><a href="#6-3-1-提交表单实例" class="headerlink" title="6.3.1 提交表单实例"></a>6.3.1 提交表单实例</h3><p>测试用例步骤：</p>
<ol>
<li>打开testerhome登录地址：<a href="https://testerhome.com/account/sign_in">https://testerhome.com/account/sign_in</a></li>
<li>输入用户名</li>
<li>输入密码</li>
<li>点击记住标签</li>
<li>点击登录，提交表单</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TestForm</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setup</span>(<span class="params">self</span>):</span><br><span class="line">        self.driver = webdriver.Chrome()</span><br><span class="line">        self.driver.implicitly_wait(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">teardown</span>(<span class="params">self</span>):</span><br><span class="line">        self.driver.quit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_form</span>(<span class="params">self</span>):</span><br><span class="line">        self.driver.get(<span class="string">&quot;https://testerhome.com/account/sign_in&quot;</span>)</span><br><span class="line">        self.driver.find_element_by_id(<span class="string">&quot;user_login&quot;</span>).send_keys(<span class="string">&quot;123&quot;</span>)</span><br><span class="line">        self.driver.find_element_by_id(<span class="string">&quot;user_password&quot;</span>).send_keys(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">        self.driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;new_user&quot;]/div[3]/div/label&#x27;</span>).click()</span><br><span class="line">        self.driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;new_user&quot;]/div[4]/input&#x27;</span>)</span><br><span class="line">        sleep(<span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<h1 id="7-多窗口处理与网页frame"><a href="#7-多窗口处理与网页frame" class="headerlink" title="7. 多窗口处理与网页frame"></a>7. 多窗口处理与网页frame</h1><h2 id="7-1-selenium里面如何处理多窗口场景"><a href="#7-1-selenium里面如何处理多窗口场景" class="headerlink" title="7.1 selenium里面如何处理多窗口场景"></a>7.1 selenium里面如何处理多窗口场景</h2><ul>
<li><p>点击某些链接，会重新打开一个窗口，对于这种情况，想在新页面上操作，就</p>
<p>  得先切换窗口了。</p>
</li>
<li><p>获取窗口的唯一标识用句柄表示，所以只需要切换句柄，就可以在多个页面灵</p>
<p>  活操作了。</p>
</li>
</ul>
<h2 id="7-2-多个窗口识别"><a href="#7-2-多个窗口识别" class="headerlink" title="7.2 多个窗口识别"></a>7.2 多个窗口识别</h2><ul>
<li>获取到当前的窗口句柄（<code>driver.current_window_handle</code>）</li>
<li>获取到所有的窗口句柄（<code>driver.window_handles</code>）</li>
</ul>
<h2 id="7-3-多个窗口之间切换"><a href="#7-3-多个窗口之间切换" class="headerlink" title="7.3 多个窗口之间切换"></a>7.3 多个窗口之间切换</h2><ul>
<li>判断是否是想要操作的窗口，如果是，就可以对窗口进行操作，如果不是，跳转到另外一个窗口，对另一个窗口进行操作（<code>driver.switch_to_window</code>）</li>
</ul>
<p><strong>多窗口切换案例</strong>：</p>
<ol>
<li>打开百度页面</li>
<li>点击登录，弹框中点击立即注册，输入用户名和帐号</li>
<li>返回刚才的登录页，点击登录</li>
<li>输入用户名和密码，点击登录</li>
</ol>
<p>test_base.py：将setup&#x2F;teardown方法进行封装</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setup</span>(<span class="params">self</span>):</span><br><span class="line">        self.driver = webdriver.Chrome()</span><br><span class="line">        self.driver.implicitly_wait(<span class="number">5</span>)</span><br><span class="line">        self.driver.maximize_window()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">teardown</span>(<span class="params">self</span>):</span><br><span class="line">        self.driver.quit()</span><br></pre></td></tr></table></figure>

<p>test_window.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TestWindow</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_Window</span>(<span class="params">self</span>):</span><br><span class="line">        self.driver.get(<span class="string">&quot;https://www.baidu.com/&quot;</span>)</span><br><span class="line">        self.driver.find_element_by_link_text(<span class="string">&quot;登录&quot;</span>).click()</span><br><span class="line">        self.driver.find_element_by_link_text(<span class="string">&quot;立即注册&quot;</span>).click()</span><br><span class="line">        <span class="built_in">print</span>(self.driver.window_handles)</span><br><span class="line">        <span class="comment"># 所有的窗口输出是个列表</span></span><br><span class="line">        windows = self.driver.window_handles</span><br><span class="line">        self.driver.switch_to_window(windows[-<span class="number">1</span>])</span><br><span class="line">        self.driver.find_element_by_id(<span class="string">&quot;TANGRAM__PSP_4__userName&quot;</span>).send_keys(<span class="string">&quot;123&quot;</span>)</span><br><span class="line">        self.driver.find_element_by_id(<span class="string">&quot;TANGRAM__PSP_4__phone&quot;</span>).send_keys(<span class="string">&quot;13800000000&quot;</span>)</span><br><span class="line">        self.driver.find_element_by_id(<span class="string">&quot;TANGRAM__PSP_4__password&quot;</span>).send_keys(<span class="string">&quot;123&quot;</span>)</span><br><span class="line">        sleep(<span class="number">3</span>)</span><br><span class="line">        self.driver.switch_to_window(windows[<span class="number">0</span>])</span><br><span class="line">        self.driver.find_element_by_id(<span class="string">&quot;TANGRAM__PSP_11__userName&quot;</span>).send_keys(<span class="string">&quot;13800000000&quot;</span>)</span><br><span class="line">        self.driver.find_element_by_id(<span class="string">&quot;TANGRAM__PSP_11__password&quot;</span>).send_keys(<span class="string">&quot;123&quot;</span>)</span><br><span class="line">        self.driver.find_element_by_id(<span class="string">&quot;TANGRAM__PSP_11__submit&quot;</span>).click()</span><br><span class="line">        sleep(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<h2 id="7-4-selenium里面如何处理frame"><a href="#7-4-selenium里面如何处理frame" class="headerlink" title="7.4 selenium里面如何处理frame"></a>7.4 selenium里面如何处理frame</h2><p><strong>frame</strong>介绍</p>
<ul>
<li><p>在web自动化中，如果一个元素定位不到，那么很大可能是在<code>iframe</code>中。</p>
</li>
<li><p>什么是frame？</p>
<ul>
<li>frame是html中的框架，在html中，所谓的框架就是可以在同一个浏览器中显示不止一个页面。</li>
<li>基于html的框架，又分为垂直框架和水平框架（<code>cols,rows</code>）</li>
</ul>
</li>
<li><p>Frame分类</p>
<ul>
<li>frame标签包含frameset、frame、iframe三种。</li>
<li>frameset和普通的标签一样，不会影响正常的定位，可以使用index、id、name、webelement 任意种方式定位frame。</li>
<li>而frame与iframe对selenium定位而言是一样的。selenium有一组方法对frame进行操作。</li>
</ul>
</li>
<li><p>演示：<a href="https://www.w3school.com.cn/tiy/t.asp?f=html_frame_cols">https://www.w3school.com.cn/tiy/t.asp?f=html_frame_cols</a></p>
<p>  <img src="/2022/03/30/Web%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/image-20220406135402787.png" alt="image-20220406135402787"></p>
</li>
</ul>
<h2 id="7-5-多个frame识别"><a href="#7-5-多个frame识别" class="headerlink" title="7.5 多个frame识别"></a>7.5 多个frame识别</h2><h2 id="7-6-多个frame之间切换"><a href="#7-6-多个frame之间切换" class="headerlink" title="7.6 多个frame之间切换"></a>7.6 多个frame之间切换</h2><ul>
<li><p>frame存在两种：</p>
<ul>
<li><p>一种是嵌套的</p>
<ul>
<li>对于嵌套的先进入到frame的父节点，再进到子节点，然后可以对子节点里面的对象进行处理和操作</li>
<li><code>driver.switch_to.frame(&quot;父节点&quot;)</code></li>
<li><code>driver.switch_to.frame(&quot;子节点&quot;)</code></li>
</ul>
</li>
<li><p>一种是未嵌套的</p>
<ul>
<li><p><code>driver.switch_to_frame(&quot;frame的id&quot;)</code></p>
</li>
<li><p><code>driver.switch_to_frame(&quot;frame-index&quot;)</code></p>
<p>  frame无ID的时候依据索引来处理，索引从0开始<code>driver.switch_to_frame(0)</code></p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>切换frame</p>
<ul>
<li><code>driver.switch_to.frame()</code>：根据元素id或者index切换切换frame</li>
<li><code>driver.switch_to.default_content()</code>：切换到默认frame</li>
<li><code>driver.switch_to.parent_frame()</code>：切换到父级frame</li>
</ul>
</li>
</ul>
<p><strong>多frame切换案例：</strong></p>
<ul>
<li><p>打开包含framel的web页面<a href="https://www.runoob.com/try/try.php?filename=jqueryui-api-droppable">https://www.runoob.com/try/try.php?filename=jqueryui-api-droppable</a></p>
</li>
<li><p>打印“请拖拽我”元素的文本</p>
</li>
<li><p>打印“点击运行”元素的文本</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TestFrame</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_frame</span>(<span class="params">self</span>):</span><br><span class="line">        self.driver.get(<span class="string">&quot;https://www.runoob.com/try/try.php?filename=jqueryui-api-droppable&quot;</span>)</span><br><span class="line">        self.driver.switch_to_frame(<span class="string">&quot;iframeResult&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(self.driver.find_element(By.ID, <span class="string">&quot;draggable&quot;</span>).text)</span><br><span class="line">        <span class="comment"># 切换到父frame</span></span><br><span class="line">        self.driver.switch_to_default_content()</span><br><span class="line">        <span class="comment"># self.driver.switch_to.parent_frame()</span></span><br><span class="line">        self.driver.find_element(By.ID, <span class="string">&quot;submitBTN&quot;</span>).click()</span><br><span class="line">        self.driver.switch_to_frame(<span class="string">&quot;iframeResult&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(self.driver.find_element(By.ID, <span class="string">&quot;droppable&quot;</span>).text)</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="8-selenium多浏览器处理"><a href="#8-selenium多浏览器处理" class="headerlink" title="8. selenium多浏览器处理"></a>8. selenium多浏览器处理</h1><ul>
<li>chrome，firefox，headless等浏览器的自动化支持</li>
<li>传不同参数来测试不同的浏览器，用来做浏览器兼容性测试</li>
</ul>
<p><strong>例子：</strong></p>
<p>更新test_base.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># _*_ coding: utf-8 _*_</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setup</span>(<span class="params">self</span>):</span><br><span class="line">        browser = os.getenv(<span class="string">&quot;browser&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> browser == <span class="string">&#x27;firefox&#x27;</span>:</span><br><span class="line">            self.driver = webdriver.Firefox()</span><br><span class="line">        <span class="keyword">elif</span> browser == <span class="string">&#x27;headless&#x27;</span>:</span><br><span class="line">            self.driver = webdriver.PhantomJS()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.driver = webdriver.Chrome()</span><br><span class="line">        self.driver.implicitly_wait(<span class="number">5</span>)</span><br><span class="line">        self.driver.maximize_window()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">teardown</span>(<span class="params">self</span>):</span><br><span class="line">        self.driver.quit()</span><br></pre></td></tr></table></figure>

<p>以test_frame.py为例，执行pytest（进入到py测试文件所在目录下）</p>
<ul>
<li><p>MAC命令</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">browser=chrome pytest test_frame.py</span><br></pre></td></tr></table></figure>
</li>
<li><p>windows命令</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> browser=firefox</span><br><span class="line">pytest test_frame.py</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="9-1-JavaScript简介"><a href="#9-1-JavaScript简介" class="headerlink" title="9.1 JavaScript简介"></a>9.1 JavaScript简介</h2><ul>
<li><p>JavaScript ( JS ) 是一种具有函数优先的轻量级，解释型或即时编译型的编程语言</p>
</li>
<li><p>可以嵌入到HTML页面对浏览器事件做出响应</p>
</li>
<li><p>也可以基于Node.js技术进行服务器端编程</p>
<blockquote>
<p>js推荐使用单引号<code>‘’</code></p>
</blockquote>
</li>
</ul>
<p><strong>js的组成：</strong></p>
<img src="/2022/03/30/Web%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/image-20220406162834245.png" alt="image-20220406162834245" style="zoom: 43%;">

<p><strong>自动化测试中使用JavaSeript脚本:</strong></p>
<ul>
<li>使用场景：部分元素使用selenium原生方法无法解决</li>
<li>执行dom相关的操作：<ul>
<li>点击事件</li>
<li>滚动事件</li>
<li>属性修改</li>
</ul>
</li>
</ul>
<h2 id="9-2-JavaScript简单使用"><a href="#9-2-JavaScript简单使用" class="headerlink" title="9.2 JavaScript简单使用"></a>9.2 JavaScript简单使用</h2><ul>
<li><p>修改元素属性值</p>
<p>  <code>document.querySelector(&quot;#kw&quot;).value = &quot;霍格沃兹测试学院&quot;</code></p>
</li>
<li><p>按钮点击</p>
<p>  <code>document.querySelector(&quot;#su&quot;).click()</code></p>
</li>
<li><p>页面滚动到底部</p>
<p>  <code>document.documentElement.scrollTop = 10000</code></p>
</li>
</ul>
<h2 id="9-3-Selenium执行执行JavaScript"><a href="#9-3-Selenium执行执行JavaScript" class="headerlink" title="9.3 Selenium执行执行JavaScript"></a>9.3 Selenium执行执行JavaScript</h2><ul>
<li>Selenium执行js<ul>
<li><code>execute_script</code>：执行js</li>
<li><code>return</code>：可以返回js的执行结果</li>
</ul>
</li>
</ul>
<h2 id="9-4-JavaScript操作案例"><a href="#9-4-JavaScript操作案例" class="headerlink" title="9.4 JavaScript操作案例"></a>9.4 JavaScript操作案例</h2><h3 id="9-4-1-案例1：滑动"><a href="#9-4-1-案例1：滑动" class="headerlink" title="9.4.1 案例1：滑动"></a>9.4.1 案例1：滑动</h3><p>案例一：滑动到浏览器底部</p>
<ul>
<li>打开百度首页</li>
<li>输入搜索关键字-霍格沃兹测试学院</li>
<li>点击搜索跳转到搜索结果页</li>
<li>滑动到底部</li>
<li>点击下一页</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TestJS1</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_js</span>(<span class="params">self</span>):</span><br><span class="line">        self.driver.get(<span class="string">&quot;https://www.baidu.com/&quot;</span>)</span><br><span class="line">        self.driver.find_element(By.ID, <span class="string">&quot;kw&quot;</span>).send_keys(<span class="string">&quot;霍格沃兹测试学院&quot;</span>)</span><br><span class="line">        self.driver.find_element(By.ID, <span class="string">&quot;su&quot;</span>).click()</span><br><span class="line">        sleep(<span class="number">2</span>)</span><br><span class="line">        self.driver.execute_script(<span class="string">&quot;document.documentElement.scrollTop = 10000&quot;</span>)</span><br><span class="line">        sleep(<span class="number">2</span>)</span><br><span class="line">        self.driver.find_element(By.XPATH, <span class="string">&#x27;//*[@id=&quot;page&quot;]/div/a[10]&#x27;</span>).click()</span><br><span class="line">        sleep(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<h3 id="9-4-2-案例2：展示下拉框"><a href="#9-4-2-案例2：展示下拉框" class="headerlink" title="9.4.2 案例2：展示下拉框"></a>9.4.2 案例2：展示下拉框</h3><p>案例二：通过属性修改展示下拉框</p>
<ul>
<li>打开淘宝首页：<a href="https://www.taobao.com/">https://www.taobao.com/</a></li>
<li>修改下拉框属性</li>
</ul>
<blockquote>
<p>如何选择html下拉框的元素：</p>
<ul>
<li>先在<em>Chrome</em> 开发者工具的控制台输入以下代码：（窗口冻结）</li>
</ul>
<img src="/2022/03/30/Web%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/image-20220406160843525.png" alt="image-20220406160843525" style="zoom: 67%;">

<ul>
<li>再将鼠标悬停到某一元素上，等待3秒，选择相应元素进行查看：</li>
</ul>
<p><img src="/2022/03/30/Web%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/image-20220406160828526.png" alt="image-20220406160828526"></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test_js2</span>(<span class="params">self</span>):</span><br><span class="line">    self.driver.get(<span class="string">&quot;https://www.taobao.com/&quot;</span>)</span><br><span class="line">    sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="comment"># querySelector()方法返回文档中匹配指定CSS选择器的一个元素。注意： querySelector()方法仅仅返回匹配指定选择器的第一个元素。.className表示修改class为XXX</span></span><br><span class="line">    self.driver.execute_script(<span class="string">&#x27;document.querySelector(&quot;#J_SiteNavMytaobao&quot;).className=&quot;site-nav-menu site-nav-mytaobao site-nav-multi-menu J_MultiMenu site-nav-menu-hover&quot;&#x27;</span>)</span><br><span class="line">    sleep(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<h3 id="9-4-3-案例3：时间控件"><a href="#9-4-3-案例3：时间控件" class="headerlink" title="9.4.3 案例3：时间控件"></a>9.4.3 案例3：时间控件</h3><p>案例三：通过属性修改时间控件的值</p>
<ul>
<li>打开12306网站：<a href="https://www.12306.cn/index/">https://www.12306.cn/index/</a></li>
<li>修改时间控件值</li>
<li>打印出发日期</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test_js3</span>(<span class="params">self</span>):</span><br><span class="line">    self.driver.get(<span class="string">&quot;https://www.12306.cn/index/&quot;</span>)</span><br><span class="line">    sleep(<span class="number">2</span>)</span><br><span class="line">    self.driver.execute_script(<span class="string">&#x27;document.querySelector(&quot;#train_date&quot;).value=&quot;2022-12-22&quot;&#x27;</span>)</span><br><span class="line">    sleep(<span class="number">2</span>)</span><br><span class="line">    train_date = self.driver.execute_script(<span class="string">&#x27;return document.querySelector(&quot;#train_date&quot;).value&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(train_date)</span><br><span class="line">    sleep(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<h1 id="10-文件上传、弹框处理"><a href="#10-文件上传、弹框处理" class="headerlink" title="10. 文件上传、弹框处理"></a>10. 文件上传、弹框处理</h1><h2 id="10-1-文件上传"><a href="#10-1-文件上传" class="headerlink" title="10.1 文件上传"></a>10.1 文件上传</h2><ul>
<li>input标签可以直接使用<code>send_keys(文件地址)</code>上传文件</li>
<li>用法：<ul>
<li><code>el = driver.find_element_by_id(&#39;上传按钮id&#39;）</code></li>
<li><code>el.send_keys(&quot;文件路径+文件名&quot;)</code></li>
</ul>
</li>
</ul>
<h3 id="10-1-1-文件上传实例"><a href="#10-1-1-文件上传实例" class="headerlink" title="10.1.1 文件上传实例"></a>10.1.1 文件上传实例</h3><ul>
<li>打开百度图片网址：<a href="https://image.baidu.com/">https://image.Baidu.com</a></li>
<li>识别上传按钮</li>
<li>点击上传按钮</li>
<li>将本地的图片文件上传</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TestFile</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_file</span>(<span class="params">self</span>):</span><br><span class="line">        self.driver.get(<span class="string">&quot;https://image.baidu.com/&quot;</span>)</span><br><span class="line">        self.driver.find_element(By.XPATH, <span class="string">&#x27;//*[@id=&quot;sttb&quot;]/img[1]&#x27;</span>).click()</span><br><span class="line">        sleep(<span class="number">2</span>)</span><br><span class="line">        self.driver.find_element(By.ID, <span class="string">&quot;uploadImg&quot;</span>).send_keys(<span class="string">&quot;../../pic/偷懒.png&quot;</span>)</span><br><span class="line">        sleep(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<h2 id="10-2-弹框处理机制"><a href="#10-2-弹框处理机制" class="headerlink" title="10.2 弹框处理机制"></a>10.2 弹框处理机制</h2><ul>
<li>在页面操作中有时会遇到 JavaScript 所生成的<code>alert</code>、<code>confirm</code>以及<code>prompt</code>弹框，可以使用<code>switch_to.alert()</code>方法定位到。然后使用<code>text/accept/dismiss/send_keys</code>等方法进行操作。</li>
<li>操作alert常用的方法：<ul>
<li><code>switch_to_alert()</code>：获取当前页面上的警告框。</li>
<li><code>text</code>：返回alert&#x2F;confirm&#x2F;prompt 中的文字信息。</li>
<li><code>accept()</code>：接受现有警告框。</li>
<li><code>dismiss()</code>：解散现有警告框。</li>
<li><code>send_keys(keysToSend)</code>：发送文本至警告框。keysToSend：将文本发送至警告框。</li>
</ul>
</li>
</ul>
<h3 id="10-2-1-alert窗口处理案例"><a href="#10-2-1-alert窗口处理案例" class="headerlink" title="10.2.1 alert窗口处理案例"></a>10.2.1 alert窗口处理案例</h3><p>测试案例</p>
<ul>
<li>打开网页<a href="https://www.runoob.com/try/try.php?filename=jqueryui-api-droppable">https://www.runoob.com/try/try.php?filename=jqueryui-api-droppable</a></li>
<li>操作窗口右侧页面，将元素1拖拽到元素2</li>
<li>这时候会有一个alert弹框，点击弹框中的”确定”</li>
<li>然后再按”点击运行”</li>
<li>关闭网页</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TestAlert</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_alert</span>(<span class="params">self</span>):</span><br><span class="line">        self.driver.get(<span class="string">&quot;https://www.runoob.com/try/try.php?filename=jqueryui-api-droppable&quot;</span>)</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line">        self.driver.switch_to_frame(<span class="string">&quot;iframeResult&quot;</span>)</span><br><span class="line">        drag = self.driver.find_element(By.ID, <span class="string">&quot;draggable&quot;</span>)</span><br><span class="line">        drop = self.driver.find_element(By.ID, <span class="string">&quot;droppable&quot;</span>)</span><br><span class="line">        action = ActionChains(self.driver)</span><br><span class="line">        action.drag_and_drop(drag, drop).perform()</span><br><span class="line">        <span class="comment"># action.perform()</span></span><br><span class="line">        sleep(<span class="number">2</span>)</span><br><span class="line">        self.driver.switch_to_alert().accept()</span><br><span class="line">        self.driver.switch_to_default_content()</span><br><span class="line">        self.driver.find_element(By.ID, <span class="string">&quot;submitBTN&quot;</span>)</span><br><span class="line">        sleep(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<h1 id="11-pageObject（PO）设计模式"><a href="#11-pageObject（PO）设计模式" class="headerlink" title="11. pageObject（PO）设计模式"></a>11. pageObject（PO）设计模式</h1><p>也叫PageObjectModel（POM）</p>
<img src="/2022/03/30/Web%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/image-20220407105604381.png" alt="image-20220407105604381" style="zoom:50%;">

<h1 id="12-pageObject原则"><a href="#12-pageObject原则" class="headerlink" title="12. pageObject原则"></a>12. pageObject原则</h1><h2 id="12-1-pageObject六大原则"><a href="#12-1-pageObject六大原则" class="headerlink" title="12.1 pageObject六大原则"></a>12.1 pageObject六大原则</h2><ul>
<li><p>The public methods represent the services that the page offers（公共方法表示页面提供的服务）</p>
</li>
<li><p>Try not to expose the internals of the page（尽量不要暴露页面的内部内容）</p>
</li>
<li><p>Generally don’t make assertions（通常不做断言）</p>
</li>
<li><p>Methods return other PageObjects（方法返回其他页面对象）</p>
<p>  如果页面A导航到页面B， Page A 应当return Page B</p>
</li>
<li><p>Need not represent an entire page（不需要代表整个页面）</p>
</li>
<li><p>Different results for the same action are modelled as different methods（同一动作的不同结果被建模为不同的方法）</p>
</li>
</ul>
<p><strong>例子：</strong></p>
<p>Html_fun.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Html_fun</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">title</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_text</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>main.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> func.Html_fun <span class="keyword">import</span> Html_fun</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send_keys</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">click</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">title</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">click_first_link</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    	<span class="comment"># main页面可以跳转到页面Html_fun，所以要返回该页面</span></span><br><span class="line">        <span class="keyword">return</span> Html_fun()</span><br></pre></td></tr></table></figure>

<p>test_pageobject.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> func.main <span class="keyword">import</span> Main</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestPageObject</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setup</span>(<span class="params">self</span>):</span><br><span class="line">        main = Main()</span><br><span class="line">        <span class="comment"># 可以调用main页面的方法click_first_link，但是main页面可以返回Html_fun，可以继续调用Html_fun页面的方法title</span></span><br><span class="line">        main.click_first_link().title()</span><br></pre></td></tr></table></figure>

<h1 id="13-企业微信的自动化登录"><a href="#13-企业微信的自动化登录" class="headerlink" title="13. 企业微信的自动化登录"></a>13. 企业微信的自动化登录</h1><h2 id="13-1-Web自动化测试之复用浏览器"><a href="#13-1-Web自动化测试之复用浏览器" class="headerlink" title="13.1 Web自动化测试之复用浏览器"></a>13.1 Web自动化测试之复用浏览器</h2><h3 id="13-1-1-为什么要学习复用浏览器"><a href="#13-1-1-为什么要学习复用浏览器" class="headerlink" title="13.1.1 为什么要学习复用浏览器"></a>13.1.1 为什么要学习复用浏览器</h3><ul>
<li>自动化测试过程中，存在人为介入场景</li>
<li>提高调试UI自动化测试脚本效率</li>
</ul>
<h3 id="13-1-2-复用已有浏览器—配置步骤"><a href="#13-1-2-复用已有浏览器—配置步骤" class="headerlink" title="13.1.2 复用已有浏览器—配置步骤"></a>13.1.2 复用已有浏览器—配置步骤</h3><ul>
<li><p>需要退出当前所有的谷歌浏览器（特别注意）</p>
<blockquote>
<p>mac：图标右键退出谷歌浏览器</p>
<p>Windows：退出后，还要在任务管理器关闭谷歌浏览器进程</p>
</blockquote>
</li>
<li><p>输入启动命令，通过命令启动谷歌浏览器</p>
</li>
<li><p>找到chrome的启动路径</p>
</li>
<li><p>配置环境变量</p>
</li>
<li><p>验证是否启动成功</p>
</li>
</ul>
<h4 id="【1】windows环境变量配置："><a href="#【1】windows环境变量配置：" class="headerlink" title="【1】windows环境变量配置："></a>【1】windows环境变量配置：</h4><ul>
<li>获取启动路径</li>
</ul>
<img src="/2022/03/30/Web%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/image-20220407141602262.png" alt="image-20220407141602262" style="zoom: 45%;">

<ul>
<li><p>配置环境变量</p>
  <img src="/2022/03/30/Web%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/image-20220407141835337.png" alt="image-20220407141835337" style="zoom: 35%;">
</li>
<li><p>重启命令行 ( 包括谷歌，pycharm，cmd )</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chrome --remote-debugging-port=9222</span><br></pre></td></tr></table></figure>
</li>
<li><p>验证是否启动成功</p>
<p>  在谷歌浏览器的网址输入<code>localhost:9222</code>，如果页面没有报错，那么说明调试模式的浏览器启动成功</p>
</li>
</ul>
<h4 id="【2】Mac环境变量配置"><a href="#【2】Mac环境变量配置" class="headerlink" title="【2】Mac环境变量配置"></a>【2】Mac环境变量配置</h4><ul>
<li><p>获取启动路径（注意：使用tab键，不要手动输入）</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/Applications/Google\ Chrome.app/Contents/MacOS</span><br></pre></td></tr></table></figure>
</li>
<li><p>将启动路径配置到环境变量中（举例）</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Google\ Chrome --remote-debugging-port=9222</span><br></pre></td></tr></table></figure>
</li>
<li><p>验证是否启动成功</p>
<p>  在谷歌浏览器的网址输入<code>localhost:9222</code>，如果页面没有报错，那么说明调试模式的浏览器启动成功</p>
</li>
</ul>
<h3 id="13-1-3-复用已有浏览器—代码设置"><a href="#13-1-3-复用已有浏览器—代码设置" class="headerlink" title="13.1.3 复用已有浏览器—代码设置"></a>13.1.3 复用已有浏览器—代码设置</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义配置的实例对象option</span></span><br><span class="line">option = Options()</span><br><span class="line"><span class="comment"># 修改实例属性为 debug 模式启动的 ip + 端口</span></span><br><span class="line">option.debugger_address = <span class="string">&quot;localhost:9222&quot;</span></span><br><span class="line"><span class="comment"># 实例化 driver 的时候，添加 option 配置</span></span><br><span class="line">driver = webdriver.Chrome(options=option)</span><br></pre></td></tr></table></figure>

<h3 id="13-1-3-复用浏览器实战演示1"><a href="#13-1-3-复用浏览器实战演示1" class="headerlink" title="13.1.3 复用浏览器实战演示1"></a>13.1.3 复用浏览器实战演示1</h3><ul>
<li>问题1：企业微信登录无法通过输入用户名密码的方式解决登录问题，后面所有的脚本都无法执行。</li>
<li>解决方案：通过remote复用浏览器人工登录企业微信。后面的脚本自动执行</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义配置的实例对象option</span></span><br><span class="line">option = Options()</span><br><span class="line"><span class="comment"># 修改实例属性为 debug 模式启动的 ip + 端口</span></span><br><span class="line">option.debugger_address = <span class="string">&quot;localhost:9222&quot;</span></span><br><span class="line"><span class="comment"># 实例化 driver 的时候，添加 option 配置</span></span><br><span class="line">driver = webdriver.Chrome(options=option)</span><br><span class="line">driver.get(<span class="string">&quot;https://work.weixin.qq.com/wework_admin/frame&quot;</span>)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 点击添加用户</span></span><br><span class="line">driver.find_element(By.XPATH, <span class="string">&#x27;//*[@id=&quot;_hmt_click&quot;]/div[1]/div[4]/div[2]/a[1]/div/span[2]&#x27;</span>).click()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<h3 id="13-1-4-复用浏览器实战演示2"><a href="#13-1-4-复用浏览器实战演示2" class="headerlink" title="13.1.4 复用浏览器实战演示2"></a>13.1.4 复用浏览器实战演示2</h3><ul>
<li>问题2：编写自动化测试脚本过程中，用例的某一步骤出现问题。调试时需要将此步骤前面所有的步骤执行完成之后再复现调试。</li>
<li>解决方案：使用复用浏览器的方式跳过前面的自动化执行步骤，轻松复现出问题的场景，只对问题行代码进行调试。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义配置的实例对象option</span></span><br><span class="line">option = Options()</span><br><span class="line"><span class="comment"># 修改实例属性为 debug 模式启动的 ip + 端口</span></span><br><span class="line">option.debugger_address = <span class="string">&quot;localhost:9222&quot;</span></span><br><span class="line"><span class="comment"># 实例化 driver 的时候，添加 option 配置</span></span><br><span class="line">driver = webdriver.Chrome(options=option)</span><br><span class="line">driver.get(<span class="string">&quot;https://work.weixin.qq.com/wework_admin/frame&quot;</span>)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 点击添加用户</span></span><br><span class="line">driver.find_element(By.XPATH, <span class="string">&#x27;//*[@id=&quot;_hmt_click&quot;]/div[1]/div[4]/div[2]/a[1]/div/span[2]&#x27;</span>).click()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 输入姓名</span></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;username&quot;</span>).send_keys(<span class="string">&quot;yyl&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="13-2-cookie"><a href="#13-2-cookie" class="headerlink" title="13.2 cookie"></a>13.2 cookie</h2><h3 id="13-2-1-cookie是什么"><a href="#13-2-1-cookie是什么" class="headerlink" title="13.2.1 cookie是什么"></a>13.2.1 cookie是什么</h3><p>Cookie 是一些数据，存储于你电脑上的文本文件中。当web服务器向浏览器发送web页面时，在连接关闭后，服务端不会记录用户的信息</p>
<p><img src="/2022/03/30/Web%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/image-20220407162024089.png" alt="image-20220407162024089"></p>
<h3 id="13-2-2-为什么要使用Cookie自动化登录"><a href="#13-2-2-为什么要使用Cookie自动化登录" class="headerlink" title="13.2.2 为什么要使用Cookie自动化登录"></a>13.2.2 为什么要使用Cookie自动化登录</h3><ul>
<li>复用浏览器仍然在每次用例开始都需要人为介入</li>
<li>若用例需要经常执行，复用浏览器则不是一个好的选择</li>
<li>大部分cookie的时效性都很长，扫一次可以使用多次</li>
</ul>
<img src="/2022/03/30/Web%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/image-20220407163523147.png" alt="image-20220407163523147" style="zoom:40%;">

<blockquote>
<p>常见问题：</p>
<ul>
<li>企业微信cookie有互踢机制。在获取cookie成功之后。<font color="red">不要再进行扫码操作</font></li>
<li>获取cookie的时候，即执行代码<code>get_cookies()</code>时，<font color="red">一定要确保已经登录</font></li>
<li>植入cookie之后需要进入登录页面，刷新验证是否自动登录成功。</li>
</ul>
</blockquote>
<h3 id="13-2-3-使用cookie登录"><a href="#13-2-3-使用cookie登录" class="headerlink" title="13.2.3 使用cookie登录"></a>13.2.3 使用cookie登录</h3><ul>
<li>获取<code>cookie driver.get_cookies()</code></li>
<li>添加 <code>cookie driver.add_cookie(cookie)</code></li>
</ul>
<h3 id="13-2-4-实战之获取cookie"><a href="#13-2-4-实战之获取cookie" class="headerlink" title="13.2.4 实战之获取cookie"></a>13.2.4 实战之获取cookie</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> test_pytest.test_base <span class="keyword">import</span> Base</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestGetCookie</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_get_cookie</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 访问企业微信登录页面</span></span><br><span class="line">        self.driver.get(<span class="string">&quot;https://work.weixin.qq.com/wework_admin/frame&quot;</span>)</span><br><span class="line">        <span class="comment"># 等待20秒人工扫码操作</span></span><br><span class="line">        sleep(<span class="number">20</span>)</span><br><span class="line">        <span class="comment"># 登录成功后，再去获取 cookie 信息</span></span><br><span class="line">        cookie = self.driver.get_cookies()</span><br><span class="line">        <span class="built_in">print</span>(cookie)</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">[&#123;<span class="string">&#x27;domain&#x27;</span>: <span class="string">&#x27;.work.weixin.qq.com&#x27;</span>, <span class="string">&#x27;httpOnly&#x27;</span>: True, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;wwrtx.logined&#x27;</span>, <span class="string">&#x27;path&#x27;</span>: <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;secure&#x27;</span>: False, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;true&#x27;</span>&#125;, &#123;<span class="string">&#x27;domain&#x27;</span>: <span class="string">&#x27;.work.weixin.qq.com&#x27;</span>, <span class="string">&#x27;httpOnly&#x27;</span>: False, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;wwrtx.cs_ind&#x27;</span>, <span class="string">&#x27;path&#x27;</span>: <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;secure&#x27;</span>: False, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;&#x27;&#125;, &#123;&#x27;</span>domain<span class="number">&#x27;</span>: <span class="string">&#x27;.work.weixin.qq.com&#x27;</span>, <span class="string">&#x27;httpOnly&#x27;</span>: False, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;wxpay.vid&#x27;</span>, <span class="string">&#x27;path&#x27;</span>: <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;secure&#x27;</span>: False, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;1688854308330636&#x27;</span>&#125;, &#123;<span class="string">&#x27;domain&#x27;</span>: <span class="string">&#x27;.work.weixin.qq.com&#x27;</span>, <span class="string">&#x27;httpOnly&#x27;</span>: False, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;wxpay.corpid&#x27;</span>, <span class="string">&#x27;path&#x27;</span>: <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;secure&#x27;</span>: False, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;1970325697979342&#x27;</span>&#125;, &#123;<span class="string">&#x27;domain&#x27;</span>: <span class="string">&#x27;.work.weixin.qq.com&#x27;</span>, <span class="string">&#x27;httpOnly&#x27;</span>: False, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;wwrtx.vid&#x27;</span>, <span class="string">&#x27;path&#x27;</span>: <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;secure&#x27;</span>: False, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;1688854308330636&#x27;</span>&#125;, &#123;<span class="string">&#x27;domain&#x27;</span>: <span class="string">&#x27;.work.weixin.qq.com&#x27;</span>, <span class="string">&#x27;httpOnly&#x27;</span>: True, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;wwrtx.ref&#x27;</span>, <span class="string">&#x27;path&#x27;</span>: <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;secure&#x27;</span>: False, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;direct&#x27;</span>&#125;, &#123;<span class="string">&#x27;domain&#x27;</span>: <span class="string">&#x27;.work.weixin.qq.com&#x27;</span>, <span class="string">&#x27;httpOnly&#x27;</span>: True, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;wwrtx.ltype&#x27;</span>, <span class="string">&#x27;path&#x27;</span>: <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;secure&#x27;</span>: False, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;1&#x27;</span>&#125;, &#123;<span class="string">&#x27;domain&#x27;</span>: <span class="string">&#x27;.work.weixin.qq.com&#x27;</span>, <span class="string">&#x27;httpOnly&#x27;</span>: True, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;wwrtx.refid&#x27;</span>, <span class="string">&#x27;path&#x27;</span>: <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;secure&#x27;</span>: False, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;1526602970601800&#x27;</span>&#125;, &#123;<span class="string">&#x27;domain&#x27;</span>: <span class="string">&#x27;.work.weixin.qq.com&#x27;</span>, <span class="string">&#x27;httpOnly&#x27;</span>: True, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;wwrtx.sid&#x27;</span>, <span class="string">&#x27;path&#x27;</span>: <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;secure&#x27;</span>: False, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;Q_XlaVNHTvH73y0X-zLYL0FlLS1hveX8NB9YZtMP9eNAmuedzMqh3URVH9YP5Onm&#x27;</span>&#125;, &#123;<span class="string">&#x27;domain&#x27;</span>: <span class="string">&#x27;.work.weixin.qq.com&#x27;</span>, <span class="string">&#x27;expiry&#x27;</span>: <span class="number">1680858600</span>, <span class="string">&#x27;httpOnly&#x27;</span>: False, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;wwrtx.c_gdpr&#x27;</span>, <span class="string">&#x27;path&#x27;</span>: <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;secure&#x27;</span>: False, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;0&#x27;</span>&#125;, &#123;<span class="string">&#x27;domain&#x27;</span>: <span class="string">&#x27;.work.weixin.qq.com&#x27;</span>, <span class="string">&#x27;httpOnly&#x27;</span>: False, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;wwrtx.d2st&#x27;</span>, <span class="string">&#x27;path&#x27;</span>: <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;secure&#x27;</span>: False, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;a6767072&#x27;</span>&#125;, &#123;<span class="string">&#x27;domain&#x27;</span>: <span class="string">&#x27;.work.weixin.qq.com&#x27;</span>, <span class="string">&#x27;httpOnly&#x27;</span>: True, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;wwrtx.vst&#x27;</span>, <span class="string">&#x27;path&#x27;</span>: <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;secure&#x27;</span>: False, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;tGvI3Uxd2lC3KNHn3IZ7bLWbZMgOFAu3ODuM2prpU2vc29i152lddB0jUq6mX_EfrMWpNOtNF53Mdm0x0Wp2by4XiMvHoC8dYVKGGL5Sa0DlftlhUkxQgIgRHZistXpGevoxq1cMovsg39mEnWk_7Wd8OVAt7dowoaHMDXgHwZjri6iFQFE6XsmVHuo-BxWTN7VG0g0svQxHGX8tj8c9iZdE2gCNKPaI4kT_66eZCk_VEn0bSujEKK8BvZKz0m4iGVHJimn2vNc9r1ckyCxqOg&#x27;</span>&#125;, &#123;<span class="string">&#x27;domain&#x27;</span>: <span class="string">&#x27;.work.weixin.qq.com&#x27;</span>, <span class="string">&#x27;expiry&#x27;</span>: <span class="number">1651914612</span>, <span class="string">&#x27;httpOnly&#x27;</span>: False, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;wwrtx.i18n_lan&#x27;</span>, <span class="string">&#x27;path&#x27;</span>: <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;secure&#x27;</span>: False, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;zh&#x27;</span>&#125;]</span><br></pre></td></tr></table></figure>

<h3 id="13-2-5-实战之cookie植入"><a href="#13-2-5-实战之cookie植入" class="headerlink" title="13.2.5  实战之cookie植入"></a>13.2.5  实战之cookie植入</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"><span class="keyword">from</span> test_pytest.test_base <span class="keyword">import</span> Base</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestGetCookie</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_get_cookie</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 访问企业微信登录页面</span></span><br><span class="line">        self.driver.get(<span class="string">&quot;https://work.weixin.qq.com/wework_admin/frame&quot;</span>)</span><br><span class="line">        <span class="comment"># 等待10秒人工扫码操作</span></span><br><span class="line">        sleep(<span class="number">10</span>)</span><br><span class="line">        <span class="comment"># 登录成功后，再去获取 cookie 信息</span></span><br><span class="line">        cookie = self.driver.get_cookies()</span><br><span class="line">        <span class="comment"># 将cookie存入一个可持久存储的地方，文件</span></span><br><span class="line">        <span class="comment"># 打开文件的时候添加写入权限</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;../data/cookie.yml&#x27;</span>, <span class="string">&#x27;w+&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            yaml.safe_dump(cookie, file)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_add_cookie</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 访问企业微信主界面</span></span><br><span class="line">        self.driver.get(<span class="string">&quot;https://work.weixin.qq.com/wework_admin/frame#contacts&quot;</span>)</span><br><span class="line">        <span class="comment"># 定义cookies，cookie信息从已经写入的cookie文件中获取</span></span><br><span class="line">        cookies = yaml.safe_load(<span class="built_in">open</span>(<span class="string">&#x27;../data/cookie.yml&#x27;</span>, mode=<span class="string">&#x27;r&#x27;</span>))</span><br><span class="line">        sleep(<span class="number">2</span>)</span><br><span class="line">        <span class="comment"># 植入cookies——cookie是单个的字典信息</span></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> cookies:</span><br><span class="line">            self.driver.add_cookie(c)</span><br><span class="line">        sleep(<span class="number">3</span>)</span><br><span class="line">        <span class="comment"># 再次访问企业微信页面，发现无需扫码自动登录，而且可以多次使用</span></span><br><span class="line">        self.driver.get(<span class="string">&quot;https://work.weixin.qq.com/wework_admin/frame#contacts&quot;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="14-企业微信web端自动化测试实战"><a href="#14-企业微信web端自动化测试实战" class="headerlink" title="14. 企业微信web端自动化测试实战"></a>14. 企业微信web端自动化测试实战</h1><h2 id="1-UI-自动化技术"><a href="#1-UI-自动化技术" class="headerlink" title="( 1 ) UI 自动化技术"></a>( 1 ) UI 自动化技术</h2><ul>
<li>Web自动化测试（BS）：Selenium、Cypress、Airtest</li>
<li>App自动化测试（CS）：Appium、ATX、Airtest</li>
</ul>
<h2 id="2-selenium3"><a href="#2-selenium3" class="headerlink" title="( 2 ) selenium3"></a>( 2 ) selenium3</h2><p>官网：<a href="https://www.selenium.dev/documentation/">https://www.selenium.dev/documentation/</a></p>
<h2 id="3-自动化测试用例设计"><a href="#3-自动化测试用例设计" class="headerlink" title="( 3 ) 自动化测试用例设计"></a>( 3 ) 自动化测试用例设计</h2><p>UI自动化测试场景：</p>
<p><img src="/2022/03/30/Web%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/POv1Qi9G48RtESLSe0krgooyX2SGSI5O1MttGaEh9h4BOw0QAn74eAql8g8s5Y_Zp9kiUWKJeaNiRhxX__wPVE6nMWDQwonwk9b8JyTjKxbXkCk2tDiHiFXYhw52AcPyUUVN6ROzDEp4OArFpgTodOtTNB5Sh9IU7bH80_lFqlBgvmsrfkmQVotA9HbRs3BbN8JkEXoELSW0Ybq2q.svg"></p>
<h3 id="【1】传统UI代码"><a href="#【1】传统UI代码" class="headerlink" title="【1】传统UI代码"></a>【1】传统UI代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_add_member</span>():</span><br><span class="line">    <span class="comment"># 1.登录</span></span><br><span class="line">    <span class="comment"># 2，进入首页页面</span></span><br><span class="line">    driver = webdriver.Chrome()</span><br><span class="line">    driver.implicitly_wait(<span class="number">5</span>)</span><br><span class="line">    driver.maximize_window()</span><br><span class="line">    driver.get(<span class="string">&quot;https://work.weixin.qq.com/wework_admin/frame#index&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">10</span>)</span><br><span class="line">    <span class="comment"># 3，点击&quot;添加成员&quot;按钮</span></span><br><span class="line">    driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;_hmt_click&quot;]/div[1]/div[4]/div[2]/a[1]/div/span[2]&#x27;</span>).click()</span><br><span class="line">    <span class="comment"># 4.填写成员信息</span></span><br><span class="line">    driver.find_element_by_id(<span class="string">&quot;username&quot;</span>).send_keys(<span class="string">&quot;小花&quot;</span>)</span><br><span class="line">    driver.find_element_by_id(<span class="string">&quot;memberAdd_acctid&quot;</span>).send_keys(<span class="string">&quot;001&quot;</span>)</span><br><span class="line">    driver.find_element_by_id(<span class="string">&quot;memberAdd_biz_mail&quot;</span>).send_keys(<span class="string">&quot;xiaohua001&quot;</span>)</span><br><span class="line">    driver.find_element_by_id(<span class="string">&quot;memberAdd_phone&quot;</span>).send_keys(<span class="string">&quot;18011112222&quot;</span>)</span><br><span class="line">    <span class="comment"># 5.点击&quot;保存&quot;按钮</span></span><br><span class="line">    <span class="comment"># 6.进入通讯录页面</span></span><br><span class="line">    driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;js_contacts52&quot;]/div/div[2]/div/div[4]/div/form/div[1]/a[2]&#x27;</span>).click()</span><br><span class="line">    <span class="comment"># 7.验证=&gt;断言</span></span><br></pre></td></tr></table></figure>

<p>传统代码痛点：</p>
<ul>
<li>大段重复代码</li>
<li>无法适应UI变化</li>
</ul>
<h3 id="【2】PO设计思想"><a href="#【2】PO设计思想" class="headerlink" title="【2】PO设计思想"></a>【2】PO设计思想</h3><p>官网：<a href="https://www.selenium.dev/zh-cn/documentation/test_practices/encouraged/page_object_models/">https://www.selenium.dev/zh-cn/documentation/test_practices/encouraged/page_object_models/</a></p>
<ul>
<li>分工</li>
<li>页面 &#x3D;&#x3D;&gt; 类<ul>
<li>属性（名词）：元素</li>
<li>方法（动词）：功能</li>
</ul>
</li>
</ul>
<p><strong>PO原则解读：</strong></p>
<ul>
<li>属性意义<ul>
<li>不要暴露页面内部的元素给外部</li>
<li>不需要建模UI内的所有元素</li>
</ul>
</li>
<li>方法意义<ul>
<li>用公共方法代表UI所提供的功能</li>
<li>方法应该返回其他的PageObject或者返回用于断言的数据</li>
<li>同样的行为不同的结果可以建模为不同的方法</li>
<li>不要在方法内加断言</li>
</ul>
</li>
</ul>
<p><strong>PO模式下代码：</strong></p>
<p>（1）需求：</p>
<ol>
<li>登录</li>
<li>进入【首页页面】</li>
<li>点击【首页的】添加成员”按钮</li>
<li>在【成员页面】填写成员信息</li>
<li>点击【成员页面】的”保存”按钮</li>
<li>进入【通讯录页面】</li>
<li>断言</li>
</ol>
<p>（2）PageObject：类</p>
<ul>
<li><p>首页main_page</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MainPage</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    首页</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, driver</span>):</span><br><span class="line">        self.driver = driver</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">click_add_member_button</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        点击”添加成员“按钮</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">from</span> web_test_actual_combat.page_object.member_page <span class="keyword">import</span> MemberPage</span><br><span class="line">        self.driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;_hmt_click&quot;]/div[1]/div[4]/div[2]/a[1]/div/span[2]&#x27;</span>).click()</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> MemberPage(self.driver)</span><br></pre></td></tr></table></figure>
</li>
<li><p>成员页面member_page</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MemberPage</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    添加成员页面</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, driver</span>):</span><br><span class="line">        self.driver = driver</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_member_info</span>(<span class="params">self, name, acctid, mail, phone</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        添加成员信息，并保存</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">from</span> web_test_actual_combat.page_object.contact_page <span class="keyword">import</span> ContactPage</span><br><span class="line">        <span class="comment"># 填写成员信息</span></span><br><span class="line">        self.driver.find_element_by_id(<span class="string">&quot;username&quot;</span>).send_keys(name)</span><br><span class="line">        self.driver.find_element_by_id(<span class="string">&quot;memberAdd_acctid&quot;</span>).send_keys(acctid)</span><br><span class="line">        self.driver.find_element_by_id(<span class="string">&quot;memberAdd_biz_mail&quot;</span>).send_keys(mail)</span><br><span class="line">        self.driver.find_element_by_id(<span class="string">&quot;memberAdd_phone&quot;</span>).send_keys(phone)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        self.driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;js_contacts76&quot;]/div/div[2]/div/div[4]/div/form/div[1]/a[2]&#x27;</span>).click()</span><br><span class="line">        <span class="keyword">return</span> ContactPage(self.driver)</span><br></pre></td></tr></table></figure>
</li>
<li><p>通讯录页面contact_page</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ContactPage</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, driver</span>):</span><br><span class="line">        self.driver = driver</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_member_names</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        获取通讯录成员</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># self.driver.find_element_by_xpath(&#x27;//*[@id=&quot;member_list&quot;]/tr[1]/td[2]&#x27;)</span></span><br><span class="line">        element = self.driver.find_elements_by_css_selector(<span class="string">&quot;.member_colRight_memberTable_td:nth-child(2)&quot;</span>)</span><br><span class="line">        name_list = [ele.get_attribute(<span class="string">&quot;title&quot;</span>) <span class="keyword">for</span> ele <span class="keyword">in</span> element]</span><br><span class="line">        <span class="keyword">return</span> name_list</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="【3】企业微信PO建模"><a href="#【3】企业微信PO建模" class="headerlink" title="【3】企业微信PO建模"></a>【3】企业微信PO建模</h3><p><img src="/2022/03/30/Web%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/UxAdyScEMK_thNkoV-6J7RjVBjpwSkuY1LqxXPSDirwiM_zqxrIea9M2eTxpffrFstV3PRYUuDByRFlkfrqBddLCU3fn1aJKIi48gXrPZWlT5XnwZR7fnLI8nTrM2YPwJnUkVjes4wBmnTQMPzDclj_J0p7moVwvJzTYTGQ6EQPwB_gsF-sV1Z7dQSVq5mjNF9ksziMA1W00.svg"></p>
<ul>
<li>黄色的方块代表一个类</li>
<li>每条线代表这个页面提供的方法</li>
<li>箭头的始端为开始页面</li>
<li>箭头的末端为跳转页面或需要断言的数据</li>
</ul>
<p>获取yam</p>
]]></content>
  </entry>
</search>
